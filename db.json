{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-next-master/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/light.jpg","path":"images/light.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/reward-img-wechat.png","path":"images/reward-img-wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/reward-img-alipay.png","path":"images/reward-img-alipay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/wechat-qcode-wpxnew.jpg","path":"images/wechat-qcode-wpxnew.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-next-master/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1566093862387},{"_id":"themes/hexo-theme-next-master/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1566093862388},{"_id":"themes/hexo-theme-next-master/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1566093862390},{"_id":"themes/hexo-theme-next-master/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1566093862397},{"_id":"themes/hexo-theme-next-master/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1566093862399},{"_id":"themes/hexo-theme-next-master/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1566093862400},{"_id":"themes/hexo-theme-next-master/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1566093862401},{"_id":"themes/hexo-theme-next-master/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1566093862403},{"_id":"themes/hexo-theme-next-master/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1566093862404},{"_id":"themes/hexo-theme-next-master/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1566093862405},{"_id":"themes/hexo-theme-next-master/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1566093862406},{"_id":"themes/hexo-theme-next-master/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1566093862408},{"_id":"themes/hexo-theme-next-master/_config.yml","hash":"9007d35de75f909981abd8e4f4d95270da25b6bc","modified":1566093862409},{"_id":"themes/hexo-theme-next-master/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1566093862411},{"_id":"themes/hexo-theme-next-master/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1566093862412},{"_id":"themes/hexo-theme-next-master/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1566093862562},{"_id":"source/_posts/CG-Prj1-Beginning.md","hash":"1bdf83cf59d774af05ba3bddf911802ee0010823","modified":1566103055967},{"_id":"source/_posts/CG-Prj2-Primitive.md","hash":"ec803553373fdc1d2fd71962ce32390830c078ba","modified":1566093862361},{"_id":"source/_posts/CG-Prj3-Clipping.md","hash":"e25b2fed1d6b22f2a1ac80b92a7cc31378050eca","modified":1566093862363},{"_id":"source/_posts/CG-Prj4-2D-Transformation.md","hash":"aab1ffd08a72f0b1d610509a32620c03c74a852e","modified":1566093862364},{"_id":"source/_posts/CG-Prj5-Cube.md","hash":"91d21da02e54fdc5e62ec0956fa328997c4fc0f9","modified":1566093862365},{"_id":"source/_posts/CG-Prj6-Light.md","hash":"c42762f3d18c84cc778536803ad7797e5b6fce74","modified":1566093862367},{"_id":"source/_posts/CGBook_Code.md","hash":"d9242821b8c11301bedcd7ea77d414a9f2f55aec","modified":1566093862368},{"_id":"source/_posts/CGBook_Error.md","hash":"fd5bb2927cb8d4146065b14ffcfab55b83a05974","modified":1566093862369},{"_id":"source/_posts/CG实验0.1 FreeGlut配置简介.md","hash":"fbc5e88682c548bcc0da6a4c948ec3bb4c65b4c4","modified":1589943220439},{"_id":"source/_posts/CG实验0.2 OpenGL程序创建与运行.md","hash":"013a24f14efcda5216d46fe296626a04ab5a8f32","modified":1589943222768},{"_id":"source/_posts/CG实验1 OpenGL初识.md","hash":"e23ee8c643f4f9adfc134eb5eaceaff17850b54c","modified":1589944047018},{"_id":"source/_posts/DV-Prj1_时间趋势可视化.md","hash":"951498d83e92af8e7e40e015a333239657d7545e","modified":1566093862376},{"_id":"source/_posts/DV-Prj2_关系可视化.md","hash":"4743f8a60d5f4251af52c3568cf5b47d1e4cb7b2","modified":1566093862377},{"_id":"source/_posts/DV-Prj3_GeographyDataVisualization.md","hash":"863e54fd985b2bd47a1148058ed8ac737bb87985","modified":1566093862371},{"_id":"source/_posts/DV-Prj4_UniversityStudyVisualization.md","hash":"c96f27a83a53678a9e19741b86cd55e6d58919aa","modified":1566093862372},{"_id":"source/_posts/WebGL画点程序v1.md","hash":"bb564f123367988267e1e310915289ca37a5c2fb","modified":1566093862373},{"_id":"source/_posts/个人博客搭建备忘录.md","hash":"0aa537734d9d88ad6d9bbe5d06aa47fe0ae43da1","modified":1566104240082},{"_id":"source/about/index.md","hash":"5dd1e9c7873b65d29d92d370d7c8a06faa79c62a","modified":1566093862379},{"_id":"source/categories/index.md","hash":"6d019c4ced2455fa89469446dddbe1c1c0ec711f","modified":1566093862381},{"_id":"source/tags/index.md","hash":"80ed14426b21f8297054643f9a69ed264d71b45f","modified":1566093862384},{"_id":"themes/hexo-theme-next-master/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1566093862393},{"_id":"themes/hexo-theme-next-master/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1566093862392},{"_id":"themes/hexo-theme-next-master/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1566093862395},{"_id":"themes/hexo-theme-next-master/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1566093862396},{"_id":"themes/hexo-theme-next-master/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1566093862414},{"_id":"themes/hexo-theme-next-master/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1566093862416},{"_id":"themes/hexo-theme-next-master/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1566093862417},{"_id":"themes/hexo-theme-next-master/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1566093862418},{"_id":"themes/hexo-theme-next-master/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1566093862420},{"_id":"themes/hexo-theme-next-master/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1566093862421},{"_id":"themes/hexo-theme-next-master/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1566093862422},{"_id":"themes/hexo-theme-next-master/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1566093862424},{"_id":"themes/hexo-theme-next-master/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1566093862425},{"_id":"themes/hexo-theme-next-master/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1566093862426},{"_id":"themes/hexo-theme-next-master/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1566093862428},{"_id":"themes/hexo-theme-next-master/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1566093862429},{"_id":"themes/hexo-theme-next-master/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1566093862430},{"_id":"themes/hexo-theme-next-master/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1566093862431},{"_id":"themes/hexo-theme-next-master/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1566093862433},{"_id":"themes/hexo-theme-next-master/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1566093862434},{"_id":"themes/hexo-theme-next-master/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1566093862440},{"_id":"themes/hexo-theme-next-master/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1566093862553},{"_id":"themes/hexo-theme-next-master/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1566093862554},{"_id":"themes/hexo-theme-next-master/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1566093862556},{"_id":"themes/hexo-theme-next-master/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1566093862557},{"_id":"themes/hexo-theme-next-master/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1566093862558},{"_id":"themes/hexo-theme-next-master/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1566093862560},{"_id":"themes/hexo-theme-next-master/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1566093862560},{"_id":"themes/hexo-theme-next-master/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1566093862565},{"_id":"themes/hexo-theme-next-master/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1566093862567},{"_id":"themes/hexo-theme-next-master/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1566093863092},{"_id":"themes/hexo-theme-next-master/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1566093863100},{"_id":"themes/hexo-theme-next-master/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1566093863094},{"_id":"themes/hexo-theme-next-master/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566093862811},{"_id":"themes/hexo-theme-next-master/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1566093862439},{"_id":"themes/hexo-theme-next-master/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1566093862438},{"_id":"themes/hexo-theme-next-master/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1566093862443},{"_id":"themes/hexo-theme-next-master/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1566093862444},{"_id":"themes/hexo-theme-next-master/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1566093862446},{"_id":"themes/hexo-theme-next-master/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1566093862448},{"_id":"themes/hexo-theme-next-master/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1566093862447},{"_id":"themes/hexo-theme-next-master/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1566093862450},{"_id":"themes/hexo-theme-next-master/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1566093862452},{"_id":"themes/hexo-theme-next-master/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1566093862454},{"_id":"themes/hexo-theme-next-master/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1566093862455},{"_id":"themes/hexo-theme-next-master/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1566093862460},{"_id":"themes/hexo-theme-next-master/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1566093862462},{"_id":"themes/hexo-theme-next-master/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1566093862463},{"_id":"themes/hexo-theme-next-master/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1566093862464},{"_id":"themes/hexo-theme-next-master/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1566093862480},{"_id":"themes/hexo-theme-next-master/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1566093862482},{"_id":"themes/hexo-theme-next-master/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1566093862492},{"_id":"themes/hexo-theme-next-master/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1566093862532},{"_id":"themes/hexo-theme-next-master/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1566093862531},{"_id":"themes/hexo-theme-next-master/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1566093862534},{"_id":"themes/hexo-theme-next-master/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1566093862535},{"_id":"themes/hexo-theme-next-master/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1566093862536},{"_id":"themes/hexo-theme-next-master/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1566093862538},{"_id":"themes/hexo-theme-next-master/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1566093862539},{"_id":"themes/hexo-theme-next-master/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1566093862570},{"_id":"themes/hexo-theme-next-master/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1566093862569},{"_id":"themes/hexo-theme-next-master/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1566093862572},{"_id":"themes/hexo-theme-next-master/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1566093862572},{"_id":"themes/hexo-theme-next-master/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1566093862582},{"_id":"themes/hexo-theme-next-master/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1566093862585},{"_id":"themes/hexo-theme-next-master/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1566093862588},{"_id":"themes/hexo-theme-next-master/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1566093862590},{"_id":"themes/hexo-theme-next-master/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1566093862593},{"_id":"themes/hexo-theme-next-master/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1566093862809},{"_id":"themes/hexo-theme-next-master/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1566093862814},{"_id":"themes/hexo-theme-next-master/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1566093862816},{"_id":"themes/hexo-theme-next-master/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1566093862817},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1566093862820},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1566093862822},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1566093862824},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1566093862827},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1566093862828},{"_id":"themes/hexo-theme-next-master/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1566093862830},{"_id":"themes/hexo-theme-next-master/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1566093862831},{"_id":"themes/hexo-theme-next-master/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1566093862833},{"_id":"themes/hexo-theme-next-master/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1566093862834},{"_id":"themes/hexo-theme-next-master/source/images/favicon.png","hash":"44b0fff963ab86c3509f6177297042a1523ca7c8","modified":1566093862836},{"_id":"themes/hexo-theme-next-master/source/images/light.jpg","hash":"7d2fcdefbcf7f5329658b1727b11a89bbf69dde6","modified":1566093862837},{"_id":"themes/hexo-theme-next-master/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1566093862840},{"_id":"themes/hexo-theme-next-master/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1566093862842},{"_id":"themes/hexo-theme-next-master/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1566093862843},{"_id":"themes/hexo-theme-next-master/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1566093862845},{"_id":"themes/hexo-theme-next-master/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1566093862847},{"_id":"themes/hexo-theme-next-master/source/images/reward-img-wechat.png","hash":"06b28701c594e33f771773a69faef307389505fa","modified":1566093862851},{"_id":"themes/hexo-theme-next-master/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1566093862852},{"_id":"themes/hexo-theme-next-master/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566093862488},{"_id":"themes/hexo-theme-next-master/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566093862489},{"_id":"themes/hexo-theme-next-master/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566093862731},{"_id":"themes/hexo-theme-next-master/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566093862732},{"_id":"themes/hexo-theme-next-master/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566093862736},{"_id":"themes/hexo-theme-next-master/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566093862798},{"_id":"themes/hexo-theme-next-master/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566093862803},{"_id":"themes/hexo-theme-next-master/source/images/reward-img-alipay.png","hash":"443087001680494fa980dd0a5f9a94dabf64b924","modified":1566093862849},{"_id":"themes/hexo-theme-next-master/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1566093862457},{"_id":"themes/hexo-theme-next-master/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1566093862459},{"_id":"themes/hexo-theme-next-master/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1566093862467},{"_id":"themes/hexo-theme-next-master/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1566093862468},{"_id":"themes/hexo-theme-next-master/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1566093862469},{"_id":"themes/hexo-theme-next-master/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1566093862472},{"_id":"themes/hexo-theme-next-master/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1566093862473},{"_id":"themes/hexo-theme-next-master/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1566093862475},{"_id":"themes/hexo-theme-next-master/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1566093862477},{"_id":"themes/hexo-theme-next-master/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1566093862484},{"_id":"themes/hexo-theme-next-master/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1566093862487},{"_id":"themes/hexo-theme-next-master/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1566093862490},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1566093862495},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1566093862497},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1566093862501},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1566093862502},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1566093862505},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1566093862504},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1566093862506},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1566093862508},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1566093862509},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1566093862510},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1566093862512},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1566093862513},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1566093862514},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1566093862517},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1566093862518},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1566093862520},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1566093862522},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1566093862523},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1566093862525},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1566093862526},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1566093862527},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1566093862529},{"_id":"themes/hexo-theme-next-master/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1566093862545},{"_id":"themes/hexo-theme-next-master/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1566093862547},{"_id":"themes/hexo-theme-next-master/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1566093862549},{"_id":"themes/hexo-theme-next-master/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1566093862552},{"_id":"themes/hexo-theme-next-master/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1566093862727},{"_id":"themes/hexo-theme-next-master/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1566093862729},{"_id":"themes/hexo-theme-next-master/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1566093862734},{"_id":"themes/hexo-theme-next-master/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1566093862735},{"_id":"themes/hexo-theme-next-master/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1566093862795},{"_id":"themes/hexo-theme-next-master/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1566093862797},{"_id":"themes/hexo-theme-next-master/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1566093862800},{"_id":"themes/hexo-theme-next-master/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1566093862802},{"_id":"themes/hexo-theme-next-master/source/images/wechat-qcode-wpxnew.jpg","hash":"1110d507d83c904ae16a0fdb931c9c7b073a10a1","modified":1566093862856},{"_id":"themes/hexo-theme-next-master/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1566093862861},{"_id":"themes/hexo-theme-next-master/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1566093862863},{"_id":"themes/hexo-theme-next-master/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1566093862864},{"_id":"themes/hexo-theme-next-master/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1566093862865},{"_id":"themes/hexo-theme-next-master/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1566093862868},{"_id":"themes/hexo-theme-next-master/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1566093862869},{"_id":"themes/hexo-theme-next-master/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1566093862875},{"_id":"themes/hexo-theme-next-master/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1566093862877},{"_id":"themes/hexo-theme-next-master/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1566093862881},{"_id":"themes/hexo-theme-next-master/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1566093862883},{"_id":"themes/hexo-theme-next-master/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1566093862884},{"_id":"themes/hexo-theme-next-master/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1566093862914},{"_id":"themes/hexo-theme-next-master/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1566093862920},{"_id":"themes/hexo-theme-next-master/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1566093862926},{"_id":"themes/hexo-theme-next-master/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1566093862963},{"_id":"themes/hexo-theme-next-master/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1566093862966},{"_id":"themes/hexo-theme-next-master/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1566093862968},{"_id":"themes/hexo-theme-next-master/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1566093862973},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1566093862982},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1566093862983},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1566093862985},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1566093862986},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1566093862987},{"_id":"themes/hexo-theme-next-master/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1566093863015},{"_id":"themes/hexo-theme-next-master/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1566093863019},{"_id":"themes/hexo-theme-next-master/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1566093863021},{"_id":"themes/hexo-theme-next-master/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1566093863023},{"_id":"themes/hexo-theme-next-master/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1566093863025},{"_id":"themes/hexo-theme-next-master/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1566093863027},{"_id":"themes/hexo-theme-next-master/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1566093863028},{"_id":"themes/hexo-theme-next-master/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1566093863031},{"_id":"themes/hexo-theme-next-master/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1566093863033},{"_id":"themes/hexo-theme-next-master/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1566093863034},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1566093863037},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1566093863040},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1566093863042},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1566093863044},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1566093863045},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1566093863046},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1566093863048},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1566093863049},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1566093863051},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1566093863052},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1566093863053},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1566093863056},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1566093863058},{"_id":"themes/hexo-theme-next-master/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1566093863060},{"_id":"themes/hexo-theme-next-master/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1566093863063},{"_id":"themes/hexo-theme-next-master/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1566093863064},{"_id":"themes/hexo-theme-next-master/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1566093863066},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1566093863080},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1566093863081},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1566093863086},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1566093863087},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1566093863090},{"_id":"themes/hexo-theme-next-master/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1566093863017},{"_id":"themes/hexo-theme-next-master/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1566093862543},{"_id":"themes/hexo-theme-next-master/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1566093862544},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1566093862601},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1566093862603},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1566093862605},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1566093862606},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1566093862607},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1566093862633},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1566093862679},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1566093862714},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1566093862717},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1566093862718},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1566093862720},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1566093862721},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1566093862723},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1566093862724},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1566093862741},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1566093862744},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1566093862745},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1566093862747},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1566093862748},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1566093862750},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1566093862751},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1566093862753},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1566093862768},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1566093862769},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1566093862771},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1566093862773},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1566093862775},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1566093862781},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1566093862782},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1566093862784},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1566093862786},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1566093862788},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1566093862791},{"_id":"themes/hexo-theme-next-master/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1566093862880},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1566093862906},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1566093862930},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1566093862932},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1566093862933},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1566093862935},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1566093862937},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1566093862940},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1566093862953},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1566093862959},{"_id":"themes/hexo-theme-next-master/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1566093862977},{"_id":"themes/hexo-theme-next-master/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1566093862979},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1566093862991},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1566093862993},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1566093862994},{"_id":"themes/hexo-theme-next-master/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1566093863076},{"_id":"themes/hexo-theme-next-master/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1566093863077},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1566093862901},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1566093862910},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1566093862957},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1566093863011},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1566093863012},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1566093863084},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1566093862610},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1566093862612},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1566093862613},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1566093862616},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1566093862618},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1566093862615},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1566093862620},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1566093862623},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1566093862622},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1566093862626},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1566093862629},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1566093862628},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1566093862630},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1566093862632},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1566093862640},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1566093862642},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1566093862643},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1566093862644},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1566093862646},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1566093862649},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1566093862650},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1566093862647},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1566093862652},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1566093862653},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1566093862654},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1566093862656},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1566093862657},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1566093862658},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1566093862660},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1566093862663},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1566093862664},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1566093862667},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1566093862668},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1566093862670},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1566093862671},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1566093862673},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1566093862675},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1566093862676},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1566093862678},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1566093862682},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1566093862684},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1566093862685},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1566093862688},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1566093862689},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1566093862691},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1566093862692},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1566093862694},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1566093862695},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1566093862698},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1566093862700},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1566093862701},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1566093862703},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1566093862704},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1566093862706},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1566093862707},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1566093862709},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1566093862710},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1566093862712},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1566093862763},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1566093862765},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1566093862778},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1566093862892},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1566093862894},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1566093862896},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1566093862898},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1566093862900},{"_id":"themes/hexo-theme-next-master/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1566093862903},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1566093862943},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1566093862945},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1566093862947},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1566093862948},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1566093862951},{"_id":"themes/hexo-theme-next-master/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1566093862950},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1566093862998},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1566093863001},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1566093863008},{"_id":"themes/hexo-theme-next-master/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1566093862918},{"_id":"themes/hexo-theme-next-master/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1566093863070},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1566093863004},{"_id":"public/search.xml","hash":"be66da20bfadf697d759228b2a804e2413e95b46","modified":1593053233999},{"_id":"public/about/index.html","hash":"a7246cf63734866e8ddd2141b4196035397c2a47","modified":1593051740575},{"_id":"public/categories/index.html","hash":"dcf1a4d1ce6c6038a72d95112e6230e3dfa17096","modified":1593051740585},{"_id":"public/tags/index.html","hash":"84423323af62f502019e7cf7541e671f5a4e2f60","modified":1593051740585},{"_id":"public/archives/page/2/index.html","hash":"c3a27d81144345ee2d2d0215ab367781116b69fb","modified":1593051740586},{"_id":"public/archives/2020/page/2/index.html","hash":"360080ec89470a28eca8449ba633d9327a2492ec","modified":1593051740589},{"_id":"public/archives/2020/01/page/2/index.html","hash":"ddbe382cc87672dac4375587504fbf9b3e1ef513","modified":1593051740588},{"_id":"public/archives/2020/05/index.html","hash":"6d2da1a0638de022ca94f4fbb24a5eda7f28ca79","modified":1593051740588},{"_id":"public/categories/计算机图形学/index.html","hash":"dde7bcd061fded7940e11ede9bb8509c7992ff39","modified":1593051740585},{"_id":"public/categories/计算机图形学基础（第2版）/index.html","hash":"9cfe181a0c0b217950f77d087f6c49947bba7e02","modified":1593051740588},{"_id":"public/categories/图形学/index.html","hash":"f5212c4c5ffb43f6911c552821aa558ef1dec09d","modified":1593051740585},{"_id":"public/categories/数据可视化/index.html","hash":"b402a8a562d732ed1b35bd4fe5e8c7ad12b44068","modified":1593051740585},{"_id":"public/tags/图形学/index.html","hash":"97c2225e5e660abd7ccdae9478d3bfb27302e4d4","modified":1593051740585},{"_id":"public/tags/可视化/index.html","hash":"634a89a38f3f07be552610a25167d2341b21e2f9","modified":1593051740585},{"_id":"public/tags/地理空间数据/index.html","hash":"02741a24af22780ad41df27e7914654ae0819bfa","modified":1593051740585},{"_id":"public/tags/时间趋势/index.html","hash":"fbedf3f8d1ad0ed61b2fed335563f7ae9263aa23","modified":1593051740585},{"_id":"public/2020/05/20/CG实验0.1 FreeGlut配置简介/index.html","hash":"dde983e8d14c277b7489a2ef0705b5a1efc6500f","modified":1593051740588},{"_id":"public/2020/05/20/CG实验0.2 OpenGL程序创建与运行/index.html","hash":"0e63a438484bf66791afbdc76cfe53347747f368","modified":1593051740588},{"_id":"public/2020/05/19/CG实验1 OpenGL初识/index.html","hash":"2919528339f28b349e5cfd5ab3227806be3e9083","modified":1593051740588},{"_id":"public/2020/01/19/个人博客搭建备忘录/index.html","hash":"97075552989102e1ae5e256348bb6e56cffc3c10","modified":1593051740588},{"_id":"public/2020/01/19/WebGL画点程序v1/index.html","hash":"92437e8ea429f1bf97ab52f4eaf1654e61283aeb","modified":1593051740589},{"_id":"public/2020/01/19/DV-Prj4_UniversityStudyVisualization/index.html","hash":"2c63d2cdab75f7c2f31d1c703b32f86dd33252f9","modified":1593051740589},{"_id":"public/2020/01/19/DV-Prj3_GeographyDataVisualization/index.html","hash":"dba768562a673bb5ceb5c1d800992f09e36facc0","modified":1593051740589},{"_id":"public/2020/01/19/DV-Prj2_关系可视化/index.html","hash":"37ebf308e4272fe3ca510e59df54ff617a0a3594","modified":1593051740589},{"_id":"public/2020/01/19/DV-Prj1_时间趋势可视化/index.html","hash":"2a6d2ceeac9d059446aa3caae1f584038a4a81a6","modified":1593051740589},{"_id":"public/2020/01/19/CGBook_Error/index.html","hash":"24436c599fc2ab43cc4fcd935e35ffb5de34ed62","modified":1593051740589},{"_id":"public/2020/01/19/CGBook_Code/index.html","hash":"e99124d9a3407f3587b4ce24224a9d765980dc17","modified":1593051740589},{"_id":"public/2020/01/19/CG-Prj6-Light/index.html","hash":"91177c85aac5880d48042aaec3565730fb5a3356","modified":1593051740589},{"_id":"public/2020/01/19/CG-Prj5-Cube/index.html","hash":"9727b8da634944ca702e683779523be1cd38fbfb","modified":1593051740589},{"_id":"public/2020/01/19/CG-Prj4-2D-Transformation/index.html","hash":"918273d3c16cbe09a24d76b61c6fc710a1509232","modified":1593051740589},{"_id":"public/2020/01/19/CG-Prj3-Clipping/index.html","hash":"329207bccf4f61d5b326c707294bf2bb22e058e9","modified":1593051740589},{"_id":"public/2020/01/19/CG-Prj2-Primitive/index.html","hash":"2c329f62eeb0886d0504071f08efe7d0d135e21a","modified":1593051740589},{"_id":"public/2020/01/19/CG-Prj1-Beginning/index.html","hash":"cdb124acf55f3cf3a351d89684388382a7bfabf6","modified":1593051740589},{"_id":"public/archives/index.html","hash":"219346bfd42615746f9a3709de32bc04ebe55485","modified":1593051740585},{"_id":"public/archives/2020/index.html","hash":"e083b6a43cb48033ae371659e9c3b4af38a4df72","modified":1593051740589},{"_id":"public/archives/2020/01/index.html","hash":"d608b14bebac4c6a7e15706436abce2680764c4a","modified":1593051740589},{"_id":"public/index.html","hash":"08dea9d1c747306510268bcccd4edc9ad874daa3","modified":1593051740586},{"_id":"public/page/2/index.html","hash":"6c0721d863563818183b812252a5d241b1aff273","modified":1593051740586},{"_id":"public/tags/计算机图形学/index.html","hash":"a40c879156661bf33a4e958b28a4ba527fe3b0db","modified":1593051740586},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1589944289963},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1589944289963},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1589944289963},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1589944289963},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1589944289963},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1589944289963},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1589944289963},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1589944289963},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1589944289963},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1589944289963},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1589944289964},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1589944289964},{"_id":"public/images/favicon.png","hash":"44b0fff963ab86c3509f6177297042a1523ca7c8","modified":1589944289964},{"_id":"public/images/light.jpg","hash":"7d2fcdefbcf7f5329658b1727b11a89bbf69dde6","modified":1589944289964},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1589944289964},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1589944289964},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1589944289964},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1589944289964},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1589944289964},{"_id":"public/images/reward-img-wechat.png","hash":"06b28701c594e33f771773a69faef307389505fa","modified":1589944289964},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1589944289964},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1589944289964},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1589944289964},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1589944289964},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1589944289964},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1589944289964},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1589944289964},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1589944289964},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1589944289964},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1589944289964},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1589944289964},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1589944289964},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1589944289965},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1589944289965},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1589944289965},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1589944289965},{"_id":"public/images/reward-img-alipay.png","hash":"443087001680494fa980dd0a5f9a94dabf64b924","modified":1589944290399},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1589944290400},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1589944290408},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1589944290417},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1589944290417},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1589944290417},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1589944290417},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1589944290417},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1589944290417},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1589944290417},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1589944290417},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1589944290417},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1589944290417},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1589944290417},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1589944290417},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1589944290417},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1589944290417},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1589944290417},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1589944290417},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1589944290418},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1589944290418},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1589944290418},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1589944290418},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1589944290418},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1589944290418},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1589944290418},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1589944290418},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1589944290419},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1589944290419},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1589944290419},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1589944290419},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1589944290419},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1589944290419},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1589944290419},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1589944290419},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1589944290419},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1589944290419},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1589944290419},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1589944290419},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1589944290419},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1589944290419},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1589944290419},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1589944290419},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1589944290419},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1589944290419},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1589944290420},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1589944290420},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1589944290420},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1589944290420},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1589944290420},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1589944290420},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1589944290420},{"_id":"public/css/main.css","hash":"25962fde01404642c5fd5f36e2bbca0f5c650914","modified":1589944290420},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1589944290420},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1589944290420},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1589944290421},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1589944290421},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1589944290421},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1589944290421},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1589944290421},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1589944290421},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1589944290421},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1589944290421},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1589944290422},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1589944290422},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1589944290422},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1589944290422},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1589944290422},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1589944290423},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1589944290423},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1589944290423},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1589944290423},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1589944290423},{"_id":"public/images/wechat-qcode-wpxnew.jpg","hash":"1110d507d83c904ae16a0fdb931c9c7b073a10a1","modified":1589944290423},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1589944290423},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1589944290423},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1589944290423},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1589944290469},{"_id":"source/_posts/Experiment1-DrawASquare.md","hash":"b0e867e55cd3c6279eae2ee2fe261c4275add551","modified":1593053066116},{"_id":"public/archives/2020/06/index.html","hash":"6c570f72a6457e1e7f8358b326e92a05ea085ff5","modified":1593051740588},{"_id":"public/categories/Computer-Graphics/index.html","hash":"7a741f4728584b6c2213753f99bcb908632c7c99","modified":1593051740588},{"_id":"public/tags/Computer-Graphics/index.html","hash":"336605b5e0ea544b0b995ac7246b57d6c86a0c10","modified":1593051740588},{"_id":"public/2020/06/25/Experiment1-DrawASquare/index.html","hash":"49cd13557a1052cfdd0fe807ab0e8be4fbeb4a3e","modified":1593053236636}],"Category":[{"name":"计算机图形学","_id":"ckaers0520002r0ak1ifh7wxn"},{"name":"计算机图形学基础（第2版）","_id":"ckaers05j000mr0ak2049xfe5"},{"name":"图形学","_id":"ckaers05q000ur0aktq5pqed4"},{"name":"数据可视化","_id":"ckaers05u0011r0akzkgmz1zf"},{"name":"Computer Graphics","_id":"ckbu5vf75000180akhatim2af"}],"Data":[],"Page":[{"title":"about","date":"2018-10-03T23:59:37.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-10-04 07:59:37\n---\n","updated":"2019-08-18T02:04:22.379Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckaers09q001wr0ak93lv9vfj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"计算机图形学","date":"2018-10-03T23:58:00.000Z","_content":"\n---\ntitle: 数据可视化\ndate: 2018-10-04 10:27\n---\n","source":"categories/index.md","raw":"---\ntitle: 计算机图形学\ndate: 2018-10-04 07:58\n---\n\n---\ntitle: 数据可视化\ndate: 2018-10-04 10:27\n---\n","updated":"2019-08-18T02:04:22.381Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckaers09r001xr0akfm8w1eti","content":"<hr>\n<p>title: 数据可视化</p>\n<h2 id=\"date-2018-10-04-10-27\"><a href=\"#date-2018-10-04-10-27\" class=\"headerlink\" title=\"date: 2018-10-04 10:27\"></a>date: 2018-10-04 10:27</h2>","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title: 数据可视化</p>\n<h2 id=\"date-2018-10-04-10-27\"><a href=\"#date-2018-10-04-10-27\" class=\"headerlink\" title=\"date: 2018-10-04 10:27\"></a>date: 2018-10-04 10:27</h2>"},{"title":"tags","date":"2018-10-03T23:59:16.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-10-04 07:59:16\n---\n","updated":"2019-08-18T02:04:22.384Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckaers09t001yr0ak9cyqx0gu","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"实验1 OpenGL初识","_content":"## 1．实验目的：\n\n- 熟悉编程环境；了解光栅图形显示器的特点；\n- 了解计算机绘图的特点；\n- 利用VC+OpenGL作为开发平台设计程序，以能够在屏幕上生成任意一个像素点为本实验的结束。\n\n## 2．实验内容：\n\n（0） 实验预备知识；Windows下的OpenGL编程步骤简单介绍详见课程实验教学博客－实验0 安装GLUT包与创建工程（40分钟）：\n\nhttps://blog.csdn.net/wpxu08/article/details/70208353\n\n（1） 了解和使用VC的开发环境，理解简单的OpenGL程序结构（20分钟）；\n\n（2） 掌握OpenGL提供的基本图形函数，尤其是生成点的函数（20分钟）；\n\n（3） 撰写实验报告，增加程序代码合并到一个word文档，将其命名为“序号-姓名-Prj1.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交（20分钟）。\n\n## 3．实验原理：\n\n1）基本语法\n\n常用的程序设计语言，如C、C++、Pascal、Fortran和Java等，都支持OpenGL的开发。这里只讨论C版本下OpenGL的语法。\n\nOpenGL基本函数均使用gl作为函数名的前缀，如glClearColor()；实用函数则使用glu作为函数名的前缀，如gluSphere()。OpenGL基本常量的名字以GL_开头，如GL_LINE_LOOP；实用常量的名字以GLU_开头，如GLU_FILL。一些函数如glColor*()（定义颜色值），函数名后可以接不同的后缀以支持不同的数据类型和格式。如glColor3b(...)、glColor3d(...)、glColor3f(...)和glColor3bv(...)等，这几个函数在功能上是相似的，只是适用于不同的数据类型和格式，其中3表示该函数带有三个参数，b、d、f分别表示参数的类型是字节型、双精度浮点型和单精度浮点型，v则表示这些参数是以向量形式出现的。\n\n为便于移植，OpenGL定义了一些自己的数据类型，如GLfloat,GLvoid。它们其实就是C中的float和void。在gl.h文件中可以看到以下定义：\n\n……\n\ntypedef float GLfloat;\n\ntypedef void GLvoid;\n\n……\n\n一些基本的数据类型都有类似的定义项。\n\n（2）程序的基本结构\n\nOpenGL程序的基本结构可分为三个部分：\n\n第一部分是初始化部分。主要是设置一些OpenGL的状态开关，如颜色模式(RGBA或Alpha)的选择，是否作光照处理(若有的话，还需设置光源的特性)，深度检测，裁剪等等。这些状态一般都用函数glEnable(...), glDisable(…)来设置，…表示特定的状态。\n\n第二部分设置观察坐标系下的取景模式和取景框位置大小。主要利用了三个函数：\n\n函数void glViewport(left,top,right,bottom)：设置在屏幕上的窗口大小，四个参数描述屏幕窗口四个角上的坐标（以像素表示）；\n\n函数void glOrtho(left,right,bottom,top,near,far)：设置投影方式为正交投影（平行投影），其取景体积是一个各面均为矩形的六面体;\n\n函数void gluPerspective(fovy,aspect,zNear,zFar)：设置投影方式为透视投影，其取景体积是一个截头锥体。\n\n第三部分是OpenGL的主要部分，使用OpenGL的库函数构造几何物体对象的数学描述，包括点线面的位置和拓扑关系、几何变换、光照处理等等。\n\n以上三个部分是OpenGL程序的基本框架，即使移植到使用MFC的Windows程序中，也是如此。只是由于Windows自身有一套显示方式，需要进行一些必要的改动以协调这两种不同显示方式。\n\n（3）状态机制\n\nOpenGL的工作方式是一种状态机制，它可以进行各种状态或模式设置，这些状态或模式在重新改变它们之前一直有效。例如，当前颜色就是一个状态变量，在这个状态改变之前，绘制的每个像素都将使用该颜色，直到当前颜色被设置为其它颜色为止。OpenGL中大量地使用了这种状态机制，如颜色模式、投影模式、单双显示缓存区的设置、背景色的设置、光源的位置和特性等等。许多状态变量可以通过glEnable()、glDisable()这两个函数来设置成有效或无效状态，如是否设置光照、是否进行深度检测等；在被设置成有效状态之后，绝大部分状态变量都有一个缺省值。通常情况下，可以用下列四个函数来获取某个状态变量的值：glGetBooleanv()、glGetDouble()、glGetFloatv()和glGetIntegerv()。究竟选择哪个函数应该根据所要获得的返回值的数据类型来决定。还有些状态变量有特殊的查询函数，如glGetLight*()、glGetError()和glPolygonStipple()等。另外，使用glPushAttrib()和glPopAttrib()函数，可以存储和恢复最近的状态变量的值。只要有可能，都应该使用这些函数，因为它们比其它查询函数的效率更高。\n\n4．实验代码：\n```\n#include <GL/glut.h> //需要正确安装GLUT，安装方法如预备知识中所述\n\nvoid myDisplay(void)\n\n{\n\nglClearColor(0.0, 0.0, 0.0, 0.0);\nglClear(GL_COLOR_BUFFER_BIT);\n\nglColor3f (1.0f, 1.0f, 1.0f);\n\nglRectf(-0.5f, -0.5f, 0.5f, 0.5f);\n\nglBegin (GL_TRIANGLES);\n\nglColor3f (1.0f, 0.0f, 0.0f); glVertex2f (0.0f, 1.0f);\n\nglColor3f (0.0f, 1.0f, 0.0f); glVertex2f (0.8f, -0.5f);\n\nglColor3f (0.0f, 0.0f, 1.0f); glVertex2f (-0.8f, -0.5f);\n\nglEnd ();\n\nglPointSize(3);\n\nglBegin (GL_POINTS);\n\nglColor3f (1.0f, 0.0f, 0.0f); glVertex2f (-0.4f, -0.4f);\n\nglColor3f (0.0f, 1.0f, 0.0f); glVertex2f (0.0f, 0.0f);\n\nglColor3f (0.0f, 0.0f, 1.0f); glVertex2f (0.4f, 0.4f);\n\nglEnd ();\n\nglFlush();\n}\nint main(int argc, char *argv[])\n{\n    glutInit(&argc, argv);\n    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);\n    glutInitWindowPosition(100, 100);\n    glutInitWindowSize(400, 400);\n    glutCreateWindow(\"Hello World!\");\n    glutDisplayFunc(&myDisplay);\n    glutMainLoop();\n    return 0;\n}\n```\n\n程序说明： \n该程序的作用是在一个黑色的窗口中央画一个矩形、三角形和三个点，如图A.1(a)所示。下面对各行语句进行说明：\n\n首先，需要包含头文件#include <GL/glut.h>，这是GLUT的头文件。本来OpenGL程序一般还要包含<GL/gl.h>和<GL/glu.h>，但GLUT的头文件中已经自动将这两个文件包含了，不必再次包含；\n\n然后看main函数。int main(int argc, char *argv[])，这个是带命令行参数的main函数。注意main函数中的各语句，除了最后的return之外，其余全部以glut开头。这种以glut开头的函数都是GLUT工具包所提供的函数，下面对用到的几个函数进行介绍；\n\n1）glutInit，对GLUT进行初始化，这个函数必须在其它的GLUT使用之前调用一次。其格式比较固定，一般都是glutInit(&argc, argv)就行；\n\n2) glutInitDisplayMode，设置显示方式，其中GLUT_RGB表示使用RGB颜色，与之对应的还有GLUT_INDEX（表示使用索引颜色）。GLUT_SINGLE表示使用单缓冲，与之对应的还有GLUT_DOUBLE（使用双缓冲）。更多信息，以后的实验教程会有讲解介绍；\n\n3) glutInitWindowPosition，设置窗口在屏幕中的位置；\n\n4) glutInitWindowSize，设置窗口的大小；\n\n5) glutCreateWindow，根据前述设置的信息创建窗口。参数将被作为窗口的标题。注意：窗口被创建后，并不立即显示到屏幕上。需要调用glutMainLoop才能看到窗口；\n\n6) glutDisplayFunc，设置一个函数，当需要进行画图时，这个函数就会被调用。（暂且这样理解）；\n\n7) glutMainLoop，进行一个消息循环。（现在只需知道这个函数可以显示窗口，并且等待窗口关闭后才会返回。）\n\n在glutDisplayFunc函数中，我们设置了“当需要画图时，请调用myDisplay函数”。于是myDisplay函数就用来画图。观察myDisplay中的三个函数调用，发现它们都以gl开头。这种以gl开头的函数都是OpenGL的标准函数，下面对用到的函数进行介绍：\n\n1) glClearColor(0.0, 0.0, 0.0, 0.0) ：将清空颜色设为黑色（为什么会有四个参数？）；\n\n2) glClear(GL_COLOR_BUFFER_BIT)：将窗口的背景设置为当前清空颜色；\n\n3) glRectf，画一个矩形。四个参数分别表示了位于对角线上的两个点的横、纵坐标；\n\n4) glFlush，保证前面的OpenGL命令立即执行（而不是让它们在缓冲区中等待）。\n\n\n## 5．实验思考\n\n根据示范程序，能否在原有结果基础上添加三条直线组成三角形（如图A.1所示）？\n![图A.1 加三角形](http://images.cnitblog.com/blog/26309/201406/151113465926805.jpg)\n\n<center>图A.1 加三角形后的效果</center>","source":"_posts/CG-Prj1-Beginning.md","raw":"---\ntitle: 实验1 OpenGL初识\ntags: [计算机图形学]\ncategories: 计算机图形学\n---\n## 1．实验目的：\n\n- 熟悉编程环境；了解光栅图形显示器的特点；\n- 了解计算机绘图的特点；\n- 利用VC+OpenGL作为开发平台设计程序，以能够在屏幕上生成任意一个像素点为本实验的结束。\n\n## 2．实验内容：\n\n（0） 实验预备知识；Windows下的OpenGL编程步骤简单介绍详见课程实验教学博客－实验0 安装GLUT包与创建工程（40分钟）：\n\nhttps://blog.csdn.net/wpxu08/article/details/70208353\n\n（1） 了解和使用VC的开发环境，理解简单的OpenGL程序结构（20分钟）；\n\n（2） 掌握OpenGL提供的基本图形函数，尤其是生成点的函数（20分钟）；\n\n（3） 撰写实验报告，增加程序代码合并到一个word文档，将其命名为“序号-姓名-Prj1.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交（20分钟）。\n\n## 3．实验原理：\n\n1）基本语法\n\n常用的程序设计语言，如C、C++、Pascal、Fortran和Java等，都支持OpenGL的开发。这里只讨论C版本下OpenGL的语法。\n\nOpenGL基本函数均使用gl作为函数名的前缀，如glClearColor()；实用函数则使用glu作为函数名的前缀，如gluSphere()。OpenGL基本常量的名字以GL_开头，如GL_LINE_LOOP；实用常量的名字以GLU_开头，如GLU_FILL。一些函数如glColor*()（定义颜色值），函数名后可以接不同的后缀以支持不同的数据类型和格式。如glColor3b(...)、glColor3d(...)、glColor3f(...)和glColor3bv(...)等，这几个函数在功能上是相似的，只是适用于不同的数据类型和格式，其中3表示该函数带有三个参数，b、d、f分别表示参数的类型是字节型、双精度浮点型和单精度浮点型，v则表示这些参数是以向量形式出现的。\n\n为便于移植，OpenGL定义了一些自己的数据类型，如GLfloat,GLvoid。它们其实就是C中的float和void。在gl.h文件中可以看到以下定义：\n\n……\n\ntypedef float GLfloat;\n\ntypedef void GLvoid;\n\n……\n\n一些基本的数据类型都有类似的定义项。\n\n（2）程序的基本结构\n\nOpenGL程序的基本结构可分为三个部分：\n\n第一部分是初始化部分。主要是设置一些OpenGL的状态开关，如颜色模式(RGBA或Alpha)的选择，是否作光照处理(若有的话，还需设置光源的特性)，深度检测，裁剪等等。这些状态一般都用函数glEnable(...), glDisable(…)来设置，…表示特定的状态。\n\n第二部分设置观察坐标系下的取景模式和取景框位置大小。主要利用了三个函数：\n\n函数void glViewport(left,top,right,bottom)：设置在屏幕上的窗口大小，四个参数描述屏幕窗口四个角上的坐标（以像素表示）；\n\n函数void glOrtho(left,right,bottom,top,near,far)：设置投影方式为正交投影（平行投影），其取景体积是一个各面均为矩形的六面体;\n\n函数void gluPerspective(fovy,aspect,zNear,zFar)：设置投影方式为透视投影，其取景体积是一个截头锥体。\n\n第三部分是OpenGL的主要部分，使用OpenGL的库函数构造几何物体对象的数学描述，包括点线面的位置和拓扑关系、几何变换、光照处理等等。\n\n以上三个部分是OpenGL程序的基本框架，即使移植到使用MFC的Windows程序中，也是如此。只是由于Windows自身有一套显示方式，需要进行一些必要的改动以协调这两种不同显示方式。\n\n（3）状态机制\n\nOpenGL的工作方式是一种状态机制，它可以进行各种状态或模式设置，这些状态或模式在重新改变它们之前一直有效。例如，当前颜色就是一个状态变量，在这个状态改变之前，绘制的每个像素都将使用该颜色，直到当前颜色被设置为其它颜色为止。OpenGL中大量地使用了这种状态机制，如颜色模式、投影模式、单双显示缓存区的设置、背景色的设置、光源的位置和特性等等。许多状态变量可以通过glEnable()、glDisable()这两个函数来设置成有效或无效状态，如是否设置光照、是否进行深度检测等；在被设置成有效状态之后，绝大部分状态变量都有一个缺省值。通常情况下，可以用下列四个函数来获取某个状态变量的值：glGetBooleanv()、glGetDouble()、glGetFloatv()和glGetIntegerv()。究竟选择哪个函数应该根据所要获得的返回值的数据类型来决定。还有些状态变量有特殊的查询函数，如glGetLight*()、glGetError()和glPolygonStipple()等。另外，使用glPushAttrib()和glPopAttrib()函数，可以存储和恢复最近的状态变量的值。只要有可能，都应该使用这些函数，因为它们比其它查询函数的效率更高。\n\n4．实验代码：\n```\n#include <GL/glut.h> //需要正确安装GLUT，安装方法如预备知识中所述\n\nvoid myDisplay(void)\n\n{\n\nglClearColor(0.0, 0.0, 0.0, 0.0);\nglClear(GL_COLOR_BUFFER_BIT);\n\nglColor3f (1.0f, 1.0f, 1.0f);\n\nglRectf(-0.5f, -0.5f, 0.5f, 0.5f);\n\nglBegin (GL_TRIANGLES);\n\nglColor3f (1.0f, 0.0f, 0.0f); glVertex2f (0.0f, 1.0f);\n\nglColor3f (0.0f, 1.0f, 0.0f); glVertex2f (0.8f, -0.5f);\n\nglColor3f (0.0f, 0.0f, 1.0f); glVertex2f (-0.8f, -0.5f);\n\nglEnd ();\n\nglPointSize(3);\n\nglBegin (GL_POINTS);\n\nglColor3f (1.0f, 0.0f, 0.0f); glVertex2f (-0.4f, -0.4f);\n\nglColor3f (0.0f, 1.0f, 0.0f); glVertex2f (0.0f, 0.0f);\n\nglColor3f (0.0f, 0.0f, 1.0f); glVertex2f (0.4f, 0.4f);\n\nglEnd ();\n\nglFlush();\n}\nint main(int argc, char *argv[])\n{\n    glutInit(&argc, argv);\n    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);\n    glutInitWindowPosition(100, 100);\n    glutInitWindowSize(400, 400);\n    glutCreateWindow(\"Hello World!\");\n    glutDisplayFunc(&myDisplay);\n    glutMainLoop();\n    return 0;\n}\n```\n\n程序说明： \n该程序的作用是在一个黑色的窗口中央画一个矩形、三角形和三个点，如图A.1(a)所示。下面对各行语句进行说明：\n\n首先，需要包含头文件#include <GL/glut.h>，这是GLUT的头文件。本来OpenGL程序一般还要包含<GL/gl.h>和<GL/glu.h>，但GLUT的头文件中已经自动将这两个文件包含了，不必再次包含；\n\n然后看main函数。int main(int argc, char *argv[])，这个是带命令行参数的main函数。注意main函数中的各语句，除了最后的return之外，其余全部以glut开头。这种以glut开头的函数都是GLUT工具包所提供的函数，下面对用到的几个函数进行介绍；\n\n1）glutInit，对GLUT进行初始化，这个函数必须在其它的GLUT使用之前调用一次。其格式比较固定，一般都是glutInit(&argc, argv)就行；\n\n2) glutInitDisplayMode，设置显示方式，其中GLUT_RGB表示使用RGB颜色，与之对应的还有GLUT_INDEX（表示使用索引颜色）。GLUT_SINGLE表示使用单缓冲，与之对应的还有GLUT_DOUBLE（使用双缓冲）。更多信息，以后的实验教程会有讲解介绍；\n\n3) glutInitWindowPosition，设置窗口在屏幕中的位置；\n\n4) glutInitWindowSize，设置窗口的大小；\n\n5) glutCreateWindow，根据前述设置的信息创建窗口。参数将被作为窗口的标题。注意：窗口被创建后，并不立即显示到屏幕上。需要调用glutMainLoop才能看到窗口；\n\n6) glutDisplayFunc，设置一个函数，当需要进行画图时，这个函数就会被调用。（暂且这样理解）；\n\n7) glutMainLoop，进行一个消息循环。（现在只需知道这个函数可以显示窗口，并且等待窗口关闭后才会返回。）\n\n在glutDisplayFunc函数中，我们设置了“当需要画图时，请调用myDisplay函数”。于是myDisplay函数就用来画图。观察myDisplay中的三个函数调用，发现它们都以gl开头。这种以gl开头的函数都是OpenGL的标准函数，下面对用到的函数进行介绍：\n\n1) glClearColor(0.0, 0.0, 0.0, 0.0) ：将清空颜色设为黑色（为什么会有四个参数？）；\n\n2) glClear(GL_COLOR_BUFFER_BIT)：将窗口的背景设置为当前清空颜色；\n\n3) glRectf，画一个矩形。四个参数分别表示了位于对角线上的两个点的横、纵坐标；\n\n4) glFlush，保证前面的OpenGL命令立即执行（而不是让它们在缓冲区中等待）。\n\n\n## 5．实验思考\n\n根据示范程序，能否在原有结果基础上添加三条直线组成三角形（如图A.1所示）？\n![图A.1 加三角形](http://images.cnitblog.com/blog/26309/201406/151113465926805.jpg)\n\n<center>图A.1 加三角形后的效果</center>","slug":"CG-Prj1-Beginning","published":1,"date":"2020-01-19T08:28:10.728Z","updated":"2019-08-18T04:37:35.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers04v0000r0ak0t0s2iu4","content":"<h2 id=\"1．实验目的：\"><a href=\"#1．实验目的：\" class=\"headerlink\" title=\"1．实验目的：\"></a>1．实验目的：</h2><ul>\n<li>熟悉编程环境；了解光栅图形显示器的特点；</li>\n<li>了解计算机绘图的特点；</li>\n<li>利用VC+OpenGL作为开发平台设计程序，以能够在屏幕上生成任意一个像素点为本实验的结束。</li>\n</ul>\n<h2 id=\"2．实验内容：\"><a href=\"#2．实验内容：\" class=\"headerlink\" title=\"2．实验内容：\"></a>2．实验内容：</h2><p>（0） 实验预备知识；Windows下的OpenGL编程步骤简单介绍详见课程实验教学博客－实验0 安装GLUT包与创建工程（40分钟）：</p>\n<p><a href=\"https://blog.csdn.net/wpxu08/article/details/70208353\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wpxu08/article/details/70208353</a></p>\n<p>（1） 了解和使用VC的开发环境，理解简单的OpenGL程序结构（20分钟）；</p>\n<p>（2） 掌握OpenGL提供的基本图形函数，尤其是生成点的函数（20分钟）；</p>\n<p>（3） 撰写实验报告，增加程序代码合并到一个word文档，将其命名为“序号-姓名-Prj1.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交（20分钟）。</p>\n<h2 id=\"3．实验原理：\"><a href=\"#3．实验原理：\" class=\"headerlink\" title=\"3．实验原理：\"></a>3．实验原理：</h2><p>1）基本语法</p>\n<p>常用的程序设计语言，如C、C++、Pascal、Fortran和Java等，都支持OpenGL的开发。这里只讨论C版本下OpenGL的语法。</p>\n<p>OpenGL基本函数均使用gl作为函数名的前缀，如glClearColor()；实用函数则使用glu作为函数名的前缀，如gluSphere()。OpenGL基本常量的名字以GL_开头，如GL_LINE_LOOP；实用常量的名字以GLU_开头，如GLU_FILL。一些函数如glColor*()（定义颜色值），函数名后可以接不同的后缀以支持不同的数据类型和格式。如glColor3b(…)、glColor3d(…)、glColor3f(…)和glColor3bv(…)等，这几个函数在功能上是相似的，只是适用于不同的数据类型和格式，其中3表示该函数带有三个参数，b、d、f分别表示参数的类型是字节型、双精度浮点型和单精度浮点型，v则表示这些参数是以向量形式出现的。</p>\n<p>为便于移植，OpenGL定义了一些自己的数据类型，如GLfloat,GLvoid。它们其实就是C中的float和void。在gl.h文件中可以看到以下定义：</p>\n<p>……</p>\n<p>typedef float GLfloat;</p>\n<p>typedef void GLvoid;</p>\n<p>……</p>\n<p>一些基本的数据类型都有类似的定义项。</p>\n<p>（2）程序的基本结构</p>\n<p>OpenGL程序的基本结构可分为三个部分：</p>\n<p>第一部分是初始化部分。主要是设置一些OpenGL的状态开关，如颜色模式(RGBA或Alpha)的选择，是否作光照处理(若有的话，还需设置光源的特性)，深度检测，裁剪等等。这些状态一般都用函数glEnable(…), glDisable(…)来设置，…表示特定的状态。</p>\n<p>第二部分设置观察坐标系下的取景模式和取景框位置大小。主要利用了三个函数：</p>\n<p>函数void glViewport(left,top,right,bottom)：设置在屏幕上的窗口大小，四个参数描述屏幕窗口四个角上的坐标（以像素表示）；</p>\n<p>函数void glOrtho(left,right,bottom,top,near,far)：设置投影方式为正交投影（平行投影），其取景体积是一个各面均为矩形的六面体;</p>\n<p>函数void gluPerspective(fovy,aspect,zNear,zFar)：设置投影方式为透视投影，其取景体积是一个截头锥体。</p>\n<p>第三部分是OpenGL的主要部分，使用OpenGL的库函数构造几何物体对象的数学描述，包括点线面的位置和拓扑关系、几何变换、光照处理等等。</p>\n<p>以上三个部分是OpenGL程序的基本框架，即使移植到使用MFC的Windows程序中，也是如此。只是由于Windows自身有一套显示方式，需要进行一些必要的改动以协调这两种不同显示方式。</p>\n<p>（3）状态机制</p>\n<p>OpenGL的工作方式是一种状态机制，它可以进行各种状态或模式设置，这些状态或模式在重新改变它们之前一直有效。例如，当前颜色就是一个状态变量，在这个状态改变之前，绘制的每个像素都将使用该颜色，直到当前颜色被设置为其它颜色为止。OpenGL中大量地使用了这种状态机制，如颜色模式、投影模式、单双显示缓存区的设置、背景色的设置、光源的位置和特性等等。许多状态变量可以通过glEnable()、glDisable()这两个函数来设置成有效或无效状态，如是否设置光照、是否进行深度检测等；在被设置成有效状态之后，绝大部分状态变量都有一个缺省值。通常情况下，可以用下列四个函数来获取某个状态变量的值：glGetBooleanv()、glGetDouble()、glGetFloatv()和glGetIntegerv()。究竟选择哪个函数应该根据所要获得的返回值的数据类型来决定。还有些状态变量有特殊的查询函数，如glGetLight*()、glGetError()和glPolygonStipple()等。另外，使用glPushAttrib()和glPopAttrib()函数，可以存储和恢复最近的状态变量的值。只要有可能，都应该使用这些函数，因为它们比其它查询函数的效率更高。</p>\n<p>4．实验代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt; //需要正确安装GLUT，安装方法如预备知识中所述</span><br><span class=\"line\"></span><br><span class=\"line\">void myDisplay(void)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">glClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\">glClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">glColor3f (1.0f, 1.0f, 1.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">glRectf(-0.5f, -0.5f, 0.5f, 0.5f);</span><br><span class=\"line\"></span><br><span class=\"line\">glBegin (GL_TRIANGLES);</span><br><span class=\"line\"></span><br><span class=\"line\">glColor3f (1.0f, 0.0f, 0.0f); glVertex2f (0.0f, 1.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">glColor3f (0.0f, 1.0f, 0.0f); glVertex2f (0.8f, -0.5f);</span><br><span class=\"line\"></span><br><span class=\"line\">glColor3f (0.0f, 0.0f, 1.0f); glVertex2f (-0.8f, -0.5f);</span><br><span class=\"line\"></span><br><span class=\"line\">glEnd ();</span><br><span class=\"line\"></span><br><span class=\"line\">glPointSize(3);</span><br><span class=\"line\"></span><br><span class=\"line\">glBegin (GL_POINTS);</span><br><span class=\"line\"></span><br><span class=\"line\">glColor3f (1.0f, 0.0f, 0.0f); glVertex2f (-0.4f, -0.4f);</span><br><span class=\"line\"></span><br><span class=\"line\">glColor3f (0.0f, 1.0f, 0.0f); glVertex2f (0.0f, 0.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">glColor3f (0.0f, 0.0f, 1.0f); glVertex2f (0.4f, 0.4f);</span><br><span class=\"line\"></span><br><span class=\"line\">glEnd ();</span><br><span class=\"line\"></span><br><span class=\"line\">glFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glutInit(&amp;argc, argv);</span><br><span class=\"line\">    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</span><br><span class=\"line\">    glutInitWindowPosition(100, 100);</span><br><span class=\"line\">    glutInitWindowSize(400, 400);</span><br><span class=\"line\">    glutCreateWindow(&quot;Hello World!&quot;);</span><br><span class=\"line\">    glutDisplayFunc(&amp;myDisplay);</span><br><span class=\"line\">    glutMainLoop();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>程序说明：<br>该程序的作用是在一个黑色的窗口中央画一个矩形、三角形和三个点，如图A.1(a)所示。下面对各行语句进行说明：</p>\n<p>首先，需要包含头文件#include &lt;GL/glut.h&gt;，这是GLUT的头文件。本来OpenGL程序一般还要包含&lt;GL/gl.h&gt;和&lt;GL/glu.h&gt;，但GLUT的头文件中已经自动将这两个文件包含了，不必再次包含；</p>\n<p>然后看main函数。int main(int argc, char *argv[])，这个是带命令行参数的main函数。注意main函数中的各语句，除了最后的return之外，其余全部以glut开头。这种以glut开头的函数都是GLUT工具包所提供的函数，下面对用到的几个函数进行介绍；</p>\n<p>1）glutInit，对GLUT进行初始化，这个函数必须在其它的GLUT使用之前调用一次。其格式比较固定，一般都是glutInit(&amp;argc, argv)就行；</p>\n<p>2) glutInitDisplayMode，设置显示方式，其中GLUT_RGB表示使用RGB颜色，与之对应的还有GLUT_INDEX（表示使用索引颜色）。GLUT_SINGLE表示使用单缓冲，与之对应的还有GLUT_DOUBLE（使用双缓冲）。更多信息，以后的实验教程会有讲解介绍；</p>\n<p>3) glutInitWindowPosition，设置窗口在屏幕中的位置；</p>\n<p>4) glutInitWindowSize，设置窗口的大小；</p>\n<p>5) glutCreateWindow，根据前述设置的信息创建窗口。参数将被作为窗口的标题。注意：窗口被创建后，并不立即显示到屏幕上。需要调用glutMainLoop才能看到窗口；</p>\n<p>6) glutDisplayFunc，设置一个函数，当需要进行画图时，这个函数就会被调用。（暂且这样理解）；</p>\n<p>7) glutMainLoop，进行一个消息循环。（现在只需知道这个函数可以显示窗口，并且等待窗口关闭后才会返回。）</p>\n<p>在glutDisplayFunc函数中，我们设置了“当需要画图时，请调用myDisplay函数”。于是myDisplay函数就用来画图。观察myDisplay中的三个函数调用，发现它们都以gl开头。这种以gl开头的函数都是OpenGL的标准函数，下面对用到的函数进行介绍：</p>\n<p>1) glClearColor(0.0, 0.0, 0.0, 0.0) ：将清空颜色设为黑色（为什么会有四个参数？）；</p>\n<p>2) glClear(GL_COLOR_BUFFER_BIT)：将窗口的背景设置为当前清空颜色；</p>\n<p>3) glRectf，画一个矩形。四个参数分别表示了位于对角线上的两个点的横、纵坐标；</p>\n<p>4) glFlush，保证前面的OpenGL命令立即执行（而不是让它们在缓冲区中等待）。</p>\n<h2 id=\"5．实验思考\"><a href=\"#5．实验思考\" class=\"headerlink\" title=\"5．实验思考\"></a>5．实验思考</h2><p>根据示范程序，能否在原有结果基础上添加三条直线组成三角形（如图A.1所示）？<br><img src=\"http://images.cnitblog.com/blog/26309/201406/151113465926805.jpg\" alt=\"图A.1 加三角形\"></p>\n<center>图A.1 加三角形后的效果</center>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1．实验目的：\"><a href=\"#1．实验目的：\" class=\"headerlink\" title=\"1．实验目的：\"></a>1．实验目的：</h2><ul>\n<li>熟悉编程环境；了解光栅图形显示器的特点；</li>\n<li>了解计算机绘图的特点；</li>\n<li>利用VC+OpenGL作为开发平台设计程序，以能够在屏幕上生成任意一个像素点为本实验的结束。</li>\n</ul>\n<h2 id=\"2．实验内容：\"><a href=\"#2．实验内容：\" class=\"headerlink\" title=\"2．实验内容：\"></a>2．实验内容：</h2><p>（0） 实验预备知识；Windows下的OpenGL编程步骤简单介绍详见课程实验教学博客－实验0 安装GLUT包与创建工程（40分钟）：</p>\n<p><a href=\"https://blog.csdn.net/wpxu08/article/details/70208353\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wpxu08/article/details/70208353</a></p>\n<p>（1） 了解和使用VC的开发环境，理解简单的OpenGL程序结构（20分钟）；</p>\n<p>（2） 掌握OpenGL提供的基本图形函数，尤其是生成点的函数（20分钟）；</p>\n<p>（3） 撰写实验报告，增加程序代码合并到一个word文档，将其命名为“序号-姓名-Prj1.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交（20分钟）。</p>\n<h2 id=\"3．实验原理：\"><a href=\"#3．实验原理：\" class=\"headerlink\" title=\"3．实验原理：\"></a>3．实验原理：</h2><p>1）基本语法</p>\n<p>常用的程序设计语言，如C、C++、Pascal、Fortran和Java等，都支持OpenGL的开发。这里只讨论C版本下OpenGL的语法。</p>\n<p>OpenGL基本函数均使用gl作为函数名的前缀，如glClearColor()；实用函数则使用glu作为函数名的前缀，如gluSphere()。OpenGL基本常量的名字以GL_开头，如GL_LINE_LOOP；实用常量的名字以GLU_开头，如GLU_FILL。一些函数如glColor*()（定义颜色值），函数名后可以接不同的后缀以支持不同的数据类型和格式。如glColor3b(…)、glColor3d(…)、glColor3f(…)和glColor3bv(…)等，这几个函数在功能上是相似的，只是适用于不同的数据类型和格式，其中3表示该函数带有三个参数，b、d、f分别表示参数的类型是字节型、双精度浮点型和单精度浮点型，v则表示这些参数是以向量形式出现的。</p>\n<p>为便于移植，OpenGL定义了一些自己的数据类型，如GLfloat,GLvoid。它们其实就是C中的float和void。在gl.h文件中可以看到以下定义：</p>\n<p>……</p>\n<p>typedef float GLfloat;</p>\n<p>typedef void GLvoid;</p>\n<p>……</p>\n<p>一些基本的数据类型都有类似的定义项。</p>\n<p>（2）程序的基本结构</p>\n<p>OpenGL程序的基本结构可分为三个部分：</p>\n<p>第一部分是初始化部分。主要是设置一些OpenGL的状态开关，如颜色模式(RGBA或Alpha)的选择，是否作光照处理(若有的话，还需设置光源的特性)，深度检测，裁剪等等。这些状态一般都用函数glEnable(…), glDisable(…)来设置，…表示特定的状态。</p>\n<p>第二部分设置观察坐标系下的取景模式和取景框位置大小。主要利用了三个函数：</p>\n<p>函数void glViewport(left,top,right,bottom)：设置在屏幕上的窗口大小，四个参数描述屏幕窗口四个角上的坐标（以像素表示）；</p>\n<p>函数void glOrtho(left,right,bottom,top,near,far)：设置投影方式为正交投影（平行投影），其取景体积是一个各面均为矩形的六面体;</p>\n<p>函数void gluPerspective(fovy,aspect,zNear,zFar)：设置投影方式为透视投影，其取景体积是一个截头锥体。</p>\n<p>第三部分是OpenGL的主要部分，使用OpenGL的库函数构造几何物体对象的数学描述，包括点线面的位置和拓扑关系、几何变换、光照处理等等。</p>\n<p>以上三个部分是OpenGL程序的基本框架，即使移植到使用MFC的Windows程序中，也是如此。只是由于Windows自身有一套显示方式，需要进行一些必要的改动以协调这两种不同显示方式。</p>\n<p>（3）状态机制</p>\n<p>OpenGL的工作方式是一种状态机制，它可以进行各种状态或模式设置，这些状态或模式在重新改变它们之前一直有效。例如，当前颜色就是一个状态变量，在这个状态改变之前，绘制的每个像素都将使用该颜色，直到当前颜色被设置为其它颜色为止。OpenGL中大量地使用了这种状态机制，如颜色模式、投影模式、单双显示缓存区的设置、背景色的设置、光源的位置和特性等等。许多状态变量可以通过glEnable()、glDisable()这两个函数来设置成有效或无效状态，如是否设置光照、是否进行深度检测等；在被设置成有效状态之后，绝大部分状态变量都有一个缺省值。通常情况下，可以用下列四个函数来获取某个状态变量的值：glGetBooleanv()、glGetDouble()、glGetFloatv()和glGetIntegerv()。究竟选择哪个函数应该根据所要获得的返回值的数据类型来决定。还有些状态变量有特殊的查询函数，如glGetLight*()、glGetError()和glPolygonStipple()等。另外，使用glPushAttrib()和glPopAttrib()函数，可以存储和恢复最近的状态变量的值。只要有可能，都应该使用这些函数，因为它们比其它查询函数的效率更高。</p>\n<p>4．实验代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt; //需要正确安装GLUT，安装方法如预备知识中所述</span><br><span class=\"line\"></span><br><span class=\"line\">void myDisplay(void)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">glClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\">glClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">glColor3f (1.0f, 1.0f, 1.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">glRectf(-0.5f, -0.5f, 0.5f, 0.5f);</span><br><span class=\"line\"></span><br><span class=\"line\">glBegin (GL_TRIANGLES);</span><br><span class=\"line\"></span><br><span class=\"line\">glColor3f (1.0f, 0.0f, 0.0f); glVertex2f (0.0f, 1.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">glColor3f (0.0f, 1.0f, 0.0f); glVertex2f (0.8f, -0.5f);</span><br><span class=\"line\"></span><br><span class=\"line\">glColor3f (0.0f, 0.0f, 1.0f); glVertex2f (-0.8f, -0.5f);</span><br><span class=\"line\"></span><br><span class=\"line\">glEnd ();</span><br><span class=\"line\"></span><br><span class=\"line\">glPointSize(3);</span><br><span class=\"line\"></span><br><span class=\"line\">glBegin (GL_POINTS);</span><br><span class=\"line\"></span><br><span class=\"line\">glColor3f (1.0f, 0.0f, 0.0f); glVertex2f (-0.4f, -0.4f);</span><br><span class=\"line\"></span><br><span class=\"line\">glColor3f (0.0f, 1.0f, 0.0f); glVertex2f (0.0f, 0.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">glColor3f (0.0f, 0.0f, 1.0f); glVertex2f (0.4f, 0.4f);</span><br><span class=\"line\"></span><br><span class=\"line\">glEnd ();</span><br><span class=\"line\"></span><br><span class=\"line\">glFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glutInit(&amp;argc, argv);</span><br><span class=\"line\">    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</span><br><span class=\"line\">    glutInitWindowPosition(100, 100);</span><br><span class=\"line\">    glutInitWindowSize(400, 400);</span><br><span class=\"line\">    glutCreateWindow(&quot;Hello World!&quot;);</span><br><span class=\"line\">    glutDisplayFunc(&amp;myDisplay);</span><br><span class=\"line\">    glutMainLoop();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>程序说明：<br>该程序的作用是在一个黑色的窗口中央画一个矩形、三角形和三个点，如图A.1(a)所示。下面对各行语句进行说明：</p>\n<p>首先，需要包含头文件#include &lt;GL/glut.h&gt;，这是GLUT的头文件。本来OpenGL程序一般还要包含&lt;GL/gl.h&gt;和&lt;GL/glu.h&gt;，但GLUT的头文件中已经自动将这两个文件包含了，不必再次包含；</p>\n<p>然后看main函数。int main(int argc, char *argv[])，这个是带命令行参数的main函数。注意main函数中的各语句，除了最后的return之外，其余全部以glut开头。这种以glut开头的函数都是GLUT工具包所提供的函数，下面对用到的几个函数进行介绍；</p>\n<p>1）glutInit，对GLUT进行初始化，这个函数必须在其它的GLUT使用之前调用一次。其格式比较固定，一般都是glutInit(&amp;argc, argv)就行；</p>\n<p>2) glutInitDisplayMode，设置显示方式，其中GLUT_RGB表示使用RGB颜色，与之对应的还有GLUT_INDEX（表示使用索引颜色）。GLUT_SINGLE表示使用单缓冲，与之对应的还有GLUT_DOUBLE（使用双缓冲）。更多信息，以后的实验教程会有讲解介绍；</p>\n<p>3) glutInitWindowPosition，设置窗口在屏幕中的位置；</p>\n<p>4) glutInitWindowSize，设置窗口的大小；</p>\n<p>5) glutCreateWindow，根据前述设置的信息创建窗口。参数将被作为窗口的标题。注意：窗口被创建后，并不立即显示到屏幕上。需要调用glutMainLoop才能看到窗口；</p>\n<p>6) glutDisplayFunc，设置一个函数，当需要进行画图时，这个函数就会被调用。（暂且这样理解）；</p>\n<p>7) glutMainLoop，进行一个消息循环。（现在只需知道这个函数可以显示窗口，并且等待窗口关闭后才会返回。）</p>\n<p>在glutDisplayFunc函数中，我们设置了“当需要画图时，请调用myDisplay函数”。于是myDisplay函数就用来画图。观察myDisplay中的三个函数调用，发现它们都以gl开头。这种以gl开头的函数都是OpenGL的标准函数，下面对用到的函数进行介绍：</p>\n<p>1) glClearColor(0.0, 0.0, 0.0, 0.0) ：将清空颜色设为黑色（为什么会有四个参数？）；</p>\n<p>2) glClear(GL_COLOR_BUFFER_BIT)：将窗口的背景设置为当前清空颜色；</p>\n<p>3) glRectf，画一个矩形。四个参数分别表示了位于对角线上的两个点的横、纵坐标；</p>\n<p>4) glFlush，保证前面的OpenGL命令立即执行（而不是让它们在缓冲区中等待）。</p>\n<h2 id=\"5．实验思考\"><a href=\"#5．实验思考\" class=\"headerlink\" title=\"5．实验思考\"></a>5．实验思考</h2><p>根据示范程序，能否在原有结果基础上添加三条直线组成三角形（如图A.1所示）？<br><img src=\"http://images.cnitblog.com/blog/26309/201406/151113465926805.jpg\" alt=\"图A.1 加三角形\"></p>\n<center>图A.1 加三角形后的效果</center>"},{"title":"实验2 基本图元光栅化","_content":"## 1．实验目的：\n\n- 理解基本图形元素光栅化的基本原理；\n- 掌握基本图形元素光栅化方法，如中点方法，Bresenham方法；\n- 利用OpenGL实现基本图形元素的光栅化算法。\n\n## 2．实验内容：\n\n（1） 阅读学习所给的直线光栅化的DDA算法示范代码，将其彻底弄懂，根据实验思考题找出其中的错误；同时能在计算机上编译运行，输出正确结果，指出错误并截图保存为图1至word实验文档（30分钟）；\n\n（2） 在示范程序的基础上，根据程序所留接口，增加中点线算法，并给出若干条测试直线实例，，截图保存为图2至word实验文档（30分钟）；\n\n（3） 为示范程序增加中点圆绘制算法，同时增加键盘按键控制（数字按键3），并给出若干个测试圆的实例，截图保存为图3至word实验文档（30分钟）；\n\n（4） 整理图1-3，并增加程序代码合并到一个word文档，将其命名为“序号-姓名-Prj2.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。\n\n## 3．实验原理：\n\n示范代码原理参见教材直线光栅化一节中的DDA算法。下面介绍下OpenGL画线的一些基础知识和glutReshapeFunc()函数。\n\n（1）数学上的直线没有宽度，但OpenGL的直线则是有宽度的。同时，OpenGL的直线必须是有限长度，而不是像数学概念那样是无限的。可以认为，OpenGL的“直线”概念与数学上的“线段”接近，它可以由两个端点来确定。这里的线由一系列顶点顺次连结而成，有闭合和不闭合两种。\n\n前面的实验已经知道如何绘“点”，那么OpenGL是如何知道拿这些顶点来做什么呢？是一个一个的画出来，还是连成线？或者构成一个多边形？或是做其它事情呢？为了解决这一问题，OpenGL要求：指定顶点的命令必须包含在glBegin函数之后，glEnd函数之前（否则指定的顶点将被忽略），并由glBegin来指明如何使用这些点。\n\n例如：\n```\nglBegin(GL_POINTS);\n\n    glVertex2f(0.0f, 0.0f);\n\n    glVertex2f(0.5f, 0.0f);\n\nglEnd();\n```\n则这两个点将分别被画出来。如果将GL_POINTS替换成GL_LINES，则两个点将被认为是直线的两个端点，OpenGL将会画出一条直线。还可以指定更多的顶点，然后画出更复杂的图形。另一方面，glBegin支持的方式除了GL_POINTS和GL_LINES，还有GL_LINE_STRIP，GL_LINE_LOOP，GL_TRIANGLES，GL_TRIANGLE_STRIP，GL_TRIANGLE_FAN等，每种方式的大致效果如图A.2所示：\n\n![图A.2 OpenGL几何图元类型](http://oty0nwcbq.bkt.clouddn.com/%E5%9B%BEA.2%20OpenGL%E5%87%A0%E4%BD%95%E5%9B%BE%E5%85%83.jpg)\n\n图A.2 OpenGL几何图元类型\n\n\n（2）首次打开窗口、移动窗口和改变窗口大小时，窗口系统都将发送一个事件，以通知程序员。如果使用的是GLUT，通知将自动完成，并调用向glutReshapeFunc()注册的函数。该函数必须完成下列工作：\n\n- 重新建立用作新渲染画布的矩形区域；\n\n- 定义绘制物体时使用的坐标系。\n\n如：\n```\nvoid Reshape(int w, int h)\n\n{\n\nglViewport(0, 0, (GLsizei) w, (GLsizei) h);\n\nglMatrixMode(GL_PROJECTION);\n\nglLoadIdentity();\n\ngluOrtho2D(0.0, (GLdouble) w, 0.0, (GLdouble) h);\n\n}\n```\n\n在GLUT内部，将给该函数传递两个参数：窗口被移动或修改大小后的宽度和高度，单位为像素。glViewport()调整像素矩形，用于绘制整个窗口。接下来三个函数调整绘图坐标系，使左下角位置为（0， 0），右上角为（w, h）。\n\n（3） 键盘输入\n\n当你按下一个键后，GLUT提供了两个函数为这个键盘消息注册回调。第一个是glutKeyboardFunc，用来处理普通按键，如字母，数字，和其他可以用ASCII代码表示的键；另一个是glutSpecialFunc，用来处理特殊按键，如$F_i$，方向键，Home，End键等。\n\nglutKeyboardFunc函数原型如下：\nvoid glutKeyboardFunc(void(*func)(unsigned char key,int x,int y));\n参数：\nfunc: 处理普通按键消息的函数的名称。如果传递NULL，则表示GLUT忽略普通按键消息。\n这个作为glutKeyboardFunc函数参数的函数需要有三个形参：第一个表示按下的键的ASCII码，其余两个提供了当键按下时当前的鼠标位置。鼠标位置是相对于当前客户窗口的左上角而言的。\n\nglutSpecialFunc函数请参考https://blog.csdn.net/xie_zi/article/details/1911891。\n\n4．实验代码：\n```\n#include <GL/glut.h>\n\nint flag = 0;\nvoid LineDDA(int x0,int y0,int x1,int y1/*,int color*/)\n{\n\tint  x, dy, dx, y;\n\tfloat m;\n\tdx=x1-x0;\n\tdy=y1-y0;\n\tm=dy/dx;\n\ty=y0;\n\n\tglColor3f (1.0f, 1.0f, 0.0f);   \n\tglPointSize(1);\n\tfor(x=x0;x<=x1; x++)\n\t{\n\t\tglBegin (GL_POINTS);\n\t\tglVertex2i (x, (int)(y+0.5));\n\t\tglEnd ();\n\t\ty+=m;\n\t}\t\t\n}\n\nvoid LineMidPoint(int x0, int y0, int x1, int y1)\n{\n\t//请在这里填写你的代码\n}\n\nvoid myDisplay(void)\n{\n\tglClear(GL_COLOR_BUFFER_BIT);\n\tglColor3f (1.0f, 0.0f, 0.0f); \n\tglRectf(25.0, 25.0, 75.0, 75.0);\n\n\tglPointSize(5);\n\tglBegin (GL_POINTS);\n\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (0.0f, 0.0f);\n\tglEnd ();\n\n\tglBegin (GL_LINES);\n\tglColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (100.0f, 0.0f);\n\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (180.0f, 240.0f);\t\n\tglEnd ();\n\n\tif(flag == 1)\n\t\tLineDDA(0, 0, 200, 300);\n\n\t//if (flag == 2)\n\t\t//LineMidPoint(...);\n\n\tglFlush();\n}\n\nvoid Init()\n{\n\tglClearColor(0.0, 0.0, 0.0, 0.0);\n\tglShadeModel(GL_FLAT);\n}\n\nvoid Reshape(int w, int h)\n{\n\tglViewport(0, 0, (GLsizei) w,  (GLsizei) h);\n\tglMatrixMode(GL_PROJECTION);\n\tglLoadIdentity();\n\tgluOrtho2D(0.0, (GLdouble) w, 0.0, (GLdouble) h);\n}\n\nvoid keyboard(unsigned char key, int x, int y)\n{\n\tswitch (key)\n\t{\n\tcase '1'://DDA Line\n\t\tflag = 1;\n\t\tbreak;\n\tcase '2': // MidPoint Line\n\t\t//请在这里填写你的代码\n\t\t\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\tglutPostRedisplay();//重画\n}\n\nint main(int argc, char *argv[])\n{\n\tglutInit(&argc, argv);\n\tglutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);\n\tglutInitWindowPosition(100, 100);\n\tglutInitWindowSize(400, 400);\n\tglutCreateWindow(\"Hello World!\");\n\tInit();\n\tglutDisplayFunc(myDisplay);\n\tglutReshapeFunc(Reshape);\n\tglutKeyboardFunc(keyboard);\n\tglutMainLoop();\n\treturn 0;\n}\n```\n\n注： glShadeModel选择平坦或光滑渐变模式。GL_SMOOTH为缺省值，为光滑渐变模式，GL_FLAT为平坦渐变模式。\n\n## 5．实验思考\n\n示范代码有个小错误，能否指出并改正？请将结果写入实验报告。","source":"_posts/CG-Prj2-Primitive.md","raw":"---\ntitle: 实验2 基本图元光栅化\ntags: [计算机图形学]\ncategories: 计算机图形学\n---\n## 1．实验目的：\n\n- 理解基本图形元素光栅化的基本原理；\n- 掌握基本图形元素光栅化方法，如中点方法，Bresenham方法；\n- 利用OpenGL实现基本图形元素的光栅化算法。\n\n## 2．实验内容：\n\n（1） 阅读学习所给的直线光栅化的DDA算法示范代码，将其彻底弄懂，根据实验思考题找出其中的错误；同时能在计算机上编译运行，输出正确结果，指出错误并截图保存为图1至word实验文档（30分钟）；\n\n（2） 在示范程序的基础上，根据程序所留接口，增加中点线算法，并给出若干条测试直线实例，，截图保存为图2至word实验文档（30分钟）；\n\n（3） 为示范程序增加中点圆绘制算法，同时增加键盘按键控制（数字按键3），并给出若干个测试圆的实例，截图保存为图3至word实验文档（30分钟）；\n\n（4） 整理图1-3，并增加程序代码合并到一个word文档，将其命名为“序号-姓名-Prj2.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。\n\n## 3．实验原理：\n\n示范代码原理参见教材直线光栅化一节中的DDA算法。下面介绍下OpenGL画线的一些基础知识和glutReshapeFunc()函数。\n\n（1）数学上的直线没有宽度，但OpenGL的直线则是有宽度的。同时，OpenGL的直线必须是有限长度，而不是像数学概念那样是无限的。可以认为，OpenGL的“直线”概念与数学上的“线段”接近，它可以由两个端点来确定。这里的线由一系列顶点顺次连结而成，有闭合和不闭合两种。\n\n前面的实验已经知道如何绘“点”，那么OpenGL是如何知道拿这些顶点来做什么呢？是一个一个的画出来，还是连成线？或者构成一个多边形？或是做其它事情呢？为了解决这一问题，OpenGL要求：指定顶点的命令必须包含在glBegin函数之后，glEnd函数之前（否则指定的顶点将被忽略），并由glBegin来指明如何使用这些点。\n\n例如：\n```\nglBegin(GL_POINTS);\n\n    glVertex2f(0.0f, 0.0f);\n\n    glVertex2f(0.5f, 0.0f);\n\nglEnd();\n```\n则这两个点将分别被画出来。如果将GL_POINTS替换成GL_LINES，则两个点将被认为是直线的两个端点，OpenGL将会画出一条直线。还可以指定更多的顶点，然后画出更复杂的图形。另一方面，glBegin支持的方式除了GL_POINTS和GL_LINES，还有GL_LINE_STRIP，GL_LINE_LOOP，GL_TRIANGLES，GL_TRIANGLE_STRIP，GL_TRIANGLE_FAN等，每种方式的大致效果如图A.2所示：\n\n![图A.2 OpenGL几何图元类型](http://oty0nwcbq.bkt.clouddn.com/%E5%9B%BEA.2%20OpenGL%E5%87%A0%E4%BD%95%E5%9B%BE%E5%85%83.jpg)\n\n图A.2 OpenGL几何图元类型\n\n\n（2）首次打开窗口、移动窗口和改变窗口大小时，窗口系统都将发送一个事件，以通知程序员。如果使用的是GLUT，通知将自动完成，并调用向glutReshapeFunc()注册的函数。该函数必须完成下列工作：\n\n- 重新建立用作新渲染画布的矩形区域；\n\n- 定义绘制物体时使用的坐标系。\n\n如：\n```\nvoid Reshape(int w, int h)\n\n{\n\nglViewport(0, 0, (GLsizei) w, (GLsizei) h);\n\nglMatrixMode(GL_PROJECTION);\n\nglLoadIdentity();\n\ngluOrtho2D(0.0, (GLdouble) w, 0.0, (GLdouble) h);\n\n}\n```\n\n在GLUT内部，将给该函数传递两个参数：窗口被移动或修改大小后的宽度和高度，单位为像素。glViewport()调整像素矩形，用于绘制整个窗口。接下来三个函数调整绘图坐标系，使左下角位置为（0， 0），右上角为（w, h）。\n\n（3） 键盘输入\n\n当你按下一个键后，GLUT提供了两个函数为这个键盘消息注册回调。第一个是glutKeyboardFunc，用来处理普通按键，如字母，数字，和其他可以用ASCII代码表示的键；另一个是glutSpecialFunc，用来处理特殊按键，如$F_i$，方向键，Home，End键等。\n\nglutKeyboardFunc函数原型如下：\nvoid glutKeyboardFunc(void(*func)(unsigned char key,int x,int y));\n参数：\nfunc: 处理普通按键消息的函数的名称。如果传递NULL，则表示GLUT忽略普通按键消息。\n这个作为glutKeyboardFunc函数参数的函数需要有三个形参：第一个表示按下的键的ASCII码，其余两个提供了当键按下时当前的鼠标位置。鼠标位置是相对于当前客户窗口的左上角而言的。\n\nglutSpecialFunc函数请参考https://blog.csdn.net/xie_zi/article/details/1911891。\n\n4．实验代码：\n```\n#include <GL/glut.h>\n\nint flag = 0;\nvoid LineDDA(int x0,int y0,int x1,int y1/*,int color*/)\n{\n\tint  x, dy, dx, y;\n\tfloat m;\n\tdx=x1-x0;\n\tdy=y1-y0;\n\tm=dy/dx;\n\ty=y0;\n\n\tglColor3f (1.0f, 1.0f, 0.0f);   \n\tglPointSize(1);\n\tfor(x=x0;x<=x1; x++)\n\t{\n\t\tglBegin (GL_POINTS);\n\t\tglVertex2i (x, (int)(y+0.5));\n\t\tglEnd ();\n\t\ty+=m;\n\t}\t\t\n}\n\nvoid LineMidPoint(int x0, int y0, int x1, int y1)\n{\n\t//请在这里填写你的代码\n}\n\nvoid myDisplay(void)\n{\n\tglClear(GL_COLOR_BUFFER_BIT);\n\tglColor3f (1.0f, 0.0f, 0.0f); \n\tglRectf(25.0, 25.0, 75.0, 75.0);\n\n\tglPointSize(5);\n\tglBegin (GL_POINTS);\n\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (0.0f, 0.0f);\n\tglEnd ();\n\n\tglBegin (GL_LINES);\n\tglColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (100.0f, 0.0f);\n\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (180.0f, 240.0f);\t\n\tglEnd ();\n\n\tif(flag == 1)\n\t\tLineDDA(0, 0, 200, 300);\n\n\t//if (flag == 2)\n\t\t//LineMidPoint(...);\n\n\tglFlush();\n}\n\nvoid Init()\n{\n\tglClearColor(0.0, 0.0, 0.0, 0.0);\n\tglShadeModel(GL_FLAT);\n}\n\nvoid Reshape(int w, int h)\n{\n\tglViewport(0, 0, (GLsizei) w,  (GLsizei) h);\n\tglMatrixMode(GL_PROJECTION);\n\tglLoadIdentity();\n\tgluOrtho2D(0.0, (GLdouble) w, 0.0, (GLdouble) h);\n}\n\nvoid keyboard(unsigned char key, int x, int y)\n{\n\tswitch (key)\n\t{\n\tcase '1'://DDA Line\n\t\tflag = 1;\n\t\tbreak;\n\tcase '2': // MidPoint Line\n\t\t//请在这里填写你的代码\n\t\t\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\tglutPostRedisplay();//重画\n}\n\nint main(int argc, char *argv[])\n{\n\tglutInit(&argc, argv);\n\tglutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);\n\tglutInitWindowPosition(100, 100);\n\tglutInitWindowSize(400, 400);\n\tglutCreateWindow(\"Hello World!\");\n\tInit();\n\tglutDisplayFunc(myDisplay);\n\tglutReshapeFunc(Reshape);\n\tglutKeyboardFunc(keyboard);\n\tglutMainLoop();\n\treturn 0;\n}\n```\n\n注： glShadeModel选择平坦或光滑渐变模式。GL_SMOOTH为缺省值，为光滑渐变模式，GL_FLAT为平坦渐变模式。\n\n## 5．实验思考\n\n示范代码有个小错误，能否指出并改正？请将结果写入实验报告。","slug":"CG-Prj2-Primitive","published":1,"date":"2020-01-19T08:28:10.732Z","updated":"2019-08-18T02:04:22.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers0500001r0akywfo14h5","content":"<h2 id=\"1．实验目的：\"><a href=\"#1．实验目的：\" class=\"headerlink\" title=\"1．实验目的：\"></a>1．实验目的：</h2><ul>\n<li>理解基本图形元素光栅化的基本原理；</li>\n<li>掌握基本图形元素光栅化方法，如中点方法，Bresenham方法；</li>\n<li>利用OpenGL实现基本图形元素的光栅化算法。</li>\n</ul>\n<h2 id=\"2．实验内容：\"><a href=\"#2．实验内容：\" class=\"headerlink\" title=\"2．实验内容：\"></a>2．实验内容：</h2><p>（1） 阅读学习所给的直线光栅化的DDA算法示范代码，将其彻底弄懂，根据实验思考题找出其中的错误；同时能在计算机上编译运行，输出正确结果，指出错误并截图保存为图1至word实验文档（30分钟）；</p>\n<p>（2） 在示范程序的基础上，根据程序所留接口，增加中点线算法，并给出若干条测试直线实例，，截图保存为图2至word实验文档（30分钟）；</p>\n<p>（3） 为示范程序增加中点圆绘制算法，同时增加键盘按键控制（数字按键3），并给出若干个测试圆的实例，截图保存为图3至word实验文档（30分钟）；</p>\n<p>（4） 整理图1-3，并增加程序代码合并到一个word文档，将其命名为“序号-姓名-Prj2.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。</p>\n<h2 id=\"3．实验原理：\"><a href=\"#3．实验原理：\" class=\"headerlink\" title=\"3．实验原理：\"></a>3．实验原理：</h2><p>示范代码原理参见教材直线光栅化一节中的DDA算法。下面介绍下OpenGL画线的一些基础知识和glutReshapeFunc()函数。</p>\n<p>（1）数学上的直线没有宽度，但OpenGL的直线则是有宽度的。同时，OpenGL的直线必须是有限长度，而不是像数学概念那样是无限的。可以认为，OpenGL的“直线”概念与数学上的“线段”接近，它可以由两个端点来确定。这里的线由一系列顶点顺次连结而成，有闭合和不闭合两种。</p>\n<p>前面的实验已经知道如何绘“点”，那么OpenGL是如何知道拿这些顶点来做什么呢？是一个一个的画出来，还是连成线？或者构成一个多边形？或是做其它事情呢？为了解决这一问题，OpenGL要求：指定顶点的命令必须包含在glBegin函数之后，glEnd函数之前（否则指定的顶点将被忽略），并由glBegin来指明如何使用这些点。</p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glBegin(GL_POINTS);</span><br><span class=\"line\"></span><br><span class=\"line\">    glVertex2f(0.0f, 0.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">    glVertex2f(0.5f, 0.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">glEnd();</span><br></pre></td></tr></table></figure></p>\n<p>则这两个点将分别被画出来。如果将GL_POINTS替换成GL_LINES，则两个点将被认为是直线的两个端点，OpenGL将会画出一条直线。还可以指定更多的顶点，然后画出更复杂的图形。另一方面，glBegin支持的方式除了GL_POINTS和GL_LINES，还有GL_LINE_STRIP，GL_LINE_LOOP，GL_TRIANGLES，GL_TRIANGLE_STRIP，GL_TRIANGLE_FAN等，每种方式的大致效果如图A.2所示：</p>\n<p><img src=\"http://oty0nwcbq.bkt.clouddn.com/%E5%9B%BEA.2%20OpenGL%E5%87%A0%E4%BD%95%E5%9B%BE%E5%85%83.jpg\" alt=\"图A.2 OpenGL几何图元类型\"></p>\n<p>图A.2 OpenGL几何图元类型</p>\n<p>（2）首次打开窗口、移动窗口和改变窗口大小时，窗口系统都将发送一个事件，以通知程序员。如果使用的是GLUT，通知将自动完成，并调用向glutReshapeFunc()注册的函数。该函数必须完成下列工作：</p>\n<ul>\n<li><p>重新建立用作新渲染画布的矩形区域；</p>\n</li>\n<li><p>定义绘制物体时使用的坐标系。</p>\n</li>\n</ul>\n<p>如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void Reshape(int w, int h)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">glViewport(0, 0, (GLsizei) w, (GLsizei) h);</span><br><span class=\"line\"></span><br><span class=\"line\">glMatrixMode(GL_PROJECTION);</span><br><span class=\"line\"></span><br><span class=\"line\">glLoadIdentity();</span><br><span class=\"line\"></span><br><span class=\"line\">gluOrtho2D(0.0, (GLdouble) w, 0.0, (GLdouble) h);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在GLUT内部，将给该函数传递两个参数：窗口被移动或修改大小后的宽度和高度，单位为像素。glViewport()调整像素矩形，用于绘制整个窗口。接下来三个函数调整绘图坐标系，使左下角位置为（0， 0），右上角为（w, h）。</p>\n<p>（3） 键盘输入</p>\n<p>当你按下一个键后，GLUT提供了两个函数为这个键盘消息注册回调。第一个是glutKeyboardFunc，用来处理普通按键，如字母，数字，和其他可以用ASCII代码表示的键；另一个是glutSpecialFunc，用来处理特殊按键，如$F_i$，方向键，Home，End键等。</p>\n<p>glutKeyboardFunc函数原型如下：<br>void glutKeyboardFunc(void(*func)(unsigned char key,int x,int y));<br>参数：<br>func: 处理普通按键消息的函数的名称。如果传递NULL，则表示GLUT忽略普通按键消息。<br>这个作为glutKeyboardFunc函数参数的函数需要有三个形参：第一个表示按下的键的ASCII码，其余两个提供了当键按下时当前的鼠标位置。鼠标位置是相对于当前客户窗口的左上角而言的。</p>\n<p>glutSpecialFunc函数请参考<a href=\"https://blog.csdn.net/xie_zi/article/details/1911891。\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xie_zi/article/details/1911891。</a></p>\n<p>4．实验代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int flag = 0;</span><br><span class=\"line\">void LineDDA(int x0,int y0,int x1,int y1/*,int color*/)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint  x, dy, dx, y;</span><br><span class=\"line\">\tfloat m;</span><br><span class=\"line\">\tdx=x1-x0;</span><br><span class=\"line\">\tdy=y1-y0;</span><br><span class=\"line\">\tm=dy/dx;</span><br><span class=\"line\">\ty=y0;</span><br><span class=\"line\"></span><br><span class=\"line\">\tglColor3f (1.0f, 1.0f, 0.0f);   </span><br><span class=\"line\">\tglPointSize(1);</span><br><span class=\"line\">\tfor(x=x0;x&lt;=x1; x++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tglBegin (GL_POINTS);</span><br><span class=\"line\">\t\tglVertex2i (x, (int)(y+0.5));</span><br><span class=\"line\">\t\tglEnd ();</span><br><span class=\"line\">\t\ty+=m;</span><br><span class=\"line\">\t&#125;\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void LineMidPoint(int x0, int y0, int x1, int y1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//请在这里填写你的代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void myDisplay(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">\tglColor3f (1.0f, 0.0f, 0.0f); </span><br><span class=\"line\">\tglRectf(25.0, 25.0, 75.0, 75.0);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglPointSize(5);</span><br><span class=\"line\">\tglBegin (GL_POINTS);</span><br><span class=\"line\">\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (0.0f, 0.0f);</span><br><span class=\"line\">\tglEnd ();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglBegin (GL_LINES);</span><br><span class=\"line\">\tglColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (100.0f, 0.0f);</span><br><span class=\"line\">\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (180.0f, 240.0f);\t</span><br><span class=\"line\">\tglEnd ();</span><br><span class=\"line\"></span><br><span class=\"line\">\tif(flag == 1)</span><br><span class=\"line\">\t\tLineDDA(0, 0, 200, 300);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//if (flag == 2)</span><br><span class=\"line\">\t\t//LineMidPoint(...);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\">\tglShadeModel(GL_FLAT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Reshape(int w, int h)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglViewport(0, 0, (GLsizei) w,  (GLsizei) h);</span><br><span class=\"line\">\tglMatrixMode(GL_PROJECTION);</span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\">\tgluOrtho2D(0.0, (GLdouble) w, 0.0, (GLdouble) h);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void keyboard(unsigned char key, int x, int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tswitch (key)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tcase &apos;1&apos;://DDA Line</span><br><span class=\"line\">\t\tflag = 1;</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tcase &apos;2&apos;: // MidPoint Line</span><br><span class=\"line\">\t\t//请在这里填写你的代码</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tglutPostRedisplay();//重画</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\">\tglutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</span><br><span class=\"line\">\tglutInitWindowPosition(100, 100);</span><br><span class=\"line\">\tglutInitWindowSize(400, 400);</span><br><span class=\"line\">\tglutCreateWindow(&quot;Hello World!&quot;);</span><br><span class=\"line\">\tInit();</span><br><span class=\"line\">\tglutDisplayFunc(myDisplay);</span><br><span class=\"line\">\tglutReshapeFunc(Reshape);</span><br><span class=\"line\">\tglutKeyboardFunc(keyboard);</span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注： glShadeModel选择平坦或光滑渐变模式。GL_SMOOTH为缺省值，为光滑渐变模式，GL_FLAT为平坦渐变模式。</p>\n<h2 id=\"5．实验思考\"><a href=\"#5．实验思考\" class=\"headerlink\" title=\"5．实验思考\"></a>5．实验思考</h2><p>示范代码有个小错误，能否指出并改正？请将结果写入实验报告。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1．实验目的：\"><a href=\"#1．实验目的：\" class=\"headerlink\" title=\"1．实验目的：\"></a>1．实验目的：</h2><ul>\n<li>理解基本图形元素光栅化的基本原理；</li>\n<li>掌握基本图形元素光栅化方法，如中点方法，Bresenham方法；</li>\n<li>利用OpenGL实现基本图形元素的光栅化算法。</li>\n</ul>\n<h2 id=\"2．实验内容：\"><a href=\"#2．实验内容：\" class=\"headerlink\" title=\"2．实验内容：\"></a>2．实验内容：</h2><p>（1） 阅读学习所给的直线光栅化的DDA算法示范代码，将其彻底弄懂，根据实验思考题找出其中的错误；同时能在计算机上编译运行，输出正确结果，指出错误并截图保存为图1至word实验文档（30分钟）；</p>\n<p>（2） 在示范程序的基础上，根据程序所留接口，增加中点线算法，并给出若干条测试直线实例，，截图保存为图2至word实验文档（30分钟）；</p>\n<p>（3） 为示范程序增加中点圆绘制算法，同时增加键盘按键控制（数字按键3），并给出若干个测试圆的实例，截图保存为图3至word实验文档（30分钟）；</p>\n<p>（4） 整理图1-3，并增加程序代码合并到一个word文档，将其命名为“序号-姓名-Prj2.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。</p>\n<h2 id=\"3．实验原理：\"><a href=\"#3．实验原理：\" class=\"headerlink\" title=\"3．实验原理：\"></a>3．实验原理：</h2><p>示范代码原理参见教材直线光栅化一节中的DDA算法。下面介绍下OpenGL画线的一些基础知识和glutReshapeFunc()函数。</p>\n<p>（1）数学上的直线没有宽度，但OpenGL的直线则是有宽度的。同时，OpenGL的直线必须是有限长度，而不是像数学概念那样是无限的。可以认为，OpenGL的“直线”概念与数学上的“线段”接近，它可以由两个端点来确定。这里的线由一系列顶点顺次连结而成，有闭合和不闭合两种。</p>\n<p>前面的实验已经知道如何绘“点”，那么OpenGL是如何知道拿这些顶点来做什么呢？是一个一个的画出来，还是连成线？或者构成一个多边形？或是做其它事情呢？为了解决这一问题，OpenGL要求：指定顶点的命令必须包含在glBegin函数之后，glEnd函数之前（否则指定的顶点将被忽略），并由glBegin来指明如何使用这些点。</p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glBegin(GL_POINTS);</span><br><span class=\"line\"></span><br><span class=\"line\">    glVertex2f(0.0f, 0.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">    glVertex2f(0.5f, 0.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">glEnd();</span><br></pre></td></tr></table></figure></p>\n<p>则这两个点将分别被画出来。如果将GL_POINTS替换成GL_LINES，则两个点将被认为是直线的两个端点，OpenGL将会画出一条直线。还可以指定更多的顶点，然后画出更复杂的图形。另一方面，glBegin支持的方式除了GL_POINTS和GL_LINES，还有GL_LINE_STRIP，GL_LINE_LOOP，GL_TRIANGLES，GL_TRIANGLE_STRIP，GL_TRIANGLE_FAN等，每种方式的大致效果如图A.2所示：</p>\n<p><img src=\"http://oty0nwcbq.bkt.clouddn.com/%E5%9B%BEA.2%20OpenGL%E5%87%A0%E4%BD%95%E5%9B%BE%E5%85%83.jpg\" alt=\"图A.2 OpenGL几何图元类型\"></p>\n<p>图A.2 OpenGL几何图元类型</p>\n<p>（2）首次打开窗口、移动窗口和改变窗口大小时，窗口系统都将发送一个事件，以通知程序员。如果使用的是GLUT，通知将自动完成，并调用向glutReshapeFunc()注册的函数。该函数必须完成下列工作：</p>\n<ul>\n<li><p>重新建立用作新渲染画布的矩形区域；</p>\n</li>\n<li><p>定义绘制物体时使用的坐标系。</p>\n</li>\n</ul>\n<p>如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void Reshape(int w, int h)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">glViewport(0, 0, (GLsizei) w, (GLsizei) h);</span><br><span class=\"line\"></span><br><span class=\"line\">glMatrixMode(GL_PROJECTION);</span><br><span class=\"line\"></span><br><span class=\"line\">glLoadIdentity();</span><br><span class=\"line\"></span><br><span class=\"line\">gluOrtho2D(0.0, (GLdouble) w, 0.0, (GLdouble) h);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在GLUT内部，将给该函数传递两个参数：窗口被移动或修改大小后的宽度和高度，单位为像素。glViewport()调整像素矩形，用于绘制整个窗口。接下来三个函数调整绘图坐标系，使左下角位置为（0， 0），右上角为（w, h）。</p>\n<p>（3） 键盘输入</p>\n<p>当你按下一个键后，GLUT提供了两个函数为这个键盘消息注册回调。第一个是glutKeyboardFunc，用来处理普通按键，如字母，数字，和其他可以用ASCII代码表示的键；另一个是glutSpecialFunc，用来处理特殊按键，如$F_i$，方向键，Home，End键等。</p>\n<p>glutKeyboardFunc函数原型如下：<br>void glutKeyboardFunc(void(*func)(unsigned char key,int x,int y));<br>参数：<br>func: 处理普通按键消息的函数的名称。如果传递NULL，则表示GLUT忽略普通按键消息。<br>这个作为glutKeyboardFunc函数参数的函数需要有三个形参：第一个表示按下的键的ASCII码，其余两个提供了当键按下时当前的鼠标位置。鼠标位置是相对于当前客户窗口的左上角而言的。</p>\n<p>glutSpecialFunc函数请参考<a href=\"https://blog.csdn.net/xie_zi/article/details/1911891。\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xie_zi/article/details/1911891。</a></p>\n<p>4．实验代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int flag = 0;</span><br><span class=\"line\">void LineDDA(int x0,int y0,int x1,int y1/*,int color*/)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint  x, dy, dx, y;</span><br><span class=\"line\">\tfloat m;</span><br><span class=\"line\">\tdx=x1-x0;</span><br><span class=\"line\">\tdy=y1-y0;</span><br><span class=\"line\">\tm=dy/dx;</span><br><span class=\"line\">\ty=y0;</span><br><span class=\"line\"></span><br><span class=\"line\">\tglColor3f (1.0f, 1.0f, 0.0f);   </span><br><span class=\"line\">\tglPointSize(1);</span><br><span class=\"line\">\tfor(x=x0;x&lt;=x1; x++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tglBegin (GL_POINTS);</span><br><span class=\"line\">\t\tglVertex2i (x, (int)(y+0.5));</span><br><span class=\"line\">\t\tglEnd ();</span><br><span class=\"line\">\t\ty+=m;</span><br><span class=\"line\">\t&#125;\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void LineMidPoint(int x0, int y0, int x1, int y1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//请在这里填写你的代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void myDisplay(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">\tglColor3f (1.0f, 0.0f, 0.0f); </span><br><span class=\"line\">\tglRectf(25.0, 25.0, 75.0, 75.0);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglPointSize(5);</span><br><span class=\"line\">\tglBegin (GL_POINTS);</span><br><span class=\"line\">\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (0.0f, 0.0f);</span><br><span class=\"line\">\tglEnd ();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglBegin (GL_LINES);</span><br><span class=\"line\">\tglColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (100.0f, 0.0f);</span><br><span class=\"line\">\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (180.0f, 240.0f);\t</span><br><span class=\"line\">\tglEnd ();</span><br><span class=\"line\"></span><br><span class=\"line\">\tif(flag == 1)</span><br><span class=\"line\">\t\tLineDDA(0, 0, 200, 300);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//if (flag == 2)</span><br><span class=\"line\">\t\t//LineMidPoint(...);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\">\tglShadeModel(GL_FLAT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Reshape(int w, int h)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglViewport(0, 0, (GLsizei) w,  (GLsizei) h);</span><br><span class=\"line\">\tglMatrixMode(GL_PROJECTION);</span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\">\tgluOrtho2D(0.0, (GLdouble) w, 0.0, (GLdouble) h);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void keyboard(unsigned char key, int x, int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tswitch (key)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tcase &apos;1&apos;://DDA Line</span><br><span class=\"line\">\t\tflag = 1;</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tcase &apos;2&apos;: // MidPoint Line</span><br><span class=\"line\">\t\t//请在这里填写你的代码</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tglutPostRedisplay();//重画</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\">\tglutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</span><br><span class=\"line\">\tglutInitWindowPosition(100, 100);</span><br><span class=\"line\">\tglutInitWindowSize(400, 400);</span><br><span class=\"line\">\tglutCreateWindow(&quot;Hello World!&quot;);</span><br><span class=\"line\">\tInit();</span><br><span class=\"line\">\tglutDisplayFunc(myDisplay);</span><br><span class=\"line\">\tglutReshapeFunc(Reshape);</span><br><span class=\"line\">\tglutKeyboardFunc(keyboard);</span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注： glShadeModel选择平坦或光滑渐变模式。GL_SMOOTH为缺省值，为光滑渐变模式，GL_FLAT为平坦渐变模式。</p>\n<h2 id=\"5．实验思考\"><a href=\"#5．实验思考\" class=\"headerlink\" title=\"5．实验思考\"></a>5．实验思考</h2><p>示范代码有个小错误，能否指出并改正？请将结果写入实验报告。</p>\n"},{"title":"实验3 直线裁剪算法","_content":"## 1．实验目的：\n\n- 理解直线裁剪的基本原理；\n- 验证直线的编码裁剪算法，参考网络资料实现梁友栋-Barsky裁剪算法；\n- 了解与掌握OpenGL鼠标操作。\n\n## 2．实验内容：\n\n本次实验主要结合鼠标画线程序来验证编码裁剪算法和梁友栋-Barsky裁剪算法，具体步骤如下：\n\n（1） 阅读学习所给的编码裁剪示范代码，了解程序使用方法，并结合三种不同类型直线对其进行裁剪测试，将测试结果存为图1-3，保存至word实验文档中（30分钟）；\n\n（2） 为示范代码增加梁友栋-Barsky裁剪算法，并通过键盘按键“L”来控制，即按键盘“L”键时，用梁友栋-Barsky算法裁剪程序窗口内的直线。同样测试三种不同类型的直线，将测试结果存为图4-6，，保存至word实验文档中（60分钟）；\n\n（3） 整理图1-6，并增加程序代码合并到一个word文档，将其命名为“序号-姓名-Prj2.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。\n\n## 3．实验原理：\n\n示范代码中编码裁剪算法原理参见教材裁剪内容，有关鼠标操作知识请参考[OpenGL编程 基础篇（四）与鼠标的交互](https://www.cnblogs.com/starryxsky/p/7184032.html)。\n\n4．实验代码：\n```\n#include <GL/glut.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n#define LEFT_EDGE   1\n#define RIGHT_EDGE  2\n#define BOTTOM_EDGE 4\n#define TOP_EDGE    8\n\nstruct Rectangle\n{\n\tfloat xmin, xmax, ymin, ymax;\n};\n\nRectangle  rect;\nint x0, y0, x1, y1;\nbool bDrawLine = true;\nint width = 640, height = 480;\n\nvoid LineGL(int x0, int  y0, int x1, int y1)\n{\n\tglBegin(GL_LINES);\n\tglColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(x0, y0);\n\tglColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(x1, y1);\n\tglEnd();\n}\n\n//求p点的编码\nint CompCode(int x, int y, Rectangle rect)\n{\n\tint code = 0x00;\n\tif (y < rect.ymin)\n\t\tcode = code | 4;//即为1000\n\tif (y > rect.ymax)\n\t\tcode = code | 8;//即为0100\n\tif (x > rect.xmax)\n\t\tcode = code | 2;\n\tif (x < rect.xmin)\n\t\tcode = code | 1;\n\treturn code;\n}\n\nbool cohensutherlandlineclip(Rectangle  rect, int &x0, int & y0, int &x1, int &y1)\n{\n\tbool accept, done;\n\tfloat x, y;\n\taccept = false;\n\tdone = false;\n\n\tint code0, code1, codeout;\n\tcode0 = CompCode(x0, y0, rect);\n\tcode1 = CompCode(x1, y1, rect);\n\tdo {\n\t\tif (!(code0 | code1))\n\t\t{\n\t\t\taccept = true;\n\t\t\tdone = true;\n\t\t}\n\t\telse if (code0 & code1)\n\t\t\tdone = true;\n\t\telse\n\t\t{\n\t\t\tif (code0 != 0)\n\t\t\t\tcodeout = code0;\n\t\t\telse\n\t\t\t\tcodeout = code1;\n\n\t\t\tif (codeout&LEFT_EDGE) {\n\t\t\t\ty = y0 + (y1 - y0)*(rect.xmin - x0) / (x1 - x0);\n\t\t\t\tx = (float)rect.xmin;\n\t\t\t}\n\t\t\telse if (codeout&RIGHT_EDGE) {\n\t\t\t\ty = y0 + (y1 - y0)*(rect.xmax - x0) / (x1 - x0);\n\t\t\t\tx = (float)rect.xmax;\n\t\t\t}\n\t\t\telse if (codeout&BOTTOM_EDGE) {\n\t\t\t\tx = x0 + (x1 - x0)*(rect.ymin - y0) / (y1 - y0);\n\t\t\t\ty = (float)rect.ymin;\n\t\t\t}\n\t\t\telse if (codeout&TOP_EDGE) {\n\t\t\t\tx = x0 + (x1 - x0)*(rect.ymax - y0) / (y1 - y0);\n\t\t\t\ty = (float)rect.ymax;\n\t\t\t}\n\n\t\t\tif (codeout == code0)\n\t\t\t{\n\t\t\t\tx0 = x; y0 = y;\n\t\t\t\tcode0 = CompCode(x0, y0, rect);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx1 = x; y1 = y;\n\t\t\t\tcode1 = CompCode(x1, y1, rect);\n\t\t\t}\n\t\t}\n\t} while (!done);\n\n\treturn accept;\n}\n\nvoid myDisplay()\n{\n\tglClear(GL_COLOR_BUFFER_BIT);\n\tglColor3f(1.0f, 1.0f, 0.0f);\n\tglRectf(rect.xmin, rect.ymin, rect.xmax, rect.ymax);\n\n\tif (bDrawLine)\n\t\tLineGL(x0, y0, x1, y1);\n\n\tglFlush();\n}\n\nvoid Init()\n{\n\tglClearColor(0.0, 0.0, 0.0, 0.0);\n\tglShadeModel(GL_FLAT);\n\n\trect.xmin = 100; //窗口的大小\n\trect.xmax = 300;\n\trect.ymin = 100;\n\trect.ymax = 300;\n\n\tx0 = 300, y0 = 50, x1 = 0, y1 = 450;//裁剪前的直线端点\n\tprintf(\"Press key 'c' to Clip!\\n\");\n\tprintf(\"Please Click left button of mouse to input the points of Line!!\\n\");\n}\n\nvoid Reshape(int w, int h)\n{\n\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);\n\tglMatrixMode(GL_PROJECTION);\n\tglLoadIdentity();\n\tgluOrtho2D(0.0, (GLdouble)w, 0.0, (GLdouble)h);\n}\n\nvoid keyboard(unsigned char key, int x, int y)\n{\n\tswitch (key)\n\t{\n\tcase 'c':\n\t\tbDrawLine = cohensutherlandlineclip(rect, x0, y0, x1, y1);\n\t\tglutPostRedisplay();//重画\n\t\tbreak;\n\tcase 'x':\n\t\texit(0);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n}\n\nvoid mouse(int button, int state, int x, int y)\n{\n\tswitch (button)\n\t{\n\tcase GLUT_LEFT_BUTTON:\n\t\tif (state == GLUT_DOWN)\n\t\t{\n\t\t\tif(bDrawLine)\n\t\t\t{\n\t\t\t\tx0 = x;\n\t\t\t\ty0 = height - y;\n\t\t\t\tbDrawLine = false;\n\t\t\t\tglutPostRedisplay();//\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx1 = x;\n\t\t\t\ty1 = height - y;\n\t\t\t\tbDrawLine = true;\t\t\t\t\n\t\t\t\tglutPostRedisplay();//\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n}\n\nint main(int argc, char *argv[])\n{\n\tglutInit(&argc, argv);\n\tglutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);\n\tglutInitWindowPosition(100, 100);\n\tglutInitWindowSize(width, height);\n\tglutCreateWindow(\"Hello World!\");\n\n\tInit();\n\tglutDisplayFunc(myDisplay);\n\tglutReshapeFunc(Reshape);\n\tglutKeyboardFunc(keyboard);\n\tglutMouseFunc(mouse);\n\tglutMainLoop();\n\treturn 0;\n}\n```\n## 5．实验思考\n实验示范代码的第162行：\n```\ny0 = height - y;\n```\n请解释这行代码的含义和作用。","source":"_posts/CG-Prj3-Clipping.md","raw":"---\ntitle: 实验3 直线裁剪算法\ntags: [计算机图形学]\ncategories: 计算机图形学\n---\n## 1．实验目的：\n\n- 理解直线裁剪的基本原理；\n- 验证直线的编码裁剪算法，参考网络资料实现梁友栋-Barsky裁剪算法；\n- 了解与掌握OpenGL鼠标操作。\n\n## 2．实验内容：\n\n本次实验主要结合鼠标画线程序来验证编码裁剪算法和梁友栋-Barsky裁剪算法，具体步骤如下：\n\n（1） 阅读学习所给的编码裁剪示范代码，了解程序使用方法，并结合三种不同类型直线对其进行裁剪测试，将测试结果存为图1-3，保存至word实验文档中（30分钟）；\n\n（2） 为示范代码增加梁友栋-Barsky裁剪算法，并通过键盘按键“L”来控制，即按键盘“L”键时，用梁友栋-Barsky算法裁剪程序窗口内的直线。同样测试三种不同类型的直线，将测试结果存为图4-6，，保存至word实验文档中（60分钟）；\n\n（3） 整理图1-6，并增加程序代码合并到一个word文档，将其命名为“序号-姓名-Prj2.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。\n\n## 3．实验原理：\n\n示范代码中编码裁剪算法原理参见教材裁剪内容，有关鼠标操作知识请参考[OpenGL编程 基础篇（四）与鼠标的交互](https://www.cnblogs.com/starryxsky/p/7184032.html)。\n\n4．实验代码：\n```\n#include <GL/glut.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n#define LEFT_EDGE   1\n#define RIGHT_EDGE  2\n#define BOTTOM_EDGE 4\n#define TOP_EDGE    8\n\nstruct Rectangle\n{\n\tfloat xmin, xmax, ymin, ymax;\n};\n\nRectangle  rect;\nint x0, y0, x1, y1;\nbool bDrawLine = true;\nint width = 640, height = 480;\n\nvoid LineGL(int x0, int  y0, int x1, int y1)\n{\n\tglBegin(GL_LINES);\n\tglColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(x0, y0);\n\tglColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(x1, y1);\n\tglEnd();\n}\n\n//求p点的编码\nint CompCode(int x, int y, Rectangle rect)\n{\n\tint code = 0x00;\n\tif (y < rect.ymin)\n\t\tcode = code | 4;//即为1000\n\tif (y > rect.ymax)\n\t\tcode = code | 8;//即为0100\n\tif (x > rect.xmax)\n\t\tcode = code | 2;\n\tif (x < rect.xmin)\n\t\tcode = code | 1;\n\treturn code;\n}\n\nbool cohensutherlandlineclip(Rectangle  rect, int &x0, int & y0, int &x1, int &y1)\n{\n\tbool accept, done;\n\tfloat x, y;\n\taccept = false;\n\tdone = false;\n\n\tint code0, code1, codeout;\n\tcode0 = CompCode(x0, y0, rect);\n\tcode1 = CompCode(x1, y1, rect);\n\tdo {\n\t\tif (!(code0 | code1))\n\t\t{\n\t\t\taccept = true;\n\t\t\tdone = true;\n\t\t}\n\t\telse if (code0 & code1)\n\t\t\tdone = true;\n\t\telse\n\t\t{\n\t\t\tif (code0 != 0)\n\t\t\t\tcodeout = code0;\n\t\t\telse\n\t\t\t\tcodeout = code1;\n\n\t\t\tif (codeout&LEFT_EDGE) {\n\t\t\t\ty = y0 + (y1 - y0)*(rect.xmin - x0) / (x1 - x0);\n\t\t\t\tx = (float)rect.xmin;\n\t\t\t}\n\t\t\telse if (codeout&RIGHT_EDGE) {\n\t\t\t\ty = y0 + (y1 - y0)*(rect.xmax - x0) / (x1 - x0);\n\t\t\t\tx = (float)rect.xmax;\n\t\t\t}\n\t\t\telse if (codeout&BOTTOM_EDGE) {\n\t\t\t\tx = x0 + (x1 - x0)*(rect.ymin - y0) / (y1 - y0);\n\t\t\t\ty = (float)rect.ymin;\n\t\t\t}\n\t\t\telse if (codeout&TOP_EDGE) {\n\t\t\t\tx = x0 + (x1 - x0)*(rect.ymax - y0) / (y1 - y0);\n\t\t\t\ty = (float)rect.ymax;\n\t\t\t}\n\n\t\t\tif (codeout == code0)\n\t\t\t{\n\t\t\t\tx0 = x; y0 = y;\n\t\t\t\tcode0 = CompCode(x0, y0, rect);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx1 = x; y1 = y;\n\t\t\t\tcode1 = CompCode(x1, y1, rect);\n\t\t\t}\n\t\t}\n\t} while (!done);\n\n\treturn accept;\n}\n\nvoid myDisplay()\n{\n\tglClear(GL_COLOR_BUFFER_BIT);\n\tglColor3f(1.0f, 1.0f, 0.0f);\n\tglRectf(rect.xmin, rect.ymin, rect.xmax, rect.ymax);\n\n\tif (bDrawLine)\n\t\tLineGL(x0, y0, x1, y1);\n\n\tglFlush();\n}\n\nvoid Init()\n{\n\tglClearColor(0.0, 0.0, 0.0, 0.0);\n\tglShadeModel(GL_FLAT);\n\n\trect.xmin = 100; //窗口的大小\n\trect.xmax = 300;\n\trect.ymin = 100;\n\trect.ymax = 300;\n\n\tx0 = 300, y0 = 50, x1 = 0, y1 = 450;//裁剪前的直线端点\n\tprintf(\"Press key 'c' to Clip!\\n\");\n\tprintf(\"Please Click left button of mouse to input the points of Line!!\\n\");\n}\n\nvoid Reshape(int w, int h)\n{\n\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);\n\tglMatrixMode(GL_PROJECTION);\n\tglLoadIdentity();\n\tgluOrtho2D(0.0, (GLdouble)w, 0.0, (GLdouble)h);\n}\n\nvoid keyboard(unsigned char key, int x, int y)\n{\n\tswitch (key)\n\t{\n\tcase 'c':\n\t\tbDrawLine = cohensutherlandlineclip(rect, x0, y0, x1, y1);\n\t\tglutPostRedisplay();//重画\n\t\tbreak;\n\tcase 'x':\n\t\texit(0);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n}\n\nvoid mouse(int button, int state, int x, int y)\n{\n\tswitch (button)\n\t{\n\tcase GLUT_LEFT_BUTTON:\n\t\tif (state == GLUT_DOWN)\n\t\t{\n\t\t\tif(bDrawLine)\n\t\t\t{\n\t\t\t\tx0 = x;\n\t\t\t\ty0 = height - y;\n\t\t\t\tbDrawLine = false;\n\t\t\t\tglutPostRedisplay();//\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx1 = x;\n\t\t\t\ty1 = height - y;\n\t\t\t\tbDrawLine = true;\t\t\t\t\n\t\t\t\tglutPostRedisplay();//\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n}\n\nint main(int argc, char *argv[])\n{\n\tglutInit(&argc, argv);\n\tglutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);\n\tglutInitWindowPosition(100, 100);\n\tglutInitWindowSize(width, height);\n\tglutCreateWindow(\"Hello World!\");\n\n\tInit();\n\tglutDisplayFunc(myDisplay);\n\tglutReshapeFunc(Reshape);\n\tglutKeyboardFunc(keyboard);\n\tglutMouseFunc(mouse);\n\tglutMainLoop();\n\treturn 0;\n}\n```\n## 5．实验思考\n实验示范代码的第162行：\n```\ny0 = height - y;\n```\n请解释这行代码的含义和作用。","slug":"CG-Prj3-Clipping","published":1,"date":"2020-01-19T08:28:10.736Z","updated":"2019-08-18T02:04:22.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers0540004r0akf7bnjcg7","content":"<h2 id=\"1．实验目的：\"><a href=\"#1．实验目的：\" class=\"headerlink\" title=\"1．实验目的：\"></a>1．实验目的：</h2><ul>\n<li>理解直线裁剪的基本原理；</li>\n<li>验证直线的编码裁剪算法，参考网络资料实现梁友栋-Barsky裁剪算法；</li>\n<li>了解与掌握OpenGL鼠标操作。</li>\n</ul>\n<h2 id=\"2．实验内容：\"><a href=\"#2．实验内容：\" class=\"headerlink\" title=\"2．实验内容：\"></a>2．实验内容：</h2><p>本次实验主要结合鼠标画线程序来验证编码裁剪算法和梁友栋-Barsky裁剪算法，具体步骤如下：</p>\n<p>（1） 阅读学习所给的编码裁剪示范代码，了解程序使用方法，并结合三种不同类型直线对其进行裁剪测试，将测试结果存为图1-3，保存至word实验文档中（30分钟）；</p>\n<p>（2） 为示范代码增加梁友栋-Barsky裁剪算法，并通过键盘按键“L”来控制，即按键盘“L”键时，用梁友栋-Barsky算法裁剪程序窗口内的直线。同样测试三种不同类型的直线，将测试结果存为图4-6，，保存至word实验文档中（60分钟）；</p>\n<p>（3） 整理图1-6，并增加程序代码合并到一个word文档，将其命名为“序号-姓名-Prj2.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。</p>\n<h2 id=\"3．实验原理：\"><a href=\"#3．实验原理：\" class=\"headerlink\" title=\"3．实验原理：\"></a>3．实验原理：</h2><p>示范代码中编码裁剪算法原理参见教材裁剪内容，有关鼠标操作知识请参考<a href=\"https://www.cnblogs.com/starryxsky/p/7184032.html\" target=\"_blank\" rel=\"noopener\">OpenGL编程 基础篇（四）与鼠标的交互</a>。</p>\n<p>4．实验代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define LEFT_EDGE   1</span><br><span class=\"line\">#define RIGHT_EDGE  2</span><br><span class=\"line\">#define BOTTOM_EDGE 4</span><br><span class=\"line\">#define TOP_EDGE    8</span><br><span class=\"line\"></span><br><span class=\"line\">struct Rectangle</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfloat xmin, xmax, ymin, ymax;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle  rect;</span><br><span class=\"line\">int x0, y0, x1, y1;</span><br><span class=\"line\">bool bDrawLine = true;</span><br><span class=\"line\">int width = 640, height = 480;</span><br><span class=\"line\"></span><br><span class=\"line\">void LineGL(int x0, int  y0, int x1, int y1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglBegin(GL_LINES);</span><br><span class=\"line\">\tglColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(x0, y0);</span><br><span class=\"line\">\tglColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(x1, y1);</span><br><span class=\"line\">\tglEnd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//求p点的编码</span><br><span class=\"line\">int CompCode(int x, int y, Rectangle rect)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint code = 0x00;</span><br><span class=\"line\">\tif (y &lt; rect.ymin)</span><br><span class=\"line\">\t\tcode = code | 4;//即为1000</span><br><span class=\"line\">\tif (y &gt; rect.ymax)</span><br><span class=\"line\">\t\tcode = code | 8;//即为0100</span><br><span class=\"line\">\tif (x &gt; rect.xmax)</span><br><span class=\"line\">\t\tcode = code | 2;</span><br><span class=\"line\">\tif (x &lt; rect.xmin)</span><br><span class=\"line\">\t\tcode = code | 1;</span><br><span class=\"line\">\treturn code;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool cohensutherlandlineclip(Rectangle  rect, int &amp;x0, int &amp; y0, int &amp;x1, int &amp;y1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tbool accept, done;</span><br><span class=\"line\">\tfloat x, y;</span><br><span class=\"line\">\taccept = false;</span><br><span class=\"line\">\tdone = false;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint code0, code1, codeout;</span><br><span class=\"line\">\tcode0 = CompCode(x0, y0, rect);</span><br><span class=\"line\">\tcode1 = CompCode(x1, y1, rect);</span><br><span class=\"line\">\tdo &#123;</span><br><span class=\"line\">\t\tif (!(code0 | code1))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\taccept = true;</span><br><span class=\"line\">\t\t\tdone = true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (code0 &amp; code1)</span><br><span class=\"line\">\t\t\tdone = true;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif (code0 != 0)</span><br><span class=\"line\">\t\t\t\tcodeout = code0;</span><br><span class=\"line\">\t\t\telse</span><br><span class=\"line\">\t\t\t\tcodeout = code1;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif (codeout&amp;LEFT_EDGE) &#123;</span><br><span class=\"line\">\t\t\t\ty = y0 + (y1 - y0)*(rect.xmin - x0) / (x1 - x0);</span><br><span class=\"line\">\t\t\t\tx = (float)rect.xmin;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse if (codeout&amp;RIGHT_EDGE) &#123;</span><br><span class=\"line\">\t\t\t\ty = y0 + (y1 - y0)*(rect.xmax - x0) / (x1 - x0);</span><br><span class=\"line\">\t\t\t\tx = (float)rect.xmax;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse if (codeout&amp;BOTTOM_EDGE) &#123;</span><br><span class=\"line\">\t\t\t\tx = x0 + (x1 - x0)*(rect.ymin - y0) / (y1 - y0);</span><br><span class=\"line\">\t\t\t\ty = (float)rect.ymin;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse if (codeout&amp;TOP_EDGE) &#123;</span><br><span class=\"line\">\t\t\t\tx = x0 + (x1 - x0)*(rect.ymax - y0) / (y1 - y0);</span><br><span class=\"line\">\t\t\t\ty = (float)rect.ymax;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif (codeout == code0)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx0 = x; y0 = y;</span><br><span class=\"line\">\t\t\t\tcode0 = CompCode(x0, y0, rect);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx1 = x; y1 = y;</span><br><span class=\"line\">\t\t\t\tcode1 = CompCode(x1, y1, rect);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; while (!done);</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn accept;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void myDisplay()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">\tglColor3f(1.0f, 1.0f, 0.0f);</span><br><span class=\"line\">\tglRectf(rect.xmin, rect.ymin, rect.xmax, rect.ymax);</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (bDrawLine)</span><br><span class=\"line\">\t\tLineGL(x0, y0, x1, y1);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\">\tglShadeModel(GL_FLAT);</span><br><span class=\"line\"></span><br><span class=\"line\">\trect.xmin = 100; //窗口的大小</span><br><span class=\"line\">\trect.xmax = 300;</span><br><span class=\"line\">\trect.ymin = 100;</span><br><span class=\"line\">\trect.ymax = 300;</span><br><span class=\"line\"></span><br><span class=\"line\">\tx0 = 300, y0 = 50, x1 = 0, y1 = 450;//裁剪前的直线端点</span><br><span class=\"line\">\tprintf(&quot;Press key &apos;c&apos; to Clip!\\n&quot;);</span><br><span class=\"line\">\tprintf(&quot;Please Click left button of mouse to input the points of Line!!\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Reshape(int w, int h)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);</span><br><span class=\"line\">\tglMatrixMode(GL_PROJECTION);</span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\">\tgluOrtho2D(0.0, (GLdouble)w, 0.0, (GLdouble)h);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void keyboard(unsigned char key, int x, int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tswitch (key)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tcase &apos;c&apos;:</span><br><span class=\"line\">\t\tbDrawLine = cohensutherlandlineclip(rect, x0, y0, x1, y1);</span><br><span class=\"line\">\t\tglutPostRedisplay();//重画</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tcase &apos;x&apos;:</span><br><span class=\"line\">\t\texit(0);</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void mouse(int button, int state, int x, int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tswitch (button)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tcase GLUT_LEFT_BUTTON:</span><br><span class=\"line\">\t\tif (state == GLUT_DOWN)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif(bDrawLine)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx0 = x;</span><br><span class=\"line\">\t\t\t\ty0 = height - y;</span><br><span class=\"line\">\t\t\t\tbDrawLine = false;</span><br><span class=\"line\">\t\t\t\tglutPostRedisplay();//</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx1 = x;</span><br><span class=\"line\">\t\t\t\ty1 = height - y;</span><br><span class=\"line\">\t\t\t\tbDrawLine = true;\t\t\t\t</span><br><span class=\"line\">\t\t\t\tglutPostRedisplay();//</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\">\tglutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</span><br><span class=\"line\">\tglutInitWindowPosition(100, 100);</span><br><span class=\"line\">\tglutInitWindowSize(width, height);</span><br><span class=\"line\">\tglutCreateWindow(&quot;Hello World!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tInit();</span><br><span class=\"line\">\tglutDisplayFunc(myDisplay);</span><br><span class=\"line\">\tglutReshapeFunc(Reshape);</span><br><span class=\"line\">\tglutKeyboardFunc(keyboard);</span><br><span class=\"line\">\tglutMouseFunc(mouse);</span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5．实验思考\"><a href=\"#5．实验思考\" class=\"headerlink\" title=\"5．实验思考\"></a>5．实验思考</h2><p>实验示范代码的第162行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y0 = height - y;</span><br></pre></td></tr></table></figure></p>\n<p>请解释这行代码的含义和作用。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1．实验目的：\"><a href=\"#1．实验目的：\" class=\"headerlink\" title=\"1．实验目的：\"></a>1．实验目的：</h2><ul>\n<li>理解直线裁剪的基本原理；</li>\n<li>验证直线的编码裁剪算法，参考网络资料实现梁友栋-Barsky裁剪算法；</li>\n<li>了解与掌握OpenGL鼠标操作。</li>\n</ul>\n<h2 id=\"2．实验内容：\"><a href=\"#2．实验内容：\" class=\"headerlink\" title=\"2．实验内容：\"></a>2．实验内容：</h2><p>本次实验主要结合鼠标画线程序来验证编码裁剪算法和梁友栋-Barsky裁剪算法，具体步骤如下：</p>\n<p>（1） 阅读学习所给的编码裁剪示范代码，了解程序使用方法，并结合三种不同类型直线对其进行裁剪测试，将测试结果存为图1-3，保存至word实验文档中（30分钟）；</p>\n<p>（2） 为示范代码增加梁友栋-Barsky裁剪算法，并通过键盘按键“L”来控制，即按键盘“L”键时，用梁友栋-Barsky算法裁剪程序窗口内的直线。同样测试三种不同类型的直线，将测试结果存为图4-6，，保存至word实验文档中（60分钟）；</p>\n<p>（3） 整理图1-6，并增加程序代码合并到一个word文档，将其命名为“序号-姓名-Prj2.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。</p>\n<h2 id=\"3．实验原理：\"><a href=\"#3．实验原理：\" class=\"headerlink\" title=\"3．实验原理：\"></a>3．实验原理：</h2><p>示范代码中编码裁剪算法原理参见教材裁剪内容，有关鼠标操作知识请参考<a href=\"https://www.cnblogs.com/starryxsky/p/7184032.html\" target=\"_blank\" rel=\"noopener\">OpenGL编程 基础篇（四）与鼠标的交互</a>。</p>\n<p>4．实验代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define LEFT_EDGE   1</span><br><span class=\"line\">#define RIGHT_EDGE  2</span><br><span class=\"line\">#define BOTTOM_EDGE 4</span><br><span class=\"line\">#define TOP_EDGE    8</span><br><span class=\"line\"></span><br><span class=\"line\">struct Rectangle</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfloat xmin, xmax, ymin, ymax;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle  rect;</span><br><span class=\"line\">int x0, y0, x1, y1;</span><br><span class=\"line\">bool bDrawLine = true;</span><br><span class=\"line\">int width = 640, height = 480;</span><br><span class=\"line\"></span><br><span class=\"line\">void LineGL(int x0, int  y0, int x1, int y1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglBegin(GL_LINES);</span><br><span class=\"line\">\tglColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(x0, y0);</span><br><span class=\"line\">\tglColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(x1, y1);</span><br><span class=\"line\">\tglEnd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//求p点的编码</span><br><span class=\"line\">int CompCode(int x, int y, Rectangle rect)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint code = 0x00;</span><br><span class=\"line\">\tif (y &lt; rect.ymin)</span><br><span class=\"line\">\t\tcode = code | 4;//即为1000</span><br><span class=\"line\">\tif (y &gt; rect.ymax)</span><br><span class=\"line\">\t\tcode = code | 8;//即为0100</span><br><span class=\"line\">\tif (x &gt; rect.xmax)</span><br><span class=\"line\">\t\tcode = code | 2;</span><br><span class=\"line\">\tif (x &lt; rect.xmin)</span><br><span class=\"line\">\t\tcode = code | 1;</span><br><span class=\"line\">\treturn code;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool cohensutherlandlineclip(Rectangle  rect, int &amp;x0, int &amp; y0, int &amp;x1, int &amp;y1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tbool accept, done;</span><br><span class=\"line\">\tfloat x, y;</span><br><span class=\"line\">\taccept = false;</span><br><span class=\"line\">\tdone = false;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint code0, code1, codeout;</span><br><span class=\"line\">\tcode0 = CompCode(x0, y0, rect);</span><br><span class=\"line\">\tcode1 = CompCode(x1, y1, rect);</span><br><span class=\"line\">\tdo &#123;</span><br><span class=\"line\">\t\tif (!(code0 | code1))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\taccept = true;</span><br><span class=\"line\">\t\t\tdone = true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (code0 &amp; code1)</span><br><span class=\"line\">\t\t\tdone = true;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif (code0 != 0)</span><br><span class=\"line\">\t\t\t\tcodeout = code0;</span><br><span class=\"line\">\t\t\telse</span><br><span class=\"line\">\t\t\t\tcodeout = code1;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif (codeout&amp;LEFT_EDGE) &#123;</span><br><span class=\"line\">\t\t\t\ty = y0 + (y1 - y0)*(rect.xmin - x0) / (x1 - x0);</span><br><span class=\"line\">\t\t\t\tx = (float)rect.xmin;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse if (codeout&amp;RIGHT_EDGE) &#123;</span><br><span class=\"line\">\t\t\t\ty = y0 + (y1 - y0)*(rect.xmax - x0) / (x1 - x0);</span><br><span class=\"line\">\t\t\t\tx = (float)rect.xmax;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse if (codeout&amp;BOTTOM_EDGE) &#123;</span><br><span class=\"line\">\t\t\t\tx = x0 + (x1 - x0)*(rect.ymin - y0) / (y1 - y0);</span><br><span class=\"line\">\t\t\t\ty = (float)rect.ymin;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse if (codeout&amp;TOP_EDGE) &#123;</span><br><span class=\"line\">\t\t\t\tx = x0 + (x1 - x0)*(rect.ymax - y0) / (y1 - y0);</span><br><span class=\"line\">\t\t\t\ty = (float)rect.ymax;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif (codeout == code0)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx0 = x; y0 = y;</span><br><span class=\"line\">\t\t\t\tcode0 = CompCode(x0, y0, rect);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx1 = x; y1 = y;</span><br><span class=\"line\">\t\t\t\tcode1 = CompCode(x1, y1, rect);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; while (!done);</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn accept;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void myDisplay()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">\tglColor3f(1.0f, 1.0f, 0.0f);</span><br><span class=\"line\">\tglRectf(rect.xmin, rect.ymin, rect.xmax, rect.ymax);</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (bDrawLine)</span><br><span class=\"line\">\t\tLineGL(x0, y0, x1, y1);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\">\tglShadeModel(GL_FLAT);</span><br><span class=\"line\"></span><br><span class=\"line\">\trect.xmin = 100; //窗口的大小</span><br><span class=\"line\">\trect.xmax = 300;</span><br><span class=\"line\">\trect.ymin = 100;</span><br><span class=\"line\">\trect.ymax = 300;</span><br><span class=\"line\"></span><br><span class=\"line\">\tx0 = 300, y0 = 50, x1 = 0, y1 = 450;//裁剪前的直线端点</span><br><span class=\"line\">\tprintf(&quot;Press key &apos;c&apos; to Clip!\\n&quot;);</span><br><span class=\"line\">\tprintf(&quot;Please Click left button of mouse to input the points of Line!!\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Reshape(int w, int h)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);</span><br><span class=\"line\">\tglMatrixMode(GL_PROJECTION);</span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\">\tgluOrtho2D(0.0, (GLdouble)w, 0.0, (GLdouble)h);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void keyboard(unsigned char key, int x, int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tswitch (key)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tcase &apos;c&apos;:</span><br><span class=\"line\">\t\tbDrawLine = cohensutherlandlineclip(rect, x0, y0, x1, y1);</span><br><span class=\"line\">\t\tglutPostRedisplay();//重画</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tcase &apos;x&apos;:</span><br><span class=\"line\">\t\texit(0);</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void mouse(int button, int state, int x, int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tswitch (button)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tcase GLUT_LEFT_BUTTON:</span><br><span class=\"line\">\t\tif (state == GLUT_DOWN)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif(bDrawLine)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx0 = x;</span><br><span class=\"line\">\t\t\t\ty0 = height - y;</span><br><span class=\"line\">\t\t\t\tbDrawLine = false;</span><br><span class=\"line\">\t\t\t\tglutPostRedisplay();//</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx1 = x;</span><br><span class=\"line\">\t\t\t\ty1 = height - y;</span><br><span class=\"line\">\t\t\t\tbDrawLine = true;\t\t\t\t</span><br><span class=\"line\">\t\t\t\tglutPostRedisplay();//</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\">\tglutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</span><br><span class=\"line\">\tglutInitWindowPosition(100, 100);</span><br><span class=\"line\">\tglutInitWindowSize(width, height);</span><br><span class=\"line\">\tglutCreateWindow(&quot;Hello World!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tInit();</span><br><span class=\"line\">\tglutDisplayFunc(myDisplay);</span><br><span class=\"line\">\tglutReshapeFunc(Reshape);</span><br><span class=\"line\">\tglutKeyboardFunc(keyboard);</span><br><span class=\"line\">\tglutMouseFunc(mouse);</span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5．实验思考\"><a href=\"#5．实验思考\" class=\"headerlink\" title=\"5．实验思考\"></a>5．实验思考</h2><p>实验示范代码的第162行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y0 = height - y;</span><br></pre></td></tr></table></figure></p>\n<p>请解释这行代码的含义和作用。</p>\n"},{"title":"实验4 二维几何变换","_content":"## 1．实验目的：\n\n- 巩固对二维几何变换的认识与理解；\n- 学习OpenGL平移、旋转、缩放变换函数及其使用方法；\n- 学习基本图形变换与复合图形变换的方法；\n- 综合运用上述函数，设计复杂图形。\n\n## 2．实验内容：\n\n根据示范代码1，使用OpenGL平移、旋转、缩放变换函数来改写代码实现所要求的功能。示范代码1的代码运行结果为图1。\n\n（1） 使用glTranslatef()函数，实现图形平移，并结合glTranslatef()函数的不同参数输入，实现x，y和z方向的平移，将测试结果存为图1-3，与对应修改的平移函数代码一起保存至word实验文档中（20分钟）；\n\n（2） 使用glRotatef()函数，实现图形旋转，并结合glRotatef()函数的不同参数输入，实现x，y和z方向的旋转，将测试结果存为图4-6，与对应修改的旋转函数代码一起保存至word实验文档中（20分钟）；\n\n（3） 使用glScalef()函数，实现图形缩放，并结合glScalef()函数的不同参数输入，实现x，y和z方向的旋转，将测试结果存为图7-9，与对应修改的缩放函数代码一起保存至word实验文档中（20分钟）；\n\n（4）示范代码2，代码运行结果为图2，请参考它绘制如图3所示的图形，将绘图结果与代码保存至word实验文档中（30分钟）；\n\n（5） 整理word实验文档，将其命名为“序号-姓名-Prj4.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。\n\n## 3．实验原理：\n\n（1）OpenGL下的几何变换\n在OpenGL的核心库中，每一种几何变换都有一个独立的函数，所有变换都在三维空间中定义。\n平移矩阵构造函数为`glTranslate<f,d>(tx, ty, tz)`，作用是把当前矩阵和一个表示移动物体的矩阵相乘。tx、ty、tz指定这个移动物体的矩阵，它们可以是任意的实数值，后缀为f（单精度浮点float）或d（双精度浮点double），对于二维应用来说，tz=0.0。\n旋转矩阵构造函数为`glRotate<f,d>(theta, vx, vy, vz)`，作用是把当前矩阵和一个表示旋转物体的矩阵相乘。theta，vx，vy，vz指定这个旋转物体的矩阵，物体将围绕(0,0,0)到(x,y,z)的直线以逆时针旋转，参数theta表示旋转的角度。向量v=(vx,vy,vz)的分量可以是任意的实数值，该向量用于定义通过坐标原点的旋转轴的方向，后缀为f（单精度浮点float）或d（双精度浮点double），对于二维旋转来说，vx=0.0，vy=0.0，vz=1.0。\n缩放矩阵构造函数为`glScale<f,d>(sx, sy, sz)`，作用是把当前矩阵和一个表示缩放物体的矩阵相乘。sx，sy，sz指定这个缩放物体的矩阵，分别表示在x，y，z方向上的缩放比例，它们可以是任意的实数值，当缩放参数为负值时，该函数为反射矩阵，缩放相对于原点进行，后缀为f（单精度浮点float）或d（双精度浮点double）。\n注意这里都是说“把当前矩阵和一个表示移动<旋转, 缩放>物体的矩阵相乘”，而不是直接说“这个函数就是旋转”或者“这个函数就是移动”，这是有原因的，马上就会讲到。\n假设当前矩阵为单位矩阵，然后先乘以一个表示旋转的矩阵R，再乘以一个表示移动的矩阵T，最后得到的矩阵再乘上每一个顶点的坐标矩阵v。那么，经过变换得到的顶点坐标就是((RT)v)。由于矩阵乘法满足结合率，((RT)v) = R(Tv))，换句话说，实际上是先进行移动，然后进行旋转。即：实际变换的顺序与代码中写的顺序是相反的。由于“先移动后旋转”和“先旋转后移动”得到的结果很可能不同，初学的时候需要特别注意这一点。\n\n（2）OpenGL下的各种变换简介\n我们生活在一个三维的世界，如果要观察一个物体，我们可以：\n① 从不同的位置去观察它（人运动，选定某个位置去看）。（视图变换）\n② 移动或者旋转它，当然了，如果它只是计算机里面的物体，我们还可以放大或缩小它（物体运动，让人看它的不同部分）。（模型变换）\n③ 如果把物体画下来，我们可以选择是否需要一种“近大远小”的透视效果。另外，我们可能只希望看到物体的一部分，而不是全部（指定看的范围）。（投影变换）\n④ 我们可能希望把整个看到的图形画下来，但它只占据纸张的一部分，而不是全部（指定在显示器窗口的那个位置显示）。（视口变换）\n这些，都可以在OpenGL中实现。\n从“相对移动”的观点来看，改变观察点的位置与方向和改变物体本身的位置与方向具有等效性。在OpenGL中，实现这两种功能甚至使用的是同样的函数。\n由于模型和视图的变换都通过矩阵运算来实现，在进行变换前，应先设置当前操作的矩阵为“模型视图矩阵”。设置的方法是以GL_MODELVIEW为参数调用glMatrixMode函数，例如：\n```\nglMatrixMode(GL_MODELVIEW);\n```\n该语句指定一个4×4的建模矩阵作为当前矩阵。\n通常，我们需要在进行变换前把当前矩阵设置为单位矩阵。把当前矩阵设置为单位矩阵的函数为：\n```\nglLoadIdentity();\n```\n我们在进行矩阵操作时，有可能需要先保存某个矩阵，过一段时间再恢复它。当我们需要保存时，调用glPushMatrix()函数，它相当于把当前矩阵压入堆栈。当需要恢复最近一次的保存时，调用glPopMatrix()函数，它相当于从堆栈栈顶弹出一个矩阵为当前矩阵。OpenGL规定堆栈至少可以容纳32个矩阵，某些OpenGL实现中，堆栈的容量实际上超过了32个。因此不必过于担心矩阵的容量问题。\n通常，用这种先保存后恢复的措施，比先变换再逆变换要更方便、更快速。注意：模型视图矩阵和投影矩阵都有相应的堆栈。使用glMatrixMode来指定当前操作的究竟是模型视图矩阵还是投影矩阵。\n\n(3) 某图形绕任意点(cx, cy)旋转 $\\alpha$ 角。\n```\n清屏\nglMatrixMode(GL_MODELVIEW); //设置矩阵模式为模型变换模式，表示在世界坐标系下\nglLoadIdentity();   //将当前矩阵设置为单位矩阵\nglTranslatef(cx,cy,0);   //平移回去\t\nglRotatef(alpha,0,0,1); //绕原点旋转ALPHA角度\t\nglTranslatef(-cx,-cy,0);  //平移回原点\ndrawSquare();\n```\n图形绕任意点缩放方法的代码只需把旋转函数换为缩放函数即可，不再赘述。\n\n## 4．示范代码：\n### 示范代码1\n```\n#include <GL/glut.h>\nvoid init (void)\n{\n    glClearColor (1.0, 1.0, 1.0, 0.0);  \n    glMatrixMode (GL_PROJECTION);  \n    gluOrtho2D (-5.0, 5.0, -5.0, 5.0);\n    //设置显示的范围是X:-5.0~5.0, Y:-5.0~5.0\n    glMatrixMode (GL_MODELVIEW);\n}\nvoid drawSquare(void)\t\t\t\t\t\t//绘制中心在原点，边长为2的正方形\n{\n\tglBegin (GL_POLYGON);\t\t\t\t\t//顶点指定需要按逆时针方向\n\t   glVertex2f (-1.0f,-1.0f);\t\t\t//左下点\n\t   glVertex2f (1.0f,-1.0f);\t\t\t\t//右下点\n\t   glVertex2f (1.0f, 1.0f);\t\t\t\t//右上点\n\t   glVertex2f (-1.0f,1.0f);\t\t\t\t//左上点\n\tglEnd ( );\n}\n\nvoid myDraw (void)\n{\n\tglClear (GL_COLOR_BUFFER_BIT);\t\t\t//清空\n\tglLoadIdentity();       \t\t\t\t\t//将当前矩阵设为单位矩阵\n\t\n\tglColor3f (1.0, 0.0, 0.0); \n\tdrawSquare();      \t\t\t\t\t\t//上面红色矩形\n\n\tglFlush ( );\n}\n\nvoid main (int argc, char** argv)\n{\n  \tglutInit (&argc, argv);                        \n  \tglutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);  \n  \tglutInitWindowPosition (0, 0);  \n  \tglutInitWindowSize (600, 600);      \n  \tglutCreateWindow (\"几何变换示例1\"); \n    \n  \tinit();                  \n  \tglutDisplayFunc (myDraw);\n  \tglutMainLoop();  \n}\n```\n程序运行结果： <img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-2D%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A21.png\" width=\"300\" align=center />\n\n图1\n\n### 示范代码2\n```\n#include <GL/glut.h>\nvoid init (void)\n{\n    glClearColor (1.0, 1.0, 1.0, 0.0);  \n    glMatrixMode (GL_PROJECTION);  \n    gluOrtho2D (-5.0, 5.0, -5.0, 5.0);\n    //设置显示的范围是X:-5.0~5.0, Y:-5.0~5.0\n    glMatrixMode (GL_MODELVIEW);\n}\nvoid drawSquare(void)\t\t\t\t\t\t//绘制中心在原点，边长为2的正方形\n{\n\tglBegin (GL_POLYGON);\t\t\t\t\t//顶点指定需要按逆时针方向\n\t   glVertex2f (-1.0f,-1.0f);\t\t\t//左下点\n\t   glVertex2f (1.0f,-1.0f);\t\t\t\t//右下点\n\t   glVertex2f (1.0f, 1.0f);\t\t\t\t//右上点\n\t   glVertex2f (-1.0f,1.0f);\t\t\t\t//左上点\n\tglEnd ( );\n}\n\nvoid myDraw (void)\n{\n\tglClear (GL_COLOR_BUFFER_BIT);\t\t\t//清空\n\tglLoadIdentity();       \t\t\t\t\t//将当前矩阵设为单位矩阵\n\t\n\tglPushMatrix();\n\tglTranslatef(0.0f,2.0f,0.0f);\n\tglScalef(3.0,0.5,1.0); \n\tglColor3f (1.0, 0.0, 0.0); \n\tdrawSquare();      \t\t\t\t\t\t//上面红色矩形\n\tglPopMatrix();\n\n\tglPushMatrix();\n\t\n\tglTranslatef(-3.0,0.0,0.0);  \n\t\n\tglPushMatrix();\n\tglRotatef(45.0,0.0,0.0,1.0);\n\tglColor3f (0.0, 1.0, 0.0);  \n\tdrawSquare();              \t\t\t\t//中间左菱形\n\tglPopMatrix();\n   \n   \tglTranslatef(3.0,0.0,0.0); \n    \n\tglPushMatrix();\n\tglRotatef(45.0,0.0,0.0,1.0);\n\tglColor3f (0.0, 0.7, 0.0);  \n\tdrawSquare();              \t\t\t\t//中间中菱形\n\tglPopMatrix();\n\n\tglTranslatef(3.0,0.0,0.0); \n    \n\tglPushMatrix();\n\tglRotatef(45.0,0.0,0.0,1.0);\n\tglColor3f (0.0, 0.4, 0.0);  \n\tdrawSquare();              \t\t\t\t//中间右菱形\n\tglPopMatrix();\n    \n\tglPopMatrix();\n\n\tglTranslatef(0.0,-3.0,0.0);  \n\tglScalef(4.0,1.5,1.0); \n\tglColor3f (0.0, 0.0, 1.0);\n\tdrawSquare();    \t\t\t\t\t\t//下面蓝色矩形         \n\n\tglFlush ( );\n}\n\nvoid main (int argc, char** argv)\n{\n  \tglutInit (&argc, argv);                        \n  \tglutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);  \n  \tglutInitWindowPosition (0, 0);  \n  \tglutInitWindowSize (600, 600);      \n  \tglutCreateWindow (\"几何变换示例2\"); \n    \n  \tinit();                  \n  \tglutDisplayFunc (myDraw);\n  \tglutMainLoop();  \n}\n```\n程序运行结果：\n<img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-2D%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A22.png\" width=\"300\" align=center />\n\n图2\n\n<img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-2D%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A23.png\" width=\"300\" align=center />\n\n图3\n\n## 5．实验思考\n在绕任意点旋转时，若将相关代码改为如下：\n```\n清屏\nglMatrixMode(GL_MODELVIEW); //设置矩阵模式为模型变换模式，表示在世界坐标系下\nglLoadIdentity();   //将当前矩阵设置为单位矩阵\nglTranslatef(-cx,-cy,0);   //平移回去\t\nglRotatef(theta,0,0,1); //绕原点旋转ALPHA角度\t\nglTranslatef(cx,cy,0);  //平移回原点\ndrawSquare();\n```\n图形将变成怎样？试解释原因。","source":"_posts/CG-Prj4-2D-Transformation.md","raw":"---\ntitle: 实验4 二维几何变换\ntags: [计算机图形学]\ncategories: 计算机图形学\n---\n## 1．实验目的：\n\n- 巩固对二维几何变换的认识与理解；\n- 学习OpenGL平移、旋转、缩放变换函数及其使用方法；\n- 学习基本图形变换与复合图形变换的方法；\n- 综合运用上述函数，设计复杂图形。\n\n## 2．实验内容：\n\n根据示范代码1，使用OpenGL平移、旋转、缩放变换函数来改写代码实现所要求的功能。示范代码1的代码运行结果为图1。\n\n（1） 使用glTranslatef()函数，实现图形平移，并结合glTranslatef()函数的不同参数输入，实现x，y和z方向的平移，将测试结果存为图1-3，与对应修改的平移函数代码一起保存至word实验文档中（20分钟）；\n\n（2） 使用glRotatef()函数，实现图形旋转，并结合glRotatef()函数的不同参数输入，实现x，y和z方向的旋转，将测试结果存为图4-6，与对应修改的旋转函数代码一起保存至word实验文档中（20分钟）；\n\n（3） 使用glScalef()函数，实现图形缩放，并结合glScalef()函数的不同参数输入，实现x，y和z方向的旋转，将测试结果存为图7-9，与对应修改的缩放函数代码一起保存至word实验文档中（20分钟）；\n\n（4）示范代码2，代码运行结果为图2，请参考它绘制如图3所示的图形，将绘图结果与代码保存至word实验文档中（30分钟）；\n\n（5） 整理word实验文档，将其命名为“序号-姓名-Prj4.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。\n\n## 3．实验原理：\n\n（1）OpenGL下的几何变换\n在OpenGL的核心库中，每一种几何变换都有一个独立的函数，所有变换都在三维空间中定义。\n平移矩阵构造函数为`glTranslate<f,d>(tx, ty, tz)`，作用是把当前矩阵和一个表示移动物体的矩阵相乘。tx、ty、tz指定这个移动物体的矩阵，它们可以是任意的实数值，后缀为f（单精度浮点float）或d（双精度浮点double），对于二维应用来说，tz=0.0。\n旋转矩阵构造函数为`glRotate<f,d>(theta, vx, vy, vz)`，作用是把当前矩阵和一个表示旋转物体的矩阵相乘。theta，vx，vy，vz指定这个旋转物体的矩阵，物体将围绕(0,0,0)到(x,y,z)的直线以逆时针旋转，参数theta表示旋转的角度。向量v=(vx,vy,vz)的分量可以是任意的实数值，该向量用于定义通过坐标原点的旋转轴的方向，后缀为f（单精度浮点float）或d（双精度浮点double），对于二维旋转来说，vx=0.0，vy=0.0，vz=1.0。\n缩放矩阵构造函数为`glScale<f,d>(sx, sy, sz)`，作用是把当前矩阵和一个表示缩放物体的矩阵相乘。sx，sy，sz指定这个缩放物体的矩阵，分别表示在x，y，z方向上的缩放比例，它们可以是任意的实数值，当缩放参数为负值时，该函数为反射矩阵，缩放相对于原点进行，后缀为f（单精度浮点float）或d（双精度浮点double）。\n注意这里都是说“把当前矩阵和一个表示移动<旋转, 缩放>物体的矩阵相乘”，而不是直接说“这个函数就是旋转”或者“这个函数就是移动”，这是有原因的，马上就会讲到。\n假设当前矩阵为单位矩阵，然后先乘以一个表示旋转的矩阵R，再乘以一个表示移动的矩阵T，最后得到的矩阵再乘上每一个顶点的坐标矩阵v。那么，经过变换得到的顶点坐标就是((RT)v)。由于矩阵乘法满足结合率，((RT)v) = R(Tv))，换句话说，实际上是先进行移动，然后进行旋转。即：实际变换的顺序与代码中写的顺序是相反的。由于“先移动后旋转”和“先旋转后移动”得到的结果很可能不同，初学的时候需要特别注意这一点。\n\n（2）OpenGL下的各种变换简介\n我们生活在一个三维的世界，如果要观察一个物体，我们可以：\n① 从不同的位置去观察它（人运动，选定某个位置去看）。（视图变换）\n② 移动或者旋转它，当然了，如果它只是计算机里面的物体，我们还可以放大或缩小它（物体运动，让人看它的不同部分）。（模型变换）\n③ 如果把物体画下来，我们可以选择是否需要一种“近大远小”的透视效果。另外，我们可能只希望看到物体的一部分，而不是全部（指定看的范围）。（投影变换）\n④ 我们可能希望把整个看到的图形画下来，但它只占据纸张的一部分，而不是全部（指定在显示器窗口的那个位置显示）。（视口变换）\n这些，都可以在OpenGL中实现。\n从“相对移动”的观点来看，改变观察点的位置与方向和改变物体本身的位置与方向具有等效性。在OpenGL中，实现这两种功能甚至使用的是同样的函数。\n由于模型和视图的变换都通过矩阵运算来实现，在进行变换前，应先设置当前操作的矩阵为“模型视图矩阵”。设置的方法是以GL_MODELVIEW为参数调用glMatrixMode函数，例如：\n```\nglMatrixMode(GL_MODELVIEW);\n```\n该语句指定一个4×4的建模矩阵作为当前矩阵。\n通常，我们需要在进行变换前把当前矩阵设置为单位矩阵。把当前矩阵设置为单位矩阵的函数为：\n```\nglLoadIdentity();\n```\n我们在进行矩阵操作时，有可能需要先保存某个矩阵，过一段时间再恢复它。当我们需要保存时，调用glPushMatrix()函数，它相当于把当前矩阵压入堆栈。当需要恢复最近一次的保存时，调用glPopMatrix()函数，它相当于从堆栈栈顶弹出一个矩阵为当前矩阵。OpenGL规定堆栈至少可以容纳32个矩阵，某些OpenGL实现中，堆栈的容量实际上超过了32个。因此不必过于担心矩阵的容量问题。\n通常，用这种先保存后恢复的措施，比先变换再逆变换要更方便、更快速。注意：模型视图矩阵和投影矩阵都有相应的堆栈。使用glMatrixMode来指定当前操作的究竟是模型视图矩阵还是投影矩阵。\n\n(3) 某图形绕任意点(cx, cy)旋转 $\\alpha$ 角。\n```\n清屏\nglMatrixMode(GL_MODELVIEW); //设置矩阵模式为模型变换模式，表示在世界坐标系下\nglLoadIdentity();   //将当前矩阵设置为单位矩阵\nglTranslatef(cx,cy,0);   //平移回去\t\nglRotatef(alpha,0,0,1); //绕原点旋转ALPHA角度\t\nglTranslatef(-cx,-cy,0);  //平移回原点\ndrawSquare();\n```\n图形绕任意点缩放方法的代码只需把旋转函数换为缩放函数即可，不再赘述。\n\n## 4．示范代码：\n### 示范代码1\n```\n#include <GL/glut.h>\nvoid init (void)\n{\n    glClearColor (1.0, 1.0, 1.0, 0.0);  \n    glMatrixMode (GL_PROJECTION);  \n    gluOrtho2D (-5.0, 5.0, -5.0, 5.0);\n    //设置显示的范围是X:-5.0~5.0, Y:-5.0~5.0\n    glMatrixMode (GL_MODELVIEW);\n}\nvoid drawSquare(void)\t\t\t\t\t\t//绘制中心在原点，边长为2的正方形\n{\n\tglBegin (GL_POLYGON);\t\t\t\t\t//顶点指定需要按逆时针方向\n\t   glVertex2f (-1.0f,-1.0f);\t\t\t//左下点\n\t   glVertex2f (1.0f,-1.0f);\t\t\t\t//右下点\n\t   glVertex2f (1.0f, 1.0f);\t\t\t\t//右上点\n\t   glVertex2f (-1.0f,1.0f);\t\t\t\t//左上点\n\tglEnd ( );\n}\n\nvoid myDraw (void)\n{\n\tglClear (GL_COLOR_BUFFER_BIT);\t\t\t//清空\n\tglLoadIdentity();       \t\t\t\t\t//将当前矩阵设为单位矩阵\n\t\n\tglColor3f (1.0, 0.0, 0.0); \n\tdrawSquare();      \t\t\t\t\t\t//上面红色矩形\n\n\tglFlush ( );\n}\n\nvoid main (int argc, char** argv)\n{\n  \tglutInit (&argc, argv);                        \n  \tglutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);  \n  \tglutInitWindowPosition (0, 0);  \n  \tglutInitWindowSize (600, 600);      \n  \tglutCreateWindow (\"几何变换示例1\"); \n    \n  \tinit();                  \n  \tglutDisplayFunc (myDraw);\n  \tglutMainLoop();  \n}\n```\n程序运行结果： <img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-2D%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A21.png\" width=\"300\" align=center />\n\n图1\n\n### 示范代码2\n```\n#include <GL/glut.h>\nvoid init (void)\n{\n    glClearColor (1.0, 1.0, 1.0, 0.0);  \n    glMatrixMode (GL_PROJECTION);  \n    gluOrtho2D (-5.0, 5.0, -5.0, 5.0);\n    //设置显示的范围是X:-5.0~5.0, Y:-5.0~5.0\n    glMatrixMode (GL_MODELVIEW);\n}\nvoid drawSquare(void)\t\t\t\t\t\t//绘制中心在原点，边长为2的正方形\n{\n\tglBegin (GL_POLYGON);\t\t\t\t\t//顶点指定需要按逆时针方向\n\t   glVertex2f (-1.0f,-1.0f);\t\t\t//左下点\n\t   glVertex2f (1.0f,-1.0f);\t\t\t\t//右下点\n\t   glVertex2f (1.0f, 1.0f);\t\t\t\t//右上点\n\t   glVertex2f (-1.0f,1.0f);\t\t\t\t//左上点\n\tglEnd ( );\n}\n\nvoid myDraw (void)\n{\n\tglClear (GL_COLOR_BUFFER_BIT);\t\t\t//清空\n\tglLoadIdentity();       \t\t\t\t\t//将当前矩阵设为单位矩阵\n\t\n\tglPushMatrix();\n\tglTranslatef(0.0f,2.0f,0.0f);\n\tglScalef(3.0,0.5,1.0); \n\tglColor3f (1.0, 0.0, 0.0); \n\tdrawSquare();      \t\t\t\t\t\t//上面红色矩形\n\tglPopMatrix();\n\n\tglPushMatrix();\n\t\n\tglTranslatef(-3.0,0.0,0.0);  \n\t\n\tglPushMatrix();\n\tglRotatef(45.0,0.0,0.0,1.0);\n\tglColor3f (0.0, 1.0, 0.0);  \n\tdrawSquare();              \t\t\t\t//中间左菱形\n\tglPopMatrix();\n   \n   \tglTranslatef(3.0,0.0,0.0); \n    \n\tglPushMatrix();\n\tglRotatef(45.0,0.0,0.0,1.0);\n\tglColor3f (0.0, 0.7, 0.0);  \n\tdrawSquare();              \t\t\t\t//中间中菱形\n\tglPopMatrix();\n\n\tglTranslatef(3.0,0.0,0.0); \n    \n\tglPushMatrix();\n\tglRotatef(45.0,0.0,0.0,1.0);\n\tglColor3f (0.0, 0.4, 0.0);  \n\tdrawSquare();              \t\t\t\t//中间右菱形\n\tglPopMatrix();\n    \n\tglPopMatrix();\n\n\tglTranslatef(0.0,-3.0,0.0);  \n\tglScalef(4.0,1.5,1.0); \n\tglColor3f (0.0, 0.0, 1.0);\n\tdrawSquare();    \t\t\t\t\t\t//下面蓝色矩形         \n\n\tglFlush ( );\n}\n\nvoid main (int argc, char** argv)\n{\n  \tglutInit (&argc, argv);                        \n  \tglutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);  \n  \tglutInitWindowPosition (0, 0);  \n  \tglutInitWindowSize (600, 600);      \n  \tglutCreateWindow (\"几何变换示例2\"); \n    \n  \tinit();                  \n  \tglutDisplayFunc (myDraw);\n  \tglutMainLoop();  \n}\n```\n程序运行结果：\n<img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-2D%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A22.png\" width=\"300\" align=center />\n\n图2\n\n<img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-2D%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A23.png\" width=\"300\" align=center />\n\n图3\n\n## 5．实验思考\n在绕任意点旋转时，若将相关代码改为如下：\n```\n清屏\nglMatrixMode(GL_MODELVIEW); //设置矩阵模式为模型变换模式，表示在世界坐标系下\nglLoadIdentity();   //将当前矩阵设置为单位矩阵\nglTranslatef(-cx,-cy,0);   //平移回去\t\nglRotatef(theta,0,0,1); //绕原点旋转ALPHA角度\t\nglTranslatef(cx,cy,0);  //平移回原点\ndrawSquare();\n```\n图形将变成怎样？试解释原因。","slug":"CG-Prj4-2D-Transformation","published":1,"date":"2020-01-19T08:28:10.740Z","updated":"2019-08-18T02:04:22.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers0550005r0akm4k2995v","content":"<h2 id=\"1．实验目的：\"><a href=\"#1．实验目的：\" class=\"headerlink\" title=\"1．实验目的：\"></a>1．实验目的：</h2><ul>\n<li>巩固对二维几何变换的认识与理解；</li>\n<li>学习OpenGL平移、旋转、缩放变换函数及其使用方法；</li>\n<li>学习基本图形变换与复合图形变换的方法；</li>\n<li>综合运用上述函数，设计复杂图形。</li>\n</ul>\n<h2 id=\"2．实验内容：\"><a href=\"#2．实验内容：\" class=\"headerlink\" title=\"2．实验内容：\"></a>2．实验内容：</h2><p>根据示范代码1，使用OpenGL平移、旋转、缩放变换函数来改写代码实现所要求的功能。示范代码1的代码运行结果为图1。</p>\n<p>（1） 使用glTranslatef()函数，实现图形平移，并结合glTranslatef()函数的不同参数输入，实现x，y和z方向的平移，将测试结果存为图1-3，与对应修改的平移函数代码一起保存至word实验文档中（20分钟）；</p>\n<p>（2） 使用glRotatef()函数，实现图形旋转，并结合glRotatef()函数的不同参数输入，实现x，y和z方向的旋转，将测试结果存为图4-6，与对应修改的旋转函数代码一起保存至word实验文档中（20分钟）；</p>\n<p>（3） 使用glScalef()函数，实现图形缩放，并结合glScalef()函数的不同参数输入，实现x，y和z方向的旋转，将测试结果存为图7-9，与对应修改的缩放函数代码一起保存至word实验文档中（20分钟）；</p>\n<p>（4）示范代码2，代码运行结果为图2，请参考它绘制如图3所示的图形，将绘图结果与代码保存至word实验文档中（30分钟）；</p>\n<p>（5） 整理word实验文档，将其命名为“序号-姓名-Prj4.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。</p>\n<h2 id=\"3．实验原理：\"><a href=\"#3．实验原理：\" class=\"headerlink\" title=\"3．实验原理：\"></a>3．实验原理：</h2><p>（1）OpenGL下的几何变换<br>在OpenGL的核心库中，每一种几何变换都有一个独立的函数，所有变换都在三维空间中定义。<br>平移矩阵构造函数为<code>glTranslate&lt;f,d&gt;(tx, ty, tz)</code>，作用是把当前矩阵和一个表示移动物体的矩阵相乘。tx、ty、tz指定这个移动物体的矩阵，它们可以是任意的实数值，后缀为f（单精度浮点float）或d（双精度浮点double），对于二维应用来说，tz=0.0。<br>旋转矩阵构造函数为<code>glRotate&lt;f,d&gt;(theta, vx, vy, vz)</code>，作用是把当前矩阵和一个表示旋转物体的矩阵相乘。theta，vx，vy，vz指定这个旋转物体的矩阵，物体将围绕(0,0,0)到(x,y,z)的直线以逆时针旋转，参数theta表示旋转的角度。向量v=(vx,vy,vz)的分量可以是任意的实数值，该向量用于定义通过坐标原点的旋转轴的方向，后缀为f（单精度浮点float）或d（双精度浮点double），对于二维旋转来说，vx=0.0，vy=0.0，vz=1.0。<br>缩放矩阵构造函数为<code>glScale&lt;f,d&gt;(sx, sy, sz)</code>，作用是把当前矩阵和一个表示缩放物体的矩阵相乘。sx，sy，sz指定这个缩放物体的矩阵，分别表示在x，y，z方向上的缩放比例，它们可以是任意的实数值，当缩放参数为负值时，该函数为反射矩阵，缩放相对于原点进行，后缀为f（单精度浮点float）或d（双精度浮点double）。<br>注意这里都是说“把当前矩阵和一个表示移动&lt;旋转, 缩放&gt;物体的矩阵相乘”，而不是直接说“这个函数就是旋转”或者“这个函数就是移动”，这是有原因的，马上就会讲到。<br>假设当前矩阵为单位矩阵，然后先乘以一个表示旋转的矩阵R，再乘以一个表示移动的矩阵T，最后得到的矩阵再乘上每一个顶点的坐标矩阵v。那么，经过变换得到的顶点坐标就是((RT)v)。由于矩阵乘法满足结合率，((RT)v) = R(Tv))，换句话说，实际上是先进行移动，然后进行旋转。即：实际变换的顺序与代码中写的顺序是相反的。由于“先移动后旋转”和“先旋转后移动”得到的结果很可能不同，初学的时候需要特别注意这一点。</p>\n<p>（2）OpenGL下的各种变换简介<br>我们生活在一个三维的世界，如果要观察一个物体，我们可以：<br>① 从不同的位置去观察它（人运动，选定某个位置去看）。（视图变换）<br>② 移动或者旋转它，当然了，如果它只是计算机里面的物体，我们还可以放大或缩小它（物体运动，让人看它的不同部分）。（模型变换）<br>③ 如果把物体画下来，我们可以选择是否需要一种“近大远小”的透视效果。另外，我们可能只希望看到物体的一部分，而不是全部（指定看的范围）。（投影变换）<br>④ 我们可能希望把整个看到的图形画下来，但它只占据纸张的一部分，而不是全部（指定在显示器窗口的那个位置显示）。（视口变换）<br>这些，都可以在OpenGL中实现。<br>从“相对移动”的观点来看，改变观察点的位置与方向和改变物体本身的位置与方向具有等效性。在OpenGL中，实现这两种功能甚至使用的是同样的函数。<br>由于模型和视图的变换都通过矩阵运算来实现，在进行变换前，应先设置当前操作的矩阵为“模型视图矩阵”。设置的方法是以GL_MODELVIEW为参数调用glMatrixMode函数，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glMatrixMode(GL_MODELVIEW);</span><br></pre></td></tr></table></figure></p>\n<p>该语句指定一个4×4的建模矩阵作为当前矩阵。<br>通常，我们需要在进行变换前把当前矩阵设置为单位矩阵。把当前矩阵设置为单位矩阵的函数为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glLoadIdentity();</span><br></pre></td></tr></table></figure></p>\n<p>我们在进行矩阵操作时，有可能需要先保存某个矩阵，过一段时间再恢复它。当我们需要保存时，调用glPushMatrix()函数，它相当于把当前矩阵压入堆栈。当需要恢复最近一次的保存时，调用glPopMatrix()函数，它相当于从堆栈栈顶弹出一个矩阵为当前矩阵。OpenGL规定堆栈至少可以容纳32个矩阵，某些OpenGL实现中，堆栈的容量实际上超过了32个。因此不必过于担心矩阵的容量问题。<br>通常，用这种先保存后恢复的措施，比先变换再逆变换要更方便、更快速。注意：模型视图矩阵和投影矩阵都有相应的堆栈。使用glMatrixMode来指定当前操作的究竟是模型视图矩阵还是投影矩阵。</p>\n<p>(3) 某图形绕任意点(cx, cy)旋转 $\\alpha$ 角。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">清屏</span><br><span class=\"line\">glMatrixMode(GL_MODELVIEW); //设置矩阵模式为模型变换模式，表示在世界坐标系下</span><br><span class=\"line\">glLoadIdentity();   //将当前矩阵设置为单位矩阵</span><br><span class=\"line\">glTranslatef(cx,cy,0);   //平移回去\t</span><br><span class=\"line\">glRotatef(alpha,0,0,1); //绕原点旋转ALPHA角度\t</span><br><span class=\"line\">glTranslatef(-cx,-cy,0);  //平移回原点</span><br><span class=\"line\">drawSquare();</span><br></pre></td></tr></table></figure></p>\n<p>图形绕任意点缩放方法的代码只需把旋转函数换为缩放函数即可，不再赘述。</p>\n<h2 id=\"4．示范代码：\"><a href=\"#4．示范代码：\" class=\"headerlink\" title=\"4．示范代码：\"></a>4．示范代码：</h2><h3 id=\"示范代码1\"><a href=\"#示范代码1\" class=\"headerlink\" title=\"示范代码1\"></a>示范代码1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">void init (void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glClearColor (1.0, 1.0, 1.0, 0.0);  </span><br><span class=\"line\">    glMatrixMode (GL_PROJECTION);  </span><br><span class=\"line\">    gluOrtho2D (-5.0, 5.0, -5.0, 5.0);</span><br><span class=\"line\">    //设置显示的范围是X:-5.0~5.0, Y:-5.0~5.0</span><br><span class=\"line\">    glMatrixMode (GL_MODELVIEW);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void drawSquare(void)\t\t\t\t\t\t//绘制中心在原点，边长为2的正方形</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglBegin (GL_POLYGON);\t\t\t\t\t//顶点指定需要按逆时针方向</span><br><span class=\"line\">\t   glVertex2f (-1.0f,-1.0f);\t\t\t//左下点</span><br><span class=\"line\">\t   glVertex2f (1.0f,-1.0f);\t\t\t\t//右下点</span><br><span class=\"line\">\t   glVertex2f (1.0f, 1.0f);\t\t\t\t//右上点</span><br><span class=\"line\">\t   glVertex2f (-1.0f,1.0f);\t\t\t\t//左上点</span><br><span class=\"line\">\tglEnd ( );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void myDraw (void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClear (GL_COLOR_BUFFER_BIT);\t\t\t//清空</span><br><span class=\"line\">\tglLoadIdentity();       \t\t\t\t\t//将当前矩阵设为单位矩阵</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tglColor3f (1.0, 0.0, 0.0); </span><br><span class=\"line\">\tdrawSquare();      \t\t\t\t\t\t//上面红色矩形</span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush ( );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void main (int argc, char** argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \tglutInit (&amp;argc, argv);                        </span><br><span class=\"line\">  \tglutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);  </span><br><span class=\"line\">  \tglutInitWindowPosition (0, 0);  </span><br><span class=\"line\">  \tglutInitWindowSize (600, 600);      </span><br><span class=\"line\">  \tglutCreateWindow (&quot;几何变换示例1&quot;); </span><br><span class=\"line\">    </span><br><span class=\"line\">  \tinit();                  </span><br><span class=\"line\">  \tglutDisplayFunc (myDraw);</span><br><span class=\"line\">  \tglutMainLoop();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果： <img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-2D%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A21.png\" width=\"300\" align=\"center\"></p>\n<p>图1</p>\n<h3 id=\"示范代码2\"><a href=\"#示范代码2\" class=\"headerlink\" title=\"示范代码2\"></a>示范代码2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">void init (void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glClearColor (1.0, 1.0, 1.0, 0.0);  </span><br><span class=\"line\">    glMatrixMode (GL_PROJECTION);  </span><br><span class=\"line\">    gluOrtho2D (-5.0, 5.0, -5.0, 5.0);</span><br><span class=\"line\">    //设置显示的范围是X:-5.0~5.0, Y:-5.0~5.0</span><br><span class=\"line\">    glMatrixMode (GL_MODELVIEW);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void drawSquare(void)\t\t\t\t\t\t//绘制中心在原点，边长为2的正方形</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglBegin (GL_POLYGON);\t\t\t\t\t//顶点指定需要按逆时针方向</span><br><span class=\"line\">\t   glVertex2f (-1.0f,-1.0f);\t\t\t//左下点</span><br><span class=\"line\">\t   glVertex2f (1.0f,-1.0f);\t\t\t\t//右下点</span><br><span class=\"line\">\t   glVertex2f (1.0f, 1.0f);\t\t\t\t//右上点</span><br><span class=\"line\">\t   glVertex2f (-1.0f,1.0f);\t\t\t\t//左上点</span><br><span class=\"line\">\tglEnd ( );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void myDraw (void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClear (GL_COLOR_BUFFER_BIT);\t\t\t//清空</span><br><span class=\"line\">\tglLoadIdentity();       \t\t\t\t\t//将当前矩阵设为单位矩阵</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tglPushMatrix();</span><br><span class=\"line\">\tglTranslatef(0.0f,2.0f,0.0f);</span><br><span class=\"line\">\tglScalef(3.0,0.5,1.0); </span><br><span class=\"line\">\tglColor3f (1.0, 0.0, 0.0); </span><br><span class=\"line\">\tdrawSquare();      \t\t\t\t\t\t//上面红色矩形</span><br><span class=\"line\">\tglPopMatrix();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglPushMatrix();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tglTranslatef(-3.0,0.0,0.0);  </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tglPushMatrix();</span><br><span class=\"line\">\tglRotatef(45.0,0.0,0.0,1.0);</span><br><span class=\"line\">\tglColor3f (0.0, 1.0, 0.0);  </span><br><span class=\"line\">\tdrawSquare();              \t\t\t\t//中间左菱形</span><br><span class=\"line\">\tglPopMatrix();</span><br><span class=\"line\">   </span><br><span class=\"line\">   \tglTranslatef(3.0,0.0,0.0); </span><br><span class=\"line\">    </span><br><span class=\"line\">\tglPushMatrix();</span><br><span class=\"line\">\tglRotatef(45.0,0.0,0.0,1.0);</span><br><span class=\"line\">\tglColor3f (0.0, 0.7, 0.0);  </span><br><span class=\"line\">\tdrawSquare();              \t\t\t\t//中间中菱形</span><br><span class=\"line\">\tglPopMatrix();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglTranslatef(3.0,0.0,0.0); </span><br><span class=\"line\">    </span><br><span class=\"line\">\tglPushMatrix();</span><br><span class=\"line\">\tglRotatef(45.0,0.0,0.0,1.0);</span><br><span class=\"line\">\tglColor3f (0.0, 0.4, 0.0);  </span><br><span class=\"line\">\tdrawSquare();              \t\t\t\t//中间右菱形</span><br><span class=\"line\">\tglPopMatrix();</span><br><span class=\"line\">    </span><br><span class=\"line\">\tglPopMatrix();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglTranslatef(0.0,-3.0,0.0);  </span><br><span class=\"line\">\tglScalef(4.0,1.5,1.0); </span><br><span class=\"line\">\tglColor3f (0.0, 0.0, 1.0);</span><br><span class=\"line\">\tdrawSquare();    \t\t\t\t\t\t//下面蓝色矩形         </span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush ( );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void main (int argc, char** argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \tglutInit (&amp;argc, argv);                        </span><br><span class=\"line\">  \tglutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);  </span><br><span class=\"line\">  \tglutInitWindowPosition (0, 0);  </span><br><span class=\"line\">  \tglutInitWindowSize (600, 600);      </span><br><span class=\"line\">  \tglutCreateWindow (&quot;几何变换示例2&quot;); </span><br><span class=\"line\">    </span><br><span class=\"line\">  \tinit();                  </span><br><span class=\"line\">  \tglutDisplayFunc (myDraw);</span><br><span class=\"line\">  \tglutMainLoop();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果：<br><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-2D%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A22.png\" width=\"300\" align=\"center\"></p>\n<p>图2</p>\n<p><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-2D%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A23.png\" width=\"300\" align=\"center\"></p>\n<p>图3</p>\n<h2 id=\"5．实验思考\"><a href=\"#5．实验思考\" class=\"headerlink\" title=\"5．实验思考\"></a>5．实验思考</h2><p>在绕任意点旋转时，若将相关代码改为如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">清屏</span><br><span class=\"line\">glMatrixMode(GL_MODELVIEW); //设置矩阵模式为模型变换模式，表示在世界坐标系下</span><br><span class=\"line\">glLoadIdentity();   //将当前矩阵设置为单位矩阵</span><br><span class=\"line\">glTranslatef(-cx,-cy,0);   //平移回去\t</span><br><span class=\"line\">glRotatef(theta,0,0,1); //绕原点旋转ALPHA角度\t</span><br><span class=\"line\">glTranslatef(cx,cy,0);  //平移回原点</span><br><span class=\"line\">drawSquare();</span><br></pre></td></tr></table></figure></p>\n<p>图形将变成怎样？试解释原因。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1．实验目的：\"><a href=\"#1．实验目的：\" class=\"headerlink\" title=\"1．实验目的：\"></a>1．实验目的：</h2><ul>\n<li>巩固对二维几何变换的认识与理解；</li>\n<li>学习OpenGL平移、旋转、缩放变换函数及其使用方法；</li>\n<li>学习基本图形变换与复合图形变换的方法；</li>\n<li>综合运用上述函数，设计复杂图形。</li>\n</ul>\n<h2 id=\"2．实验内容：\"><a href=\"#2．实验内容：\" class=\"headerlink\" title=\"2．实验内容：\"></a>2．实验内容：</h2><p>根据示范代码1，使用OpenGL平移、旋转、缩放变换函数来改写代码实现所要求的功能。示范代码1的代码运行结果为图1。</p>\n<p>（1） 使用glTranslatef()函数，实现图形平移，并结合glTranslatef()函数的不同参数输入，实现x，y和z方向的平移，将测试结果存为图1-3，与对应修改的平移函数代码一起保存至word实验文档中（20分钟）；</p>\n<p>（2） 使用glRotatef()函数，实现图形旋转，并结合glRotatef()函数的不同参数输入，实现x，y和z方向的旋转，将测试结果存为图4-6，与对应修改的旋转函数代码一起保存至word实验文档中（20分钟）；</p>\n<p>（3） 使用glScalef()函数，实现图形缩放，并结合glScalef()函数的不同参数输入，实现x，y和z方向的旋转，将测试结果存为图7-9，与对应修改的缩放函数代码一起保存至word实验文档中（20分钟）；</p>\n<p>（4）示范代码2，代码运行结果为图2，请参考它绘制如图3所示的图形，将绘图结果与代码保存至word实验文档中（30分钟）；</p>\n<p>（5） 整理word实验文档，将其命名为“序号-姓名-Prj4.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。</p>\n<h2 id=\"3．实验原理：\"><a href=\"#3．实验原理：\" class=\"headerlink\" title=\"3．实验原理：\"></a>3．实验原理：</h2><p>（1）OpenGL下的几何变换<br>在OpenGL的核心库中，每一种几何变换都有一个独立的函数，所有变换都在三维空间中定义。<br>平移矩阵构造函数为<code>glTranslate&lt;f,d&gt;(tx, ty, tz)</code>，作用是把当前矩阵和一个表示移动物体的矩阵相乘。tx、ty、tz指定这个移动物体的矩阵，它们可以是任意的实数值，后缀为f（单精度浮点float）或d（双精度浮点double），对于二维应用来说，tz=0.0。<br>旋转矩阵构造函数为<code>glRotate&lt;f,d&gt;(theta, vx, vy, vz)</code>，作用是把当前矩阵和一个表示旋转物体的矩阵相乘。theta，vx，vy，vz指定这个旋转物体的矩阵，物体将围绕(0,0,0)到(x,y,z)的直线以逆时针旋转，参数theta表示旋转的角度。向量v=(vx,vy,vz)的分量可以是任意的实数值，该向量用于定义通过坐标原点的旋转轴的方向，后缀为f（单精度浮点float）或d（双精度浮点double），对于二维旋转来说，vx=0.0，vy=0.0，vz=1.0。<br>缩放矩阵构造函数为<code>glScale&lt;f,d&gt;(sx, sy, sz)</code>，作用是把当前矩阵和一个表示缩放物体的矩阵相乘。sx，sy，sz指定这个缩放物体的矩阵，分别表示在x，y，z方向上的缩放比例，它们可以是任意的实数值，当缩放参数为负值时，该函数为反射矩阵，缩放相对于原点进行，后缀为f（单精度浮点float）或d（双精度浮点double）。<br>注意这里都是说“把当前矩阵和一个表示移动&lt;旋转, 缩放&gt;物体的矩阵相乘”，而不是直接说“这个函数就是旋转”或者“这个函数就是移动”，这是有原因的，马上就会讲到。<br>假设当前矩阵为单位矩阵，然后先乘以一个表示旋转的矩阵R，再乘以一个表示移动的矩阵T，最后得到的矩阵再乘上每一个顶点的坐标矩阵v。那么，经过变换得到的顶点坐标就是((RT)v)。由于矩阵乘法满足结合率，((RT)v) = R(Tv))，换句话说，实际上是先进行移动，然后进行旋转。即：实际变换的顺序与代码中写的顺序是相反的。由于“先移动后旋转”和“先旋转后移动”得到的结果很可能不同，初学的时候需要特别注意这一点。</p>\n<p>（2）OpenGL下的各种变换简介<br>我们生活在一个三维的世界，如果要观察一个物体，我们可以：<br>① 从不同的位置去观察它（人运动，选定某个位置去看）。（视图变换）<br>② 移动或者旋转它，当然了，如果它只是计算机里面的物体，我们还可以放大或缩小它（物体运动，让人看它的不同部分）。（模型变换）<br>③ 如果把物体画下来，我们可以选择是否需要一种“近大远小”的透视效果。另外，我们可能只希望看到物体的一部分，而不是全部（指定看的范围）。（投影变换）<br>④ 我们可能希望把整个看到的图形画下来，但它只占据纸张的一部分，而不是全部（指定在显示器窗口的那个位置显示）。（视口变换）<br>这些，都可以在OpenGL中实现。<br>从“相对移动”的观点来看，改变观察点的位置与方向和改变物体本身的位置与方向具有等效性。在OpenGL中，实现这两种功能甚至使用的是同样的函数。<br>由于模型和视图的变换都通过矩阵运算来实现，在进行变换前，应先设置当前操作的矩阵为“模型视图矩阵”。设置的方法是以GL_MODELVIEW为参数调用glMatrixMode函数，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glMatrixMode(GL_MODELVIEW);</span><br></pre></td></tr></table></figure></p>\n<p>该语句指定一个4×4的建模矩阵作为当前矩阵。<br>通常，我们需要在进行变换前把当前矩阵设置为单位矩阵。把当前矩阵设置为单位矩阵的函数为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glLoadIdentity();</span><br></pre></td></tr></table></figure></p>\n<p>我们在进行矩阵操作时，有可能需要先保存某个矩阵，过一段时间再恢复它。当我们需要保存时，调用glPushMatrix()函数，它相当于把当前矩阵压入堆栈。当需要恢复最近一次的保存时，调用glPopMatrix()函数，它相当于从堆栈栈顶弹出一个矩阵为当前矩阵。OpenGL规定堆栈至少可以容纳32个矩阵，某些OpenGL实现中，堆栈的容量实际上超过了32个。因此不必过于担心矩阵的容量问题。<br>通常，用这种先保存后恢复的措施，比先变换再逆变换要更方便、更快速。注意：模型视图矩阵和投影矩阵都有相应的堆栈。使用glMatrixMode来指定当前操作的究竟是模型视图矩阵还是投影矩阵。</p>\n<p>(3) 某图形绕任意点(cx, cy)旋转 $\\alpha$ 角。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">清屏</span><br><span class=\"line\">glMatrixMode(GL_MODELVIEW); //设置矩阵模式为模型变换模式，表示在世界坐标系下</span><br><span class=\"line\">glLoadIdentity();   //将当前矩阵设置为单位矩阵</span><br><span class=\"line\">glTranslatef(cx,cy,0);   //平移回去\t</span><br><span class=\"line\">glRotatef(alpha,0,0,1); //绕原点旋转ALPHA角度\t</span><br><span class=\"line\">glTranslatef(-cx,-cy,0);  //平移回原点</span><br><span class=\"line\">drawSquare();</span><br></pre></td></tr></table></figure></p>\n<p>图形绕任意点缩放方法的代码只需把旋转函数换为缩放函数即可，不再赘述。</p>\n<h2 id=\"4．示范代码：\"><a href=\"#4．示范代码：\" class=\"headerlink\" title=\"4．示范代码：\"></a>4．示范代码：</h2><h3 id=\"示范代码1\"><a href=\"#示范代码1\" class=\"headerlink\" title=\"示范代码1\"></a>示范代码1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">void init (void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glClearColor (1.0, 1.0, 1.0, 0.0);  </span><br><span class=\"line\">    glMatrixMode (GL_PROJECTION);  </span><br><span class=\"line\">    gluOrtho2D (-5.0, 5.0, -5.0, 5.0);</span><br><span class=\"line\">    //设置显示的范围是X:-5.0~5.0, Y:-5.0~5.0</span><br><span class=\"line\">    glMatrixMode (GL_MODELVIEW);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void drawSquare(void)\t\t\t\t\t\t//绘制中心在原点，边长为2的正方形</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglBegin (GL_POLYGON);\t\t\t\t\t//顶点指定需要按逆时针方向</span><br><span class=\"line\">\t   glVertex2f (-1.0f,-1.0f);\t\t\t//左下点</span><br><span class=\"line\">\t   glVertex2f (1.0f,-1.0f);\t\t\t\t//右下点</span><br><span class=\"line\">\t   glVertex2f (1.0f, 1.0f);\t\t\t\t//右上点</span><br><span class=\"line\">\t   glVertex2f (-1.0f,1.0f);\t\t\t\t//左上点</span><br><span class=\"line\">\tglEnd ( );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void myDraw (void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClear (GL_COLOR_BUFFER_BIT);\t\t\t//清空</span><br><span class=\"line\">\tglLoadIdentity();       \t\t\t\t\t//将当前矩阵设为单位矩阵</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tglColor3f (1.0, 0.0, 0.0); </span><br><span class=\"line\">\tdrawSquare();      \t\t\t\t\t\t//上面红色矩形</span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush ( );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void main (int argc, char** argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \tglutInit (&amp;argc, argv);                        </span><br><span class=\"line\">  \tglutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);  </span><br><span class=\"line\">  \tglutInitWindowPosition (0, 0);  </span><br><span class=\"line\">  \tglutInitWindowSize (600, 600);      </span><br><span class=\"line\">  \tglutCreateWindow (&quot;几何变换示例1&quot;); </span><br><span class=\"line\">    </span><br><span class=\"line\">  \tinit();                  </span><br><span class=\"line\">  \tglutDisplayFunc (myDraw);</span><br><span class=\"line\">  \tglutMainLoop();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果： <img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-2D%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A21.png\" width=\"300\" align=\"center\"></p>\n<p>图1</p>\n<h3 id=\"示范代码2\"><a href=\"#示范代码2\" class=\"headerlink\" title=\"示范代码2\"></a>示范代码2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">void init (void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glClearColor (1.0, 1.0, 1.0, 0.0);  </span><br><span class=\"line\">    glMatrixMode (GL_PROJECTION);  </span><br><span class=\"line\">    gluOrtho2D (-5.0, 5.0, -5.0, 5.0);</span><br><span class=\"line\">    //设置显示的范围是X:-5.0~5.0, Y:-5.0~5.0</span><br><span class=\"line\">    glMatrixMode (GL_MODELVIEW);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void drawSquare(void)\t\t\t\t\t\t//绘制中心在原点，边长为2的正方形</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglBegin (GL_POLYGON);\t\t\t\t\t//顶点指定需要按逆时针方向</span><br><span class=\"line\">\t   glVertex2f (-1.0f,-1.0f);\t\t\t//左下点</span><br><span class=\"line\">\t   glVertex2f (1.0f,-1.0f);\t\t\t\t//右下点</span><br><span class=\"line\">\t   glVertex2f (1.0f, 1.0f);\t\t\t\t//右上点</span><br><span class=\"line\">\t   glVertex2f (-1.0f,1.0f);\t\t\t\t//左上点</span><br><span class=\"line\">\tglEnd ( );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void myDraw (void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClear (GL_COLOR_BUFFER_BIT);\t\t\t//清空</span><br><span class=\"line\">\tglLoadIdentity();       \t\t\t\t\t//将当前矩阵设为单位矩阵</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tglPushMatrix();</span><br><span class=\"line\">\tglTranslatef(0.0f,2.0f,0.0f);</span><br><span class=\"line\">\tglScalef(3.0,0.5,1.0); </span><br><span class=\"line\">\tglColor3f (1.0, 0.0, 0.0); </span><br><span class=\"line\">\tdrawSquare();      \t\t\t\t\t\t//上面红色矩形</span><br><span class=\"line\">\tglPopMatrix();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglPushMatrix();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tglTranslatef(-3.0,0.0,0.0);  </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tglPushMatrix();</span><br><span class=\"line\">\tglRotatef(45.0,0.0,0.0,1.0);</span><br><span class=\"line\">\tglColor3f (0.0, 1.0, 0.0);  </span><br><span class=\"line\">\tdrawSquare();              \t\t\t\t//中间左菱形</span><br><span class=\"line\">\tglPopMatrix();</span><br><span class=\"line\">   </span><br><span class=\"line\">   \tglTranslatef(3.0,0.0,0.0); </span><br><span class=\"line\">    </span><br><span class=\"line\">\tglPushMatrix();</span><br><span class=\"line\">\tglRotatef(45.0,0.0,0.0,1.0);</span><br><span class=\"line\">\tglColor3f (0.0, 0.7, 0.0);  </span><br><span class=\"line\">\tdrawSquare();              \t\t\t\t//中间中菱形</span><br><span class=\"line\">\tglPopMatrix();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglTranslatef(3.0,0.0,0.0); </span><br><span class=\"line\">    </span><br><span class=\"line\">\tglPushMatrix();</span><br><span class=\"line\">\tglRotatef(45.0,0.0,0.0,1.0);</span><br><span class=\"line\">\tglColor3f (0.0, 0.4, 0.0);  </span><br><span class=\"line\">\tdrawSquare();              \t\t\t\t//中间右菱形</span><br><span class=\"line\">\tglPopMatrix();</span><br><span class=\"line\">    </span><br><span class=\"line\">\tglPopMatrix();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglTranslatef(0.0,-3.0,0.0);  </span><br><span class=\"line\">\tglScalef(4.0,1.5,1.0); </span><br><span class=\"line\">\tglColor3f (0.0, 0.0, 1.0);</span><br><span class=\"line\">\tdrawSquare();    \t\t\t\t\t\t//下面蓝色矩形         </span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush ( );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void main (int argc, char** argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \tglutInit (&amp;argc, argv);                        </span><br><span class=\"line\">  \tglutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);  </span><br><span class=\"line\">  \tglutInitWindowPosition (0, 0);  </span><br><span class=\"line\">  \tglutInitWindowSize (600, 600);      </span><br><span class=\"line\">  \tglutCreateWindow (&quot;几何变换示例2&quot;); </span><br><span class=\"line\">    </span><br><span class=\"line\">  \tinit();                  </span><br><span class=\"line\">  \tglutDisplayFunc (myDraw);</span><br><span class=\"line\">  \tglutMainLoop();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果：<br><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-2D%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A22.png\" width=\"300\" align=\"center\"></p>\n<p>图2</p>\n<p><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-2D%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A23.png\" width=\"300\" align=\"center\"></p>\n<p>图3</p>\n<h2 id=\"5．实验思考\"><a href=\"#5．实验思考\" class=\"headerlink\" title=\"5．实验思考\"></a>5．实验思考</h2><p>在绕任意点旋转时，若将相关代码改为如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">清屏</span><br><span class=\"line\">glMatrixMode(GL_MODELVIEW); //设置矩阵模式为模型变换模式，表示在世界坐标系下</span><br><span class=\"line\">glLoadIdentity();   //将当前矩阵设置为单位矩阵</span><br><span class=\"line\">glTranslatef(-cx,-cy,0);   //平移回去\t</span><br><span class=\"line\">glRotatef(theta,0,0,1); //绕原点旋转ALPHA角度\t</span><br><span class=\"line\">glTranslatef(cx,cy,0);  //平移回原点</span><br><span class=\"line\">drawSquare();</span><br></pre></td></tr></table></figure></p>\n<p>图形将变成怎样？试解释原因。</p>\n"},{"title":"实验5 立方体显示与变换","_content":"## 1．实验目的：\n\n- 通过示范代码1的立方体实例，理解巩固点的透视投影变换知识；\n- 通过示范代码1的立方体实例，了解OpenGL实体显示的基本原理与方法；\n- 通过示范代码2的立方体实例，学习OpenGL观察变换函数、投影变换函数的设置与使用方法；\n\n## 2．实验内容：\n\n在示范代码1基础上，按以下要求修改：\n\n（1） 修改代码，让立方体平移和旋转，产生两点透视和三点透视，将两种透视图结果存为图1-2，与对应修改的代码一起保存至word实验文档中（20分钟）；\n\n（2） 参考教材代码7.3.5，将代码中的立方体改为四棱锥，将测试结果存为图3，与对应修改的代码一起保存至word实验文档中（20分钟）；\n\n在示范代码2基础上，按以下要求修改：\n\n（3） 学习OpenGL观察变换函数gluLookAt的设置与使用方法，并在代码中修改参数产生两点透视和三点透视，将两种透视图结果存为图4-5，与对应修改的代码一起保存至word实验文档中（20分钟）；\n\n（4）学习OpenGL投影变换函数gluPerspective和glOrtho的设置与使用方法，启用gluPerspective函数并修改参数得到不同的透视图6-7，将图和代码保存；启用glOrtho并修改参数得到不同的正交投影图8-9，将图和代码保存（20分钟）；\n\n（5） 整理word实验文档，将其命名为“序号-姓名-Prj5.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。\n\n## 3．实验原理：\n\n在OpenGL程序中，观察变换必须出现在模型变换之前，但可以在绘图之前的任何时候执行投影变换和视口变换。\n\n（1）在给定的观察变换之前，应该使用glLoadIdentity函数把当前矩阵设置为单位矩阵。\n\n（2）在载入单位矩阵之后，使用gluLookAt函数指定观察变换。如果程序没有调用gluLookAt()，那么照相机会设定为一个默认的位置和方向。在默认的情况下，照相机位于原点，指向z轴负方向，朝上向量为(0,1,0)。\n\n（3）一般而言，display函数包括：观察变换 + 模型变换 + 绘制图形的函数（如ColorCube）。display会在窗口被移动或者原来先遮住这个窗口的东西被移开时，被重复调用，并经过适当变换，保证绘制的图形是按照希望的方式进行绘制。\n\n（4）在调用gluPerspective设置投影变换之前，在reshape函数中有一些准备工作：视口变换 + 投影变换 + 观察变换 + 模型变换。由于投影变换，视口变换共同决定了场景是如何映射到计算机的屏幕上的，而且它们都与屏幕的宽度、高度密切相关，因此应该放在reshape函数中。reshape函数会在窗口初次创建，移动或改变时被调用。\n\n总结起来，OpenGL中矩阵坐标之间的关系为：物体世界坐标→观察坐标→投影坐标→透视除法→规范化设备坐标→窗口坐标。\n\n（1）用观察变换函数gluLookAt(0.0,0.0,5.0,0.0,0.0,0.0,0.0,1.0,0.0)设置照相机的位置。把照相机放在(0,0,5)，镜头瞄准(0,0,0)，朝上向量定为(0,1,0)，朝上向量为照相机指定了一个唯一的方向。如果没有调用gluLookAt函数，照相机就设定一个默认的位置和方向，如上所述。glLoadIdentity函数把当前矩阵设置为单位矩阵。\n\n（2）使用模型变换的目的是设置模型的位置和方向。\n\n（3）投影变换，指定投影变换类似于为照相机选择镜头，可以认为这种变换的目的是确定视野，并因此确定哪些物体位于视野之内以及它们能够被看到的程度。除了考虑视野之外，投影变换确定物体如何投影到屏幕上，OpenGL提供了两种基本类型的投影：(i)透视投影：远大近小；(ii)正投影：不影响相对大小，一般用于工程当中。\n\n（4）视口变换。视口变换指定一个图像在屏幕上所占的区域，可参考[OpenGL的glViewport视口变换函数详解](https://www.cnblogs.com/1024Planet/p/5641410.html)。\n\n（5）绘制场景。\n\n## 4．示范代码：\n### (1) 示范代码1-通过透视投影变换计算投影点来显示立方体投影图\n```\n// Projection.cpp : Defines the entry point for the console application.\n//\n#include <GL/glut.h>\n#include <stdio.h>\n#include <math.h>\n\nstruct Matrix\n{\n\tdouble p[4][4];\n\tMatrix(int val = 1);//默认val =1 为单位阵，val =0 为零阵\n};\n\ndouble lx = 0, ly = 0, lz = -1;\ndouble phi = 0;\ndouble d = 5;\nMatrix mT, mR, mP, mTemp, mA;\nint flag = 1; // display cube with wireframe 1 or face mode 2\n\nGLfloat vertices0[8][3] = { {-1.0, -1.0, 1.0},{-1.0, 1.0, 1.0},{1.0,1.0, 1.0},{1.0,-1.0,1.0},  \n{-1.0,-1.0,-1.0}, {-1.0,1.0,-1.0},{1.0,1.0,-1.0}, {1.0,-1.0,-1.0} };\n\nGLfloat vertices1[8][2] = { {-1.0,-1.0},{1.0,-1.0},{1.0,1.0},{-1.0,1.0},\n{-1.0,-1.0},{1.0,-1.0},{1.0,1.0},{-1.0,1.0} };\n\nGLfloat colors[6][3] = { {1.0,1.0,1.0}, {1.0,0.0,0.0}, {1.0,1.0,0.0},\n{0.0,0.0,1.0}, {1.0,0.0,1.0}, {0.0,1.0,1.0} };\n\nMatrix::Matrix(int val)\n{\n\tfor (long i = 0; i < 4; i++) {\n\t\tfor (long j = 0; j < 4; j++) {\n\t\t\tif (i == j) p[i][j] = val;\n\t\t\telse p[i][j] = 0;\n\t\t}\n\t}\n}\n\nMatrix Multiply(Matrix& m1, Matrix& m2)\n{\n\tMatrix m(0);\n\tfor (int i = 0; i < 4; i++)\n\t\tfor (int j = 0; j < 4; j++)\n\t\t\tfor (int k = 0; k < 4; k++)\n\t\t\t\tm.p[i][j] += (m1.p[i][k] * m2.p[k][j]);\n\n\treturn m;\n}\n\nvoid InitParameter()//初始化参数\n{\n\tmT.p[3][0] = lx; mT.p[3][1] = ly; mT.p[3][2] = lz;\n\tmR.p[0][0] = cos(phi); mR.p[0][2] = -sin(phi); mR.p[2][0] = sin(phi); mR.p[2][2] = cos(phi);\n\n\tmP.p[2][2] = 0;\n\tmP.p[2][3] = -1 / d;\n\n\tmTemp = Multiply(mT, mR);\n\tmA = Multiply(mTemp, mP);\n}\n\nvoid Project(int num, GLfloat vertices0[][3], GLfloat vertices1[][2])//透视变换\n{\n\tfor (int i = 0; i < num; i++)\n\t{\n\t\tGLfloat ptH[4] = { vertices0[i][0], vertices0[i][1], vertices0[i][2], 1 };//齐次坐标\n\t\tGLfloat res[4] = {0, 0, 0, 0};\n\n\t\tfor (int j = 0; j < 4; j++)\n\t\t\tfor (int k = 0; k < 4; k++)\n\t\t\t\tres[j] += (ptH[k] * mA.p[k][j]);\n\n\t\tvertices1[i][0] = res[0] / res[3];\n\t\tvertices1[i][1] = res[1] / res[3];\n\t}\n}\n\nvoid Polygon(int clr, int a, int b, int c, int d)\n{\n\tglColor3fv(colors[clr]);\n\tif (flag == 1)\n\t\tglBegin(GL_LINE_LOOP);\n\telse\n\t\tglBegin(GL_POLYGON);\n\n\tglVertex2fv(vertices1[a]);\n\tglVertex2fv(vertices1[b]);\n\tglVertex2fv(vertices1[c]);\n\tglVertex2fv(vertices1[d]);\n\tglEnd();\n}\n\nvoid ColorCube(void)\n{\n\tPolygon(0, 0, 3, 2, 1);\n\tPolygon(1, 2, 3, 7, 6);\n\tPolygon(2, 0, 4, 7, 3);\n\tPolygon(3, 1, 2, 6, 5);\n\tPolygon(4, 4, 5, 6, 7);\n\tPolygon(5, 0, 1, 5, 4);\n\t//Polygon(0, 0, 3, 2, 1);\n}\n\nvoid myDisplay()\n{\n\tglClear(GL_COLOR_BUFFER_BIT);\n\tglColor3f(1.0f, 0.0f, 0.0f);\n\n\tInitParameter();\n\n\tProject(8, vertices0, vertices1);\n\tColorCube();\n\n\tglutSwapBuffers();\n}\n\nvoid Init()\n{\n\tglClearColor(0.0, 0.0, 0.0, 0.0);\n\tglShadeModel(GL_FLAT);\n\n\tprintf(\"Hello Cube!\\n\");\n}\n\nvoid Reshape(int w, int h)\n{\n\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);\n\tglMatrixMode(GL_PROJECTION);\n\tglLoadIdentity();\n\tglOrtho(-5, 5, -5, 5, -10, 10);\n}\n\nvoid keyboard(unsigned char key, int x, int y)\n{\n\tswitch (key)\n\t{\n\tcase '1':\n\t\tflag = 1;\n\t\tglutPostRedisplay();\n\t\tbreak;\n\tcase '2':\n\t\tflag = 2;\n\t\tglutPostRedisplay();\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n}\n\nint main(int argc, char *argv[])\n{\n\tglutInit(&argc, argv);\n\tglutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);\n\tglutInitWindowPosition(100, 100);\n\tglutInitWindowSize(600, 600);\n\tglutCreateWindow(\"Hello World!\");\n\n\tglutDisplayFunc(myDisplay);\n\tglutReshapeFunc(Reshape);\n\tglutKeyboardFunc(keyboard);\n\tglutMainLoop();\n\treturn 0;\n}\n```\n程序运行结果： <img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj5-Cube1.png\" width=\"300\" align=center />\n\n图1\n\n### (2) 示范代码2-通过OpenGL观察变换和投影变换函数来显示立方体投影图\n```\n#include <gl/glut.h>  \n\nint flag = 1;\nGLfloat rquad = 0;\nGLfloat vertices[8][3] = { {-1.0, -1.0, 1.0},{-1.0, 1.0, 1.0},{1.0,1.0, 1.0},{1.0,-1.0,1.0},\n{-1.0,-1.0,-1.0}, {-1.0,1.0,-1.0},{1.0,1.0,-1.0}, {1.0,-1.0,-1.0} };\n\nGLfloat colors[6][3] = { {1.0,1.0,1.0}, {1.0,0.0,0.0}, {1.0,1.0,0.0},\n{0.0,0.0,1.0}, {1.0,0.0,1.0}, {0.0,1.0,1.0} };\n\nvoid InitGL(GLvoid)\n{\n\tglShadeModel(GL_SMOOTH);\n\tglClearColor(0.0, 0.0, 0.0, 0.0);\n\tglClearDepth(1.0f);\n\tglEnable(GL_DEPTH_TEST);\n\tglDepthFunc(GL_LEQUAL);\n\tglEnable(GL_COLOR_MATERIAL);\n\tglHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);\n}\n\nvoid Polygon(int clr, int a, int b, int c, int d)\n{\n\tglColor3fv(colors[clr]);\n\tif (flag == 1)\n\t\tglBegin(GL_LINE_LOOP);\n\telse\n\t\tglBegin(GL_POLYGON);\n\n\tglVertex3fv(vertices[a]);\n\tglVertex3fv(vertices[b]);\n\tglVertex3fv(vertices[c]);\n\tglVertex3fv(vertices[d]);\n\tglEnd();\n}\n\nvoid ColorCube(void)\n{\n\tPolygon(0, 0, 3, 2, 1);\n\tPolygon(1, 2, 3, 7, 6);\n\tPolygon(2, 0, 4, 7, 3);\n\tPolygon(3, 1, 2, 6, 5);\n\tPolygon(4, 4, 5, 6, 7);\n\tPolygon(5, 0, 1, 5, 4);\n}\n\nvoid display(void)\n{\n\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\tglLoadIdentity();\n\tglPushMatrix();\n   \n\tgluLookAt(0, 0, 5, 0, 0, 0, 0, 1, 0);\n\tglTranslatef(0.0f, 0.0f, -1.0f);\t//平移\n\t//glRotatef(rquad, 1.0f, 0.0f, 0.0f);\t//旋转一个角度\n\tColorCube();\n\tglPopMatrix();\n\n\trquad -= 0.15f;\t//修改立方体的旋转角度\n\tglutSwapBuffers();\n}\nvoid reshape(int width, int height)\n{\n\tif (height == 0)\n\t\theight = 1;\n\tglViewport(0, 0, width, height);\n\tglMatrixMode(GL_PROJECTION);\n\tglLoadIdentity();\n\t//gluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.0f, 100.0f);\n\tgluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f);\n\t//if (width <= height)\n\t//\tglOrtho(-2.0, 2.0, -2.0*(GLfloat)height / (GLfloat)width, 2.0*(GLfloat)height / (GLfloat)width, 1.0, 20.0);\n\t//else\n\t//\tglOrtho(-2.0*(GLfloat)width / (GLfloat)height, 2.0*(GLfloat)width / (GLfloat)height, -2.0, 2.0, 1.0, 20.0);\n\tglMatrixMode(GL_MODELVIEW);\n\tglLoadIdentity();\n}\n\nvoid keyboard(unsigned char key, int x, int y)\n{\n\tswitch (key)\n\t{\n\tcase '1':\n\t\tflag = 1;\n\t\tglutPostRedisplay();\n\t\tbreak;\n\tcase '2':\n\t\tflag = 2;\n\t\tglutPostRedisplay();\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n}\n\nint main(int argc, char** argv)\n{\n\tglutInit(&argc, argv);\n\tglutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE);\n\tglutInitWindowSize(600, 600);\n\tglutCreateWindow(\"Hello Cube\");\n\tInitGL();\n\tglutDisplayFunc(display);\n\tglutReshapeFunc(reshape);\n\tglutIdleFunc(display);\n\tglutKeyboardFunc(keyboard);\n\tglutMainLoop();\n\n\treturn 0;\n}\n```\n程序运行结果：\n<img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj5-Cube2.png\" width=\"300\" align=center />\n\n图2\n\n\n## 5．实验思考\n在示范代码2中，若将`gluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f)`代码改为如下：\n\n`gluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.0f, 100.0f)`，\n\n点击按键1和2，切换显示方式，观察下显示效果有何不同，试解释原因。","source":"_posts/CG-Prj5-Cube.md","raw":"---\ntitle: 实验5 立方体显示与变换\ntags: [计算机图形学]\ncategories: 计算机图形学\n---\n## 1．实验目的：\n\n- 通过示范代码1的立方体实例，理解巩固点的透视投影变换知识；\n- 通过示范代码1的立方体实例，了解OpenGL实体显示的基本原理与方法；\n- 通过示范代码2的立方体实例，学习OpenGL观察变换函数、投影变换函数的设置与使用方法；\n\n## 2．实验内容：\n\n在示范代码1基础上，按以下要求修改：\n\n（1） 修改代码，让立方体平移和旋转，产生两点透视和三点透视，将两种透视图结果存为图1-2，与对应修改的代码一起保存至word实验文档中（20分钟）；\n\n（2） 参考教材代码7.3.5，将代码中的立方体改为四棱锥，将测试结果存为图3，与对应修改的代码一起保存至word实验文档中（20分钟）；\n\n在示范代码2基础上，按以下要求修改：\n\n（3） 学习OpenGL观察变换函数gluLookAt的设置与使用方法，并在代码中修改参数产生两点透视和三点透视，将两种透视图结果存为图4-5，与对应修改的代码一起保存至word实验文档中（20分钟）；\n\n（4）学习OpenGL投影变换函数gluPerspective和glOrtho的设置与使用方法，启用gluPerspective函数并修改参数得到不同的透视图6-7，将图和代码保存；启用glOrtho并修改参数得到不同的正交投影图8-9，将图和代码保存（20分钟）；\n\n（5） 整理word实验文档，将其命名为“序号-姓名-Prj5.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。\n\n## 3．实验原理：\n\n在OpenGL程序中，观察变换必须出现在模型变换之前，但可以在绘图之前的任何时候执行投影变换和视口变换。\n\n（1）在给定的观察变换之前，应该使用glLoadIdentity函数把当前矩阵设置为单位矩阵。\n\n（2）在载入单位矩阵之后，使用gluLookAt函数指定观察变换。如果程序没有调用gluLookAt()，那么照相机会设定为一个默认的位置和方向。在默认的情况下，照相机位于原点，指向z轴负方向，朝上向量为(0,1,0)。\n\n（3）一般而言，display函数包括：观察变换 + 模型变换 + 绘制图形的函数（如ColorCube）。display会在窗口被移动或者原来先遮住这个窗口的东西被移开时，被重复调用，并经过适当变换，保证绘制的图形是按照希望的方式进行绘制。\n\n（4）在调用gluPerspective设置投影变换之前，在reshape函数中有一些准备工作：视口变换 + 投影变换 + 观察变换 + 模型变换。由于投影变换，视口变换共同决定了场景是如何映射到计算机的屏幕上的，而且它们都与屏幕的宽度、高度密切相关，因此应该放在reshape函数中。reshape函数会在窗口初次创建，移动或改变时被调用。\n\n总结起来，OpenGL中矩阵坐标之间的关系为：物体世界坐标→观察坐标→投影坐标→透视除法→规范化设备坐标→窗口坐标。\n\n（1）用观察变换函数gluLookAt(0.0,0.0,5.0,0.0,0.0,0.0,0.0,1.0,0.0)设置照相机的位置。把照相机放在(0,0,5)，镜头瞄准(0,0,0)，朝上向量定为(0,1,0)，朝上向量为照相机指定了一个唯一的方向。如果没有调用gluLookAt函数，照相机就设定一个默认的位置和方向，如上所述。glLoadIdentity函数把当前矩阵设置为单位矩阵。\n\n（2）使用模型变换的目的是设置模型的位置和方向。\n\n（3）投影变换，指定投影变换类似于为照相机选择镜头，可以认为这种变换的目的是确定视野，并因此确定哪些物体位于视野之内以及它们能够被看到的程度。除了考虑视野之外，投影变换确定物体如何投影到屏幕上，OpenGL提供了两种基本类型的投影：(i)透视投影：远大近小；(ii)正投影：不影响相对大小，一般用于工程当中。\n\n（4）视口变换。视口变换指定一个图像在屏幕上所占的区域，可参考[OpenGL的glViewport视口变换函数详解](https://www.cnblogs.com/1024Planet/p/5641410.html)。\n\n（5）绘制场景。\n\n## 4．示范代码：\n### (1) 示范代码1-通过透视投影变换计算投影点来显示立方体投影图\n```\n// Projection.cpp : Defines the entry point for the console application.\n//\n#include <GL/glut.h>\n#include <stdio.h>\n#include <math.h>\n\nstruct Matrix\n{\n\tdouble p[4][4];\n\tMatrix(int val = 1);//默认val =1 为单位阵，val =0 为零阵\n};\n\ndouble lx = 0, ly = 0, lz = -1;\ndouble phi = 0;\ndouble d = 5;\nMatrix mT, mR, mP, mTemp, mA;\nint flag = 1; // display cube with wireframe 1 or face mode 2\n\nGLfloat vertices0[8][3] = { {-1.0, -1.0, 1.0},{-1.0, 1.0, 1.0},{1.0,1.0, 1.0},{1.0,-1.0,1.0},  \n{-1.0,-1.0,-1.0}, {-1.0,1.0,-1.0},{1.0,1.0,-1.0}, {1.0,-1.0,-1.0} };\n\nGLfloat vertices1[8][2] = { {-1.0,-1.0},{1.0,-1.0},{1.0,1.0},{-1.0,1.0},\n{-1.0,-1.0},{1.0,-1.0},{1.0,1.0},{-1.0,1.0} };\n\nGLfloat colors[6][3] = { {1.0,1.0,1.0}, {1.0,0.0,0.0}, {1.0,1.0,0.0},\n{0.0,0.0,1.0}, {1.0,0.0,1.0}, {0.0,1.0,1.0} };\n\nMatrix::Matrix(int val)\n{\n\tfor (long i = 0; i < 4; i++) {\n\t\tfor (long j = 0; j < 4; j++) {\n\t\t\tif (i == j) p[i][j] = val;\n\t\t\telse p[i][j] = 0;\n\t\t}\n\t}\n}\n\nMatrix Multiply(Matrix& m1, Matrix& m2)\n{\n\tMatrix m(0);\n\tfor (int i = 0; i < 4; i++)\n\t\tfor (int j = 0; j < 4; j++)\n\t\t\tfor (int k = 0; k < 4; k++)\n\t\t\t\tm.p[i][j] += (m1.p[i][k] * m2.p[k][j]);\n\n\treturn m;\n}\n\nvoid InitParameter()//初始化参数\n{\n\tmT.p[3][0] = lx; mT.p[3][1] = ly; mT.p[3][2] = lz;\n\tmR.p[0][0] = cos(phi); mR.p[0][2] = -sin(phi); mR.p[2][0] = sin(phi); mR.p[2][2] = cos(phi);\n\n\tmP.p[2][2] = 0;\n\tmP.p[2][3] = -1 / d;\n\n\tmTemp = Multiply(mT, mR);\n\tmA = Multiply(mTemp, mP);\n}\n\nvoid Project(int num, GLfloat vertices0[][3], GLfloat vertices1[][2])//透视变换\n{\n\tfor (int i = 0; i < num; i++)\n\t{\n\t\tGLfloat ptH[4] = { vertices0[i][0], vertices0[i][1], vertices0[i][2], 1 };//齐次坐标\n\t\tGLfloat res[4] = {0, 0, 0, 0};\n\n\t\tfor (int j = 0; j < 4; j++)\n\t\t\tfor (int k = 0; k < 4; k++)\n\t\t\t\tres[j] += (ptH[k] * mA.p[k][j]);\n\n\t\tvertices1[i][0] = res[0] / res[3];\n\t\tvertices1[i][1] = res[1] / res[3];\n\t}\n}\n\nvoid Polygon(int clr, int a, int b, int c, int d)\n{\n\tglColor3fv(colors[clr]);\n\tif (flag == 1)\n\t\tglBegin(GL_LINE_LOOP);\n\telse\n\t\tglBegin(GL_POLYGON);\n\n\tglVertex2fv(vertices1[a]);\n\tglVertex2fv(vertices1[b]);\n\tglVertex2fv(vertices1[c]);\n\tglVertex2fv(vertices1[d]);\n\tglEnd();\n}\n\nvoid ColorCube(void)\n{\n\tPolygon(0, 0, 3, 2, 1);\n\tPolygon(1, 2, 3, 7, 6);\n\tPolygon(2, 0, 4, 7, 3);\n\tPolygon(3, 1, 2, 6, 5);\n\tPolygon(4, 4, 5, 6, 7);\n\tPolygon(5, 0, 1, 5, 4);\n\t//Polygon(0, 0, 3, 2, 1);\n}\n\nvoid myDisplay()\n{\n\tglClear(GL_COLOR_BUFFER_BIT);\n\tglColor3f(1.0f, 0.0f, 0.0f);\n\n\tInitParameter();\n\n\tProject(8, vertices0, vertices1);\n\tColorCube();\n\n\tglutSwapBuffers();\n}\n\nvoid Init()\n{\n\tglClearColor(0.0, 0.0, 0.0, 0.0);\n\tglShadeModel(GL_FLAT);\n\n\tprintf(\"Hello Cube!\\n\");\n}\n\nvoid Reshape(int w, int h)\n{\n\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);\n\tglMatrixMode(GL_PROJECTION);\n\tglLoadIdentity();\n\tglOrtho(-5, 5, -5, 5, -10, 10);\n}\n\nvoid keyboard(unsigned char key, int x, int y)\n{\n\tswitch (key)\n\t{\n\tcase '1':\n\t\tflag = 1;\n\t\tglutPostRedisplay();\n\t\tbreak;\n\tcase '2':\n\t\tflag = 2;\n\t\tglutPostRedisplay();\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n}\n\nint main(int argc, char *argv[])\n{\n\tglutInit(&argc, argv);\n\tglutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);\n\tglutInitWindowPosition(100, 100);\n\tglutInitWindowSize(600, 600);\n\tglutCreateWindow(\"Hello World!\");\n\n\tglutDisplayFunc(myDisplay);\n\tglutReshapeFunc(Reshape);\n\tglutKeyboardFunc(keyboard);\n\tglutMainLoop();\n\treturn 0;\n}\n```\n程序运行结果： <img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj5-Cube1.png\" width=\"300\" align=center />\n\n图1\n\n### (2) 示范代码2-通过OpenGL观察变换和投影变换函数来显示立方体投影图\n```\n#include <gl/glut.h>  \n\nint flag = 1;\nGLfloat rquad = 0;\nGLfloat vertices[8][3] = { {-1.0, -1.0, 1.0},{-1.0, 1.0, 1.0},{1.0,1.0, 1.0},{1.0,-1.0,1.0},\n{-1.0,-1.0,-1.0}, {-1.0,1.0,-1.0},{1.0,1.0,-1.0}, {1.0,-1.0,-1.0} };\n\nGLfloat colors[6][3] = { {1.0,1.0,1.0}, {1.0,0.0,0.0}, {1.0,1.0,0.0},\n{0.0,0.0,1.0}, {1.0,0.0,1.0}, {0.0,1.0,1.0} };\n\nvoid InitGL(GLvoid)\n{\n\tglShadeModel(GL_SMOOTH);\n\tglClearColor(0.0, 0.0, 0.0, 0.0);\n\tglClearDepth(1.0f);\n\tglEnable(GL_DEPTH_TEST);\n\tglDepthFunc(GL_LEQUAL);\n\tglEnable(GL_COLOR_MATERIAL);\n\tglHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);\n}\n\nvoid Polygon(int clr, int a, int b, int c, int d)\n{\n\tglColor3fv(colors[clr]);\n\tif (flag == 1)\n\t\tglBegin(GL_LINE_LOOP);\n\telse\n\t\tglBegin(GL_POLYGON);\n\n\tglVertex3fv(vertices[a]);\n\tglVertex3fv(vertices[b]);\n\tglVertex3fv(vertices[c]);\n\tglVertex3fv(vertices[d]);\n\tglEnd();\n}\n\nvoid ColorCube(void)\n{\n\tPolygon(0, 0, 3, 2, 1);\n\tPolygon(1, 2, 3, 7, 6);\n\tPolygon(2, 0, 4, 7, 3);\n\tPolygon(3, 1, 2, 6, 5);\n\tPolygon(4, 4, 5, 6, 7);\n\tPolygon(5, 0, 1, 5, 4);\n}\n\nvoid display(void)\n{\n\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\tglLoadIdentity();\n\tglPushMatrix();\n   \n\tgluLookAt(0, 0, 5, 0, 0, 0, 0, 1, 0);\n\tglTranslatef(0.0f, 0.0f, -1.0f);\t//平移\n\t//glRotatef(rquad, 1.0f, 0.0f, 0.0f);\t//旋转一个角度\n\tColorCube();\n\tglPopMatrix();\n\n\trquad -= 0.15f;\t//修改立方体的旋转角度\n\tglutSwapBuffers();\n}\nvoid reshape(int width, int height)\n{\n\tif (height == 0)\n\t\theight = 1;\n\tglViewport(0, 0, width, height);\n\tglMatrixMode(GL_PROJECTION);\n\tglLoadIdentity();\n\t//gluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.0f, 100.0f);\n\tgluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f);\n\t//if (width <= height)\n\t//\tglOrtho(-2.0, 2.0, -2.0*(GLfloat)height / (GLfloat)width, 2.0*(GLfloat)height / (GLfloat)width, 1.0, 20.0);\n\t//else\n\t//\tglOrtho(-2.0*(GLfloat)width / (GLfloat)height, 2.0*(GLfloat)width / (GLfloat)height, -2.0, 2.0, 1.0, 20.0);\n\tglMatrixMode(GL_MODELVIEW);\n\tglLoadIdentity();\n}\n\nvoid keyboard(unsigned char key, int x, int y)\n{\n\tswitch (key)\n\t{\n\tcase '1':\n\t\tflag = 1;\n\t\tglutPostRedisplay();\n\t\tbreak;\n\tcase '2':\n\t\tflag = 2;\n\t\tglutPostRedisplay();\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n}\n\nint main(int argc, char** argv)\n{\n\tglutInit(&argc, argv);\n\tglutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE);\n\tglutInitWindowSize(600, 600);\n\tglutCreateWindow(\"Hello Cube\");\n\tInitGL();\n\tglutDisplayFunc(display);\n\tglutReshapeFunc(reshape);\n\tglutIdleFunc(display);\n\tglutKeyboardFunc(keyboard);\n\tglutMainLoop();\n\n\treturn 0;\n}\n```\n程序运行结果：\n<img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj5-Cube2.png\" width=\"300\" align=center />\n\n图2\n\n\n## 5．实验思考\n在示范代码2中，若将`gluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f)`代码改为如下：\n\n`gluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.0f, 100.0f)`，\n\n点击按键1和2，切换显示方式，观察下显示效果有何不同，试解释原因。","slug":"CG-Prj5-Cube","published":1,"date":"2020-01-19T08:28:10.743Z","updated":"2019-08-18T02:04:22.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers0560006r0aknyojgwhn","content":"<h2 id=\"1．实验目的：\"><a href=\"#1．实验目的：\" class=\"headerlink\" title=\"1．实验目的：\"></a>1．实验目的：</h2><ul>\n<li>通过示范代码1的立方体实例，理解巩固点的透视投影变换知识；</li>\n<li>通过示范代码1的立方体实例，了解OpenGL实体显示的基本原理与方法；</li>\n<li>通过示范代码2的立方体实例，学习OpenGL观察变换函数、投影变换函数的设置与使用方法；</li>\n</ul>\n<h2 id=\"2．实验内容：\"><a href=\"#2．实验内容：\" class=\"headerlink\" title=\"2．实验内容：\"></a>2．实验内容：</h2><p>在示范代码1基础上，按以下要求修改：</p>\n<p>（1） 修改代码，让立方体平移和旋转，产生两点透视和三点透视，将两种透视图结果存为图1-2，与对应修改的代码一起保存至word实验文档中（20分钟）；</p>\n<p>（2） 参考教材代码7.3.5，将代码中的立方体改为四棱锥，将测试结果存为图3，与对应修改的代码一起保存至word实验文档中（20分钟）；</p>\n<p>在示范代码2基础上，按以下要求修改：</p>\n<p>（3） 学习OpenGL观察变换函数gluLookAt的设置与使用方法，并在代码中修改参数产生两点透视和三点透视，将两种透视图结果存为图4-5，与对应修改的代码一起保存至word实验文档中（20分钟）；</p>\n<p>（4）学习OpenGL投影变换函数gluPerspective和glOrtho的设置与使用方法，启用gluPerspective函数并修改参数得到不同的透视图6-7，将图和代码保存；启用glOrtho并修改参数得到不同的正交投影图8-9，将图和代码保存（20分钟）；</p>\n<p>（5） 整理word实验文档，将其命名为“序号-姓名-Prj5.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。</p>\n<h2 id=\"3．实验原理：\"><a href=\"#3．实验原理：\" class=\"headerlink\" title=\"3．实验原理：\"></a>3．实验原理：</h2><p>在OpenGL程序中，观察变换必须出现在模型变换之前，但可以在绘图之前的任何时候执行投影变换和视口变换。</p>\n<p>（1）在给定的观察变换之前，应该使用glLoadIdentity函数把当前矩阵设置为单位矩阵。</p>\n<p>（2）在载入单位矩阵之后，使用gluLookAt函数指定观察变换。如果程序没有调用gluLookAt()，那么照相机会设定为一个默认的位置和方向。在默认的情况下，照相机位于原点，指向z轴负方向，朝上向量为(0,1,0)。</p>\n<p>（3）一般而言，display函数包括：观察变换 + 模型变换 + 绘制图形的函数（如ColorCube）。display会在窗口被移动或者原来先遮住这个窗口的东西被移开时，被重复调用，并经过适当变换，保证绘制的图形是按照希望的方式进行绘制。</p>\n<p>（4）在调用gluPerspective设置投影变换之前，在reshape函数中有一些准备工作：视口变换 + 投影变换 + 观察变换 + 模型变换。由于投影变换，视口变换共同决定了场景是如何映射到计算机的屏幕上的，而且它们都与屏幕的宽度、高度密切相关，因此应该放在reshape函数中。reshape函数会在窗口初次创建，移动或改变时被调用。</p>\n<p>总结起来，OpenGL中矩阵坐标之间的关系为：物体世界坐标→观察坐标→投影坐标→透视除法→规范化设备坐标→窗口坐标。</p>\n<p>（1）用观察变换函数gluLookAt(0.0,0.0,5.0,0.0,0.0,0.0,0.0,1.0,0.0)设置照相机的位置。把照相机放在(0,0,5)，镜头瞄准(0,0,0)，朝上向量定为(0,1,0)，朝上向量为照相机指定了一个唯一的方向。如果没有调用gluLookAt函数，照相机就设定一个默认的位置和方向，如上所述。glLoadIdentity函数把当前矩阵设置为单位矩阵。</p>\n<p>（2）使用模型变换的目的是设置模型的位置和方向。</p>\n<p>（3）投影变换，指定投影变换类似于为照相机选择镜头，可以认为这种变换的目的是确定视野，并因此确定哪些物体位于视野之内以及它们能够被看到的程度。除了考虑视野之外，投影变换确定物体如何投影到屏幕上，OpenGL提供了两种基本类型的投影：(i)透视投影：远大近小；(ii)正投影：不影响相对大小，一般用于工程当中。</p>\n<p>（4）视口变换。视口变换指定一个图像在屏幕上所占的区域，可参考<a href=\"https://www.cnblogs.com/1024Planet/p/5641410.html\" target=\"_blank\" rel=\"noopener\">OpenGL的glViewport视口变换函数详解</a>。</p>\n<p>（5）绘制场景。</p>\n<h2 id=\"4．示范代码：\"><a href=\"#4．示范代码：\" class=\"headerlink\" title=\"4．示范代码：\"></a>4．示范代码：</h2><h3 id=\"1-示范代码1-通过透视投影变换计算投影点来显示立方体投影图\"><a href=\"#1-示范代码1-通过透视投影变换计算投影点来显示立方体投影图\" class=\"headerlink\" title=\"(1) 示范代码1-通过透视投影变换计算投影点来显示立方体投影图\"></a>(1) 示范代码1-通过透视投影变换计算投影点来显示立方体投影图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Projection.cpp : Defines the entry point for the console application.</span><br><span class=\"line\">//</span><br><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;math.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Matrix</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdouble p[4][4];</span><br><span class=\"line\">\tMatrix(int val = 1);//默认val =1 为单位阵，val =0 为零阵</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">double lx = 0, ly = 0, lz = -1;</span><br><span class=\"line\">double phi = 0;</span><br><span class=\"line\">double d = 5;</span><br><span class=\"line\">Matrix mT, mR, mP, mTemp, mA;</span><br><span class=\"line\">int flag = 1; // display cube with wireframe 1 or face mode 2</span><br><span class=\"line\"></span><br><span class=\"line\">GLfloat vertices0[8][3] = &#123; &#123;-1.0, -1.0, 1.0&#125;,&#123;-1.0, 1.0, 1.0&#125;,&#123;1.0,1.0, 1.0&#125;,&#123;1.0,-1.0,1.0&#125;,  </span><br><span class=\"line\">&#123;-1.0,-1.0,-1.0&#125;, &#123;-1.0,1.0,-1.0&#125;,&#123;1.0,1.0,-1.0&#125;, &#123;1.0,-1.0,-1.0&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">GLfloat vertices1[8][2] = &#123; &#123;-1.0,-1.0&#125;,&#123;1.0,-1.0&#125;,&#123;1.0,1.0&#125;,&#123;-1.0,1.0&#125;,</span><br><span class=\"line\">&#123;-1.0,-1.0&#125;,&#123;1.0,-1.0&#125;,&#123;1.0,1.0&#125;,&#123;-1.0,1.0&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">GLfloat colors[6][3] = &#123; &#123;1.0,1.0,1.0&#125;, &#123;1.0,0.0,0.0&#125;, &#123;1.0,1.0,0.0&#125;,</span><br><span class=\"line\">&#123;0.0,0.0,1.0&#125;, &#123;1.0,0.0,1.0&#125;, &#123;0.0,1.0,1.0&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix::Matrix(int val)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfor (long i = 0; i &lt; 4; i++) &#123;</span><br><span class=\"line\">\t\tfor (long j = 0; j &lt; 4; j++) &#123;</span><br><span class=\"line\">\t\t\tif (i == j) p[i][j] = val;</span><br><span class=\"line\">\t\t\telse p[i][j] = 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix Multiply(Matrix&amp; m1, Matrix&amp; m2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tMatrix m(0);</span><br><span class=\"line\">\tfor (int i = 0; i &lt; 4; i++)</span><br><span class=\"line\">\t\tfor (int j = 0; j &lt; 4; j++)</span><br><span class=\"line\">\t\t\tfor (int k = 0; k &lt; 4; k++)</span><br><span class=\"line\">\t\t\t\tm.p[i][j] += (m1.p[i][k] * m2.p[k][j]);</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void InitParameter()//初始化参数</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tmT.p[3][0] = lx; mT.p[3][1] = ly; mT.p[3][2] = lz;</span><br><span class=\"line\">\tmR.p[0][0] = cos(phi); mR.p[0][2] = -sin(phi); mR.p[2][0] = sin(phi); mR.p[2][2] = cos(phi);</span><br><span class=\"line\"></span><br><span class=\"line\">\tmP.p[2][2] = 0;</span><br><span class=\"line\">\tmP.p[2][3] = -1 / d;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmTemp = Multiply(mT, mR);</span><br><span class=\"line\">\tmA = Multiply(mTemp, mP);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Project(int num, GLfloat vertices0[][3], GLfloat vertices1[][2])//透视变换</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfor (int i = 0; i &lt; num; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tGLfloat ptH[4] = &#123; vertices0[i][0], vertices0[i][1], vertices0[i][2], 1 &#125;;//齐次坐标</span><br><span class=\"line\">\t\tGLfloat res[4] = &#123;0, 0, 0, 0&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int j = 0; j &lt; 4; j++)</span><br><span class=\"line\">\t\t\tfor (int k = 0; k &lt; 4; k++)</span><br><span class=\"line\">\t\t\t\tres[j] += (ptH[k] * mA.p[k][j]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvertices1[i][0] = res[0] / res[3];</span><br><span class=\"line\">\t\tvertices1[i][1] = res[1] / res[3];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Polygon(int clr, int a, int b, int c, int d)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglColor3fv(colors[clr]);</span><br><span class=\"line\">\tif (flag == 1)</span><br><span class=\"line\">\t\tglBegin(GL_LINE_LOOP);</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t\tglBegin(GL_POLYGON);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglVertex2fv(vertices1[a]);</span><br><span class=\"line\">\tglVertex2fv(vertices1[b]);</span><br><span class=\"line\">\tglVertex2fv(vertices1[c]);</span><br><span class=\"line\">\tglVertex2fv(vertices1[d]);</span><br><span class=\"line\">\tglEnd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void ColorCube(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tPolygon(0, 0, 3, 2, 1);</span><br><span class=\"line\">\tPolygon(1, 2, 3, 7, 6);</span><br><span class=\"line\">\tPolygon(2, 0, 4, 7, 3);</span><br><span class=\"line\">\tPolygon(3, 1, 2, 6, 5);</span><br><span class=\"line\">\tPolygon(4, 4, 5, 6, 7);</span><br><span class=\"line\">\tPolygon(5, 0, 1, 5, 4);</span><br><span class=\"line\">\t//Polygon(0, 0, 3, 2, 1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void myDisplay()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">\tglColor3f(1.0f, 0.0f, 0.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">\tInitParameter();</span><br><span class=\"line\"></span><br><span class=\"line\">\tProject(8, vertices0, vertices1);</span><br><span class=\"line\">\tColorCube();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutSwapBuffers();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\">\tglShadeModel(GL_FLAT);</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintf(&quot;Hello Cube!\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Reshape(int w, int h)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);</span><br><span class=\"line\">\tglMatrixMode(GL_PROJECTION);</span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\">\tglOrtho(-5, 5, -5, 5, -10, 10);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void keyboard(unsigned char key, int x, int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tswitch (key)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tcase &apos;1&apos;:</span><br><span class=\"line\">\t\tflag = 1;</span><br><span class=\"line\">\t\tglutPostRedisplay();</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tcase &apos;2&apos;:</span><br><span class=\"line\">\t\tflag = 2;</span><br><span class=\"line\">\t\tglutPostRedisplay();</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\">\tglutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);</span><br><span class=\"line\">\tglutInitWindowPosition(100, 100);</span><br><span class=\"line\">\tglutInitWindowSize(600, 600);</span><br><span class=\"line\">\tglutCreateWindow(&quot;Hello World!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutDisplayFunc(myDisplay);</span><br><span class=\"line\">\tglutReshapeFunc(Reshape);</span><br><span class=\"line\">\tglutKeyboardFunc(keyboard);</span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果： <img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj5-Cube1.png\" width=\"300\" align=\"center\"></p>\n<p>图1</p>\n<h3 id=\"2-示范代码2-通过OpenGL观察变换和投影变换函数来显示立方体投影图\"><a href=\"#2-示范代码2-通过OpenGL观察变换和投影变换函数来显示立方体投影图\" class=\"headerlink\" title=\"(2) 示范代码2-通过OpenGL观察变换和投影变换函数来显示立方体投影图\"></a>(2) 示范代码2-通过OpenGL观察变换和投影变换函数来显示立方体投影图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;gl/glut.h&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">int flag = 1;</span><br><span class=\"line\">GLfloat rquad = 0;</span><br><span class=\"line\">GLfloat vertices[8][3] = &#123; &#123;-1.0, -1.0, 1.0&#125;,&#123;-1.0, 1.0, 1.0&#125;,&#123;1.0,1.0, 1.0&#125;,&#123;1.0,-1.0,1.0&#125;,</span><br><span class=\"line\">&#123;-1.0,-1.0,-1.0&#125;, &#123;-1.0,1.0,-1.0&#125;,&#123;1.0,1.0,-1.0&#125;, &#123;1.0,-1.0,-1.0&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">GLfloat colors[6][3] = &#123; &#123;1.0,1.0,1.0&#125;, &#123;1.0,0.0,0.0&#125;, &#123;1.0,1.0,0.0&#125;,</span><br><span class=\"line\">&#123;0.0,0.0,1.0&#125;, &#123;1.0,0.0,1.0&#125;, &#123;0.0,1.0,1.0&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">void InitGL(GLvoid)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglShadeModel(GL_SMOOTH);</span><br><span class=\"line\">\tglClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\">\tglClearDepth(1.0f);</span><br><span class=\"line\">\tglEnable(GL_DEPTH_TEST);</span><br><span class=\"line\">\tglDepthFunc(GL_LEQUAL);</span><br><span class=\"line\">\tglEnable(GL_COLOR_MATERIAL);</span><br><span class=\"line\">\tglHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Polygon(int clr, int a, int b, int c, int d)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglColor3fv(colors[clr]);</span><br><span class=\"line\">\tif (flag == 1)</span><br><span class=\"line\">\t\tglBegin(GL_LINE_LOOP);</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t\tglBegin(GL_POLYGON);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglVertex3fv(vertices[a]);</span><br><span class=\"line\">\tglVertex3fv(vertices[b]);</span><br><span class=\"line\">\tglVertex3fv(vertices[c]);</span><br><span class=\"line\">\tglVertex3fv(vertices[d]);</span><br><span class=\"line\">\tglEnd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void ColorCube(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tPolygon(0, 0, 3, 2, 1);</span><br><span class=\"line\">\tPolygon(1, 2, 3, 7, 6);</span><br><span class=\"line\">\tPolygon(2, 0, 4, 7, 3);</span><br><span class=\"line\">\tPolygon(3, 1, 2, 6, 5);</span><br><span class=\"line\">\tPolygon(4, 4, 5, 6, 7);</span><br><span class=\"line\">\tPolygon(5, 0, 1, 5, 4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void display(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\">\tglPushMatrix();</span><br><span class=\"line\">   </span><br><span class=\"line\">\tgluLookAt(0, 0, 5, 0, 0, 0, 0, 1, 0);</span><br><span class=\"line\">\tglTranslatef(0.0f, 0.0f, -1.0f);\t//平移</span><br><span class=\"line\">\t//glRotatef(rquad, 1.0f, 0.0f, 0.0f);\t//旋转一个角度</span><br><span class=\"line\">\tColorCube();</span><br><span class=\"line\">\tglPopMatrix();</span><br><span class=\"line\"></span><br><span class=\"line\">\trquad -= 0.15f;\t//修改立方体的旋转角度</span><br><span class=\"line\">\tglutSwapBuffers();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void reshape(int width, int height)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif (height == 0)</span><br><span class=\"line\">\t\theight = 1;</span><br><span class=\"line\">\tglViewport(0, 0, width, height);</span><br><span class=\"line\">\tglMatrixMode(GL_PROJECTION);</span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\">\t//gluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.0f, 100.0f);</span><br><span class=\"line\">\tgluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f);</span><br><span class=\"line\">\t//if (width &lt;= height)</span><br><span class=\"line\">\t//\tglOrtho(-2.0, 2.0, -2.0*(GLfloat)height / (GLfloat)width, 2.0*(GLfloat)height / (GLfloat)width, 1.0, 20.0);</span><br><span class=\"line\">\t//else</span><br><span class=\"line\">\t//\tglOrtho(-2.0*(GLfloat)width / (GLfloat)height, 2.0*(GLfloat)width / (GLfloat)height, -2.0, 2.0, 1.0, 20.0);</span><br><span class=\"line\">\tglMatrixMode(GL_MODELVIEW);</span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void keyboard(unsigned char key, int x, int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tswitch (key)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tcase &apos;1&apos;:</span><br><span class=\"line\">\t\tflag = 1;</span><br><span class=\"line\">\t\tglutPostRedisplay();</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tcase &apos;2&apos;:</span><br><span class=\"line\">\t\tflag = 2;</span><br><span class=\"line\">\t\tglutPostRedisplay();</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char** argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\">\tglutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE);</span><br><span class=\"line\">\tglutInitWindowSize(600, 600);</span><br><span class=\"line\">\tglutCreateWindow(&quot;Hello Cube&quot;);</span><br><span class=\"line\">\tInitGL();</span><br><span class=\"line\">\tglutDisplayFunc(display);</span><br><span class=\"line\">\tglutReshapeFunc(reshape);</span><br><span class=\"line\">\tglutIdleFunc(display);</span><br><span class=\"line\">\tglutKeyboardFunc(keyboard);</span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果：<br><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj5-Cube2.png\" width=\"300\" align=\"center\"></p>\n<p>图2</p>\n<h2 id=\"5．实验思考\"><a href=\"#5．实验思考\" class=\"headerlink\" title=\"5．实验思考\"></a>5．实验思考</h2><p>在示范代码2中，若将<code>gluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f)</code>代码改为如下：</p>\n<p><code>gluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.0f, 100.0f)</code>，</p>\n<p>点击按键1和2，切换显示方式，观察下显示效果有何不同，试解释原因。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1．实验目的：\"><a href=\"#1．实验目的：\" class=\"headerlink\" title=\"1．实验目的：\"></a>1．实验目的：</h2><ul>\n<li>通过示范代码1的立方体实例，理解巩固点的透视投影变换知识；</li>\n<li>通过示范代码1的立方体实例，了解OpenGL实体显示的基本原理与方法；</li>\n<li>通过示范代码2的立方体实例，学习OpenGL观察变换函数、投影变换函数的设置与使用方法；</li>\n</ul>\n<h2 id=\"2．实验内容：\"><a href=\"#2．实验内容：\" class=\"headerlink\" title=\"2．实验内容：\"></a>2．实验内容：</h2><p>在示范代码1基础上，按以下要求修改：</p>\n<p>（1） 修改代码，让立方体平移和旋转，产生两点透视和三点透视，将两种透视图结果存为图1-2，与对应修改的代码一起保存至word实验文档中（20分钟）；</p>\n<p>（2） 参考教材代码7.3.5，将代码中的立方体改为四棱锥，将测试结果存为图3，与对应修改的代码一起保存至word实验文档中（20分钟）；</p>\n<p>在示范代码2基础上，按以下要求修改：</p>\n<p>（3） 学习OpenGL观察变换函数gluLookAt的设置与使用方法，并在代码中修改参数产生两点透视和三点透视，将两种透视图结果存为图4-5，与对应修改的代码一起保存至word实验文档中（20分钟）；</p>\n<p>（4）学习OpenGL投影变换函数gluPerspective和glOrtho的设置与使用方法，启用gluPerspective函数并修改参数得到不同的透视图6-7，将图和代码保存；启用glOrtho并修改参数得到不同的正交投影图8-9，将图和代码保存（20分钟）；</p>\n<p>（5） 整理word实验文档，将其命名为“序号-姓名-Prj5.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。</p>\n<h2 id=\"3．实验原理：\"><a href=\"#3．实验原理：\" class=\"headerlink\" title=\"3．实验原理：\"></a>3．实验原理：</h2><p>在OpenGL程序中，观察变换必须出现在模型变换之前，但可以在绘图之前的任何时候执行投影变换和视口变换。</p>\n<p>（1）在给定的观察变换之前，应该使用glLoadIdentity函数把当前矩阵设置为单位矩阵。</p>\n<p>（2）在载入单位矩阵之后，使用gluLookAt函数指定观察变换。如果程序没有调用gluLookAt()，那么照相机会设定为一个默认的位置和方向。在默认的情况下，照相机位于原点，指向z轴负方向，朝上向量为(0,1,0)。</p>\n<p>（3）一般而言，display函数包括：观察变换 + 模型变换 + 绘制图形的函数（如ColorCube）。display会在窗口被移动或者原来先遮住这个窗口的东西被移开时，被重复调用，并经过适当变换，保证绘制的图形是按照希望的方式进行绘制。</p>\n<p>（4）在调用gluPerspective设置投影变换之前，在reshape函数中有一些准备工作：视口变换 + 投影变换 + 观察变换 + 模型变换。由于投影变换，视口变换共同决定了场景是如何映射到计算机的屏幕上的，而且它们都与屏幕的宽度、高度密切相关，因此应该放在reshape函数中。reshape函数会在窗口初次创建，移动或改变时被调用。</p>\n<p>总结起来，OpenGL中矩阵坐标之间的关系为：物体世界坐标→观察坐标→投影坐标→透视除法→规范化设备坐标→窗口坐标。</p>\n<p>（1）用观察变换函数gluLookAt(0.0,0.0,5.0,0.0,0.0,0.0,0.0,1.0,0.0)设置照相机的位置。把照相机放在(0,0,5)，镜头瞄准(0,0,0)，朝上向量定为(0,1,0)，朝上向量为照相机指定了一个唯一的方向。如果没有调用gluLookAt函数，照相机就设定一个默认的位置和方向，如上所述。glLoadIdentity函数把当前矩阵设置为单位矩阵。</p>\n<p>（2）使用模型变换的目的是设置模型的位置和方向。</p>\n<p>（3）投影变换，指定投影变换类似于为照相机选择镜头，可以认为这种变换的目的是确定视野，并因此确定哪些物体位于视野之内以及它们能够被看到的程度。除了考虑视野之外，投影变换确定物体如何投影到屏幕上，OpenGL提供了两种基本类型的投影：(i)透视投影：远大近小；(ii)正投影：不影响相对大小，一般用于工程当中。</p>\n<p>（4）视口变换。视口变换指定一个图像在屏幕上所占的区域，可参考<a href=\"https://www.cnblogs.com/1024Planet/p/5641410.html\" target=\"_blank\" rel=\"noopener\">OpenGL的glViewport视口变换函数详解</a>。</p>\n<p>（5）绘制场景。</p>\n<h2 id=\"4．示范代码：\"><a href=\"#4．示范代码：\" class=\"headerlink\" title=\"4．示范代码：\"></a>4．示范代码：</h2><h3 id=\"1-示范代码1-通过透视投影变换计算投影点来显示立方体投影图\"><a href=\"#1-示范代码1-通过透视投影变换计算投影点来显示立方体投影图\" class=\"headerlink\" title=\"(1) 示范代码1-通过透视投影变换计算投影点来显示立方体投影图\"></a>(1) 示范代码1-通过透视投影变换计算投影点来显示立方体投影图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Projection.cpp : Defines the entry point for the console application.</span><br><span class=\"line\">//</span><br><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;math.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Matrix</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdouble p[4][4];</span><br><span class=\"line\">\tMatrix(int val = 1);//默认val =1 为单位阵，val =0 为零阵</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">double lx = 0, ly = 0, lz = -1;</span><br><span class=\"line\">double phi = 0;</span><br><span class=\"line\">double d = 5;</span><br><span class=\"line\">Matrix mT, mR, mP, mTemp, mA;</span><br><span class=\"line\">int flag = 1; // display cube with wireframe 1 or face mode 2</span><br><span class=\"line\"></span><br><span class=\"line\">GLfloat vertices0[8][3] = &#123; &#123;-1.0, -1.0, 1.0&#125;,&#123;-1.0, 1.0, 1.0&#125;,&#123;1.0,1.0, 1.0&#125;,&#123;1.0,-1.0,1.0&#125;,  </span><br><span class=\"line\">&#123;-1.0,-1.0,-1.0&#125;, &#123;-1.0,1.0,-1.0&#125;,&#123;1.0,1.0,-1.0&#125;, &#123;1.0,-1.0,-1.0&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">GLfloat vertices1[8][2] = &#123; &#123;-1.0,-1.0&#125;,&#123;1.0,-1.0&#125;,&#123;1.0,1.0&#125;,&#123;-1.0,1.0&#125;,</span><br><span class=\"line\">&#123;-1.0,-1.0&#125;,&#123;1.0,-1.0&#125;,&#123;1.0,1.0&#125;,&#123;-1.0,1.0&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">GLfloat colors[6][3] = &#123; &#123;1.0,1.0,1.0&#125;, &#123;1.0,0.0,0.0&#125;, &#123;1.0,1.0,0.0&#125;,</span><br><span class=\"line\">&#123;0.0,0.0,1.0&#125;, &#123;1.0,0.0,1.0&#125;, &#123;0.0,1.0,1.0&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix::Matrix(int val)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfor (long i = 0; i &lt; 4; i++) &#123;</span><br><span class=\"line\">\t\tfor (long j = 0; j &lt; 4; j++) &#123;</span><br><span class=\"line\">\t\t\tif (i == j) p[i][j] = val;</span><br><span class=\"line\">\t\t\telse p[i][j] = 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix Multiply(Matrix&amp; m1, Matrix&amp; m2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tMatrix m(0);</span><br><span class=\"line\">\tfor (int i = 0; i &lt; 4; i++)</span><br><span class=\"line\">\t\tfor (int j = 0; j &lt; 4; j++)</span><br><span class=\"line\">\t\t\tfor (int k = 0; k &lt; 4; k++)</span><br><span class=\"line\">\t\t\t\tm.p[i][j] += (m1.p[i][k] * m2.p[k][j]);</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void InitParameter()//初始化参数</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tmT.p[3][0] = lx; mT.p[3][1] = ly; mT.p[3][2] = lz;</span><br><span class=\"line\">\tmR.p[0][0] = cos(phi); mR.p[0][2] = -sin(phi); mR.p[2][0] = sin(phi); mR.p[2][2] = cos(phi);</span><br><span class=\"line\"></span><br><span class=\"line\">\tmP.p[2][2] = 0;</span><br><span class=\"line\">\tmP.p[2][3] = -1 / d;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmTemp = Multiply(mT, mR);</span><br><span class=\"line\">\tmA = Multiply(mTemp, mP);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Project(int num, GLfloat vertices0[][3], GLfloat vertices1[][2])//透视变换</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfor (int i = 0; i &lt; num; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tGLfloat ptH[4] = &#123; vertices0[i][0], vertices0[i][1], vertices0[i][2], 1 &#125;;//齐次坐标</span><br><span class=\"line\">\t\tGLfloat res[4] = &#123;0, 0, 0, 0&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int j = 0; j &lt; 4; j++)</span><br><span class=\"line\">\t\t\tfor (int k = 0; k &lt; 4; k++)</span><br><span class=\"line\">\t\t\t\tres[j] += (ptH[k] * mA.p[k][j]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvertices1[i][0] = res[0] / res[3];</span><br><span class=\"line\">\t\tvertices1[i][1] = res[1] / res[3];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Polygon(int clr, int a, int b, int c, int d)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglColor3fv(colors[clr]);</span><br><span class=\"line\">\tif (flag == 1)</span><br><span class=\"line\">\t\tglBegin(GL_LINE_LOOP);</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t\tglBegin(GL_POLYGON);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglVertex2fv(vertices1[a]);</span><br><span class=\"line\">\tglVertex2fv(vertices1[b]);</span><br><span class=\"line\">\tglVertex2fv(vertices1[c]);</span><br><span class=\"line\">\tglVertex2fv(vertices1[d]);</span><br><span class=\"line\">\tglEnd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void ColorCube(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tPolygon(0, 0, 3, 2, 1);</span><br><span class=\"line\">\tPolygon(1, 2, 3, 7, 6);</span><br><span class=\"line\">\tPolygon(2, 0, 4, 7, 3);</span><br><span class=\"line\">\tPolygon(3, 1, 2, 6, 5);</span><br><span class=\"line\">\tPolygon(4, 4, 5, 6, 7);</span><br><span class=\"line\">\tPolygon(5, 0, 1, 5, 4);</span><br><span class=\"line\">\t//Polygon(0, 0, 3, 2, 1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void myDisplay()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">\tglColor3f(1.0f, 0.0f, 0.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">\tInitParameter();</span><br><span class=\"line\"></span><br><span class=\"line\">\tProject(8, vertices0, vertices1);</span><br><span class=\"line\">\tColorCube();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutSwapBuffers();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\">\tglShadeModel(GL_FLAT);</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintf(&quot;Hello Cube!\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Reshape(int w, int h)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);</span><br><span class=\"line\">\tglMatrixMode(GL_PROJECTION);</span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\">\tglOrtho(-5, 5, -5, 5, -10, 10);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void keyboard(unsigned char key, int x, int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tswitch (key)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tcase &apos;1&apos;:</span><br><span class=\"line\">\t\tflag = 1;</span><br><span class=\"line\">\t\tglutPostRedisplay();</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tcase &apos;2&apos;:</span><br><span class=\"line\">\t\tflag = 2;</span><br><span class=\"line\">\t\tglutPostRedisplay();</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\">\tglutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);</span><br><span class=\"line\">\tglutInitWindowPosition(100, 100);</span><br><span class=\"line\">\tglutInitWindowSize(600, 600);</span><br><span class=\"line\">\tglutCreateWindow(&quot;Hello World!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutDisplayFunc(myDisplay);</span><br><span class=\"line\">\tglutReshapeFunc(Reshape);</span><br><span class=\"line\">\tglutKeyboardFunc(keyboard);</span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果： <img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj5-Cube1.png\" width=\"300\" align=\"center\"></p>\n<p>图1</p>\n<h3 id=\"2-示范代码2-通过OpenGL观察变换和投影变换函数来显示立方体投影图\"><a href=\"#2-示范代码2-通过OpenGL观察变换和投影变换函数来显示立方体投影图\" class=\"headerlink\" title=\"(2) 示范代码2-通过OpenGL观察变换和投影变换函数来显示立方体投影图\"></a>(2) 示范代码2-通过OpenGL观察变换和投影变换函数来显示立方体投影图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;gl/glut.h&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">int flag = 1;</span><br><span class=\"line\">GLfloat rquad = 0;</span><br><span class=\"line\">GLfloat vertices[8][3] = &#123; &#123;-1.0, -1.0, 1.0&#125;,&#123;-1.0, 1.0, 1.0&#125;,&#123;1.0,1.0, 1.0&#125;,&#123;1.0,-1.0,1.0&#125;,</span><br><span class=\"line\">&#123;-1.0,-1.0,-1.0&#125;, &#123;-1.0,1.0,-1.0&#125;,&#123;1.0,1.0,-1.0&#125;, &#123;1.0,-1.0,-1.0&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">GLfloat colors[6][3] = &#123; &#123;1.0,1.0,1.0&#125;, &#123;1.0,0.0,0.0&#125;, &#123;1.0,1.0,0.0&#125;,</span><br><span class=\"line\">&#123;0.0,0.0,1.0&#125;, &#123;1.0,0.0,1.0&#125;, &#123;0.0,1.0,1.0&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">void InitGL(GLvoid)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglShadeModel(GL_SMOOTH);</span><br><span class=\"line\">\tglClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\">\tglClearDepth(1.0f);</span><br><span class=\"line\">\tglEnable(GL_DEPTH_TEST);</span><br><span class=\"line\">\tglDepthFunc(GL_LEQUAL);</span><br><span class=\"line\">\tglEnable(GL_COLOR_MATERIAL);</span><br><span class=\"line\">\tglHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Polygon(int clr, int a, int b, int c, int d)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglColor3fv(colors[clr]);</span><br><span class=\"line\">\tif (flag == 1)</span><br><span class=\"line\">\t\tglBegin(GL_LINE_LOOP);</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t\tglBegin(GL_POLYGON);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglVertex3fv(vertices[a]);</span><br><span class=\"line\">\tglVertex3fv(vertices[b]);</span><br><span class=\"line\">\tglVertex3fv(vertices[c]);</span><br><span class=\"line\">\tglVertex3fv(vertices[d]);</span><br><span class=\"line\">\tglEnd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void ColorCube(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tPolygon(0, 0, 3, 2, 1);</span><br><span class=\"line\">\tPolygon(1, 2, 3, 7, 6);</span><br><span class=\"line\">\tPolygon(2, 0, 4, 7, 3);</span><br><span class=\"line\">\tPolygon(3, 1, 2, 6, 5);</span><br><span class=\"line\">\tPolygon(4, 4, 5, 6, 7);</span><br><span class=\"line\">\tPolygon(5, 0, 1, 5, 4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void display(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\">\tglPushMatrix();</span><br><span class=\"line\">   </span><br><span class=\"line\">\tgluLookAt(0, 0, 5, 0, 0, 0, 0, 1, 0);</span><br><span class=\"line\">\tglTranslatef(0.0f, 0.0f, -1.0f);\t//平移</span><br><span class=\"line\">\t//glRotatef(rquad, 1.0f, 0.0f, 0.0f);\t//旋转一个角度</span><br><span class=\"line\">\tColorCube();</span><br><span class=\"line\">\tglPopMatrix();</span><br><span class=\"line\"></span><br><span class=\"line\">\trquad -= 0.15f;\t//修改立方体的旋转角度</span><br><span class=\"line\">\tglutSwapBuffers();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void reshape(int width, int height)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif (height == 0)</span><br><span class=\"line\">\t\theight = 1;</span><br><span class=\"line\">\tglViewport(0, 0, width, height);</span><br><span class=\"line\">\tglMatrixMode(GL_PROJECTION);</span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\">\t//gluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.0f, 100.0f);</span><br><span class=\"line\">\tgluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f);</span><br><span class=\"line\">\t//if (width &lt;= height)</span><br><span class=\"line\">\t//\tglOrtho(-2.0, 2.0, -2.0*(GLfloat)height / (GLfloat)width, 2.0*(GLfloat)height / (GLfloat)width, 1.0, 20.0);</span><br><span class=\"line\">\t//else</span><br><span class=\"line\">\t//\tglOrtho(-2.0*(GLfloat)width / (GLfloat)height, 2.0*(GLfloat)width / (GLfloat)height, -2.0, 2.0, 1.0, 20.0);</span><br><span class=\"line\">\tglMatrixMode(GL_MODELVIEW);</span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void keyboard(unsigned char key, int x, int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tswitch (key)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tcase &apos;1&apos;:</span><br><span class=\"line\">\t\tflag = 1;</span><br><span class=\"line\">\t\tglutPostRedisplay();</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tcase &apos;2&apos;:</span><br><span class=\"line\">\t\tflag = 2;</span><br><span class=\"line\">\t\tglutPostRedisplay();</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char** argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\">\tglutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE);</span><br><span class=\"line\">\tglutInitWindowSize(600, 600);</span><br><span class=\"line\">\tglutCreateWindow(&quot;Hello Cube&quot;);</span><br><span class=\"line\">\tInitGL();</span><br><span class=\"line\">\tglutDisplayFunc(display);</span><br><span class=\"line\">\tglutReshapeFunc(reshape);</span><br><span class=\"line\">\tglutIdleFunc(display);</span><br><span class=\"line\">\tglutKeyboardFunc(keyboard);</span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果：<br><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj5-Cube2.png\" width=\"300\" align=\"center\"></p>\n<p>图2</p>\n<h2 id=\"5．实验思考\"><a href=\"#5．实验思考\" class=\"headerlink\" title=\"5．实验思考\"></a>5．实验思考</h2><p>在示范代码2中，若将<code>gluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f)</code>代码改为如下：</p>\n<p><code>gluPerspective(90.0f, (GLfloat)width / (GLfloat)height, 0.0f, 100.0f)</code>，</p>\n<p>点击按键1和2，切换显示方式，观察下显示效果有何不同，试解释原因。</p>\n"},{"title":"实验6 简单光照与材质","_content":"## 1．实验目的：\n\n- 通过示范代码1，理解简单光照明模型的基本原理与实现；\n- 通过示范代码2和[太阳系示范代码](https://blog.csdn.net/wpxu08/article/details/70208361)，学习与掌握OpenGL光照与材质设置与使用方法。\n\n## 2．实验内容：\n\n在示范代码1基础上，按以下要求修改：\n\n（1） 阅读和修改示范代码中的有关参数，产生不同光照效果，观察显示效果。挑选两张修改的效果图保存为图1-2，与对应修改的代码一起保存至word实验文档中（15分钟）；\n\n（2） 将代码中的球体改为圆柱体，将圆柱体的光照效果图存为图3，与对应修改的代码一起保存至word实验文档中（25分钟）；\n\n在示范代码2的基础上，按以下要求完成任务：\n\n（3） 阅读和修改示范代码2中的有关参数，产生不同光照效果，观察显示效果。挑选两张修改的效果图保存为图4-5，与对应修改的代码一起保存至word实验文档中（15分钟）；\n\n（4）参考[太阳系示范代码](https://blog.csdn.net/wpxu08/article/details/70208361)，该代码显示一个简单的太阳系模型，尝试为其增加光照与材质效果，挑选两张修改的效果图保存为图6-7，与对应修改的代码一起保存至word实验文档中（25分钟）；\n\n（5） 整理word实验文档，将其命名为“序号-姓名-Prj6.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。\n\n## 3．实验原理：\n\nPhong光照明模型是由物体表面上一点P反射到视点的光强I为环境光的反射光强Ie、理想漫反射光强Id、和镜面反射光Is的总和，即\n$$\nI = I_a k_a + I_p K_d(LN) + I_p K_s(RV)^n\n$$\n其中R，V，N为单位矢量；$I_p$为点光源发出的入射光强；$I_a$为环境光的漫反射光强；$K_a$环境光的漫反射系数；$K_d$漫反射系数（ ）取决于表面的材料；$K_s$镜面反射系数（ ）；n幂次，用以模拟反射光的空间分布，表面越光滑，n越大。\n在用Phong模型进行真实感图形计算时，对物体表面上的每个点P，均需计算光线的反射方向R，再由V计算 。为减少计算量，我们可以作如下假设：a)光源在无穷远处,即光线方向L为常数；b)视点在无穷远处，即视线方向V为常数；c)用 近似 。这里H为L和V的角平分向量， 。在这种简化下，由于对所有的点总共只需计算一次H的值，节省了计算时间。结合RGB颜色模型，Phong光照明模型的最终形式详见教材公式（8.21）。\n\n示范代码1中，光源在无穷远处，光线方向为单位向量L（0.5, 0.5, 0.707）,视点在无穷远处，视线方向V为（0， 0， 1）。\n\n## 4．示范代码：\n### (1) 示范代码1-球体简单光照模型效果图\n```\n#include <GL/glut.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nstruct Vector\n{\n\tfloat fx, fy, fz;\n};\n\nstruct Color\n{\n\tfloat Ir, Ig, Ib;\n};\n\nfloat KaIa;\nfloat Kd, n;\nVector H, light;\nColor mLight, mColor;\n\nvoid Init()\n{\n\tfloat mo;\n\tVector eye;\n\tmLight.Ir = 0;\n\tmLight.Ig = 175;\n\tmLight.Ib = 0;\n\tKaIa = 100;\n\tKd = 0.7;\n\tn = 20;\n\n\tlight.fx = 0.50; light.fy = 0.50;\n\tlight.fz = sqrt(1 - (light.fx*light.fx) - (light.fy*light.fy));\n\teye.fx = 0; eye.fy = 0; eye.fz = 1;\n\tH.fx = light.fx + eye.fx;\n\tH.fy = light.fy + eye.fy;\n\tH.fz = light.fz + eye.fz;\n\tmo = sqrt(H.fx*H.fx + H.fy*H.fy + H.fz*H.fz);\n\tH.fx = (H.fx / mo); H.fy = (H.fy / mo); H.fz = (H.fz / mo);\n\tH.fx = (H.fx / mo); H.fy = (H.fy / mo); H.fz = (H.fz / mo);\n\n\tglClearColor(1.0, 1.0, 1.0, 0.0);\n\tglShadeModel(GL_SMOOTH);\n}\n\nColor Phong(int x0, int y0, int r, int x, int y)\n{\n\tVector N;\n\tfloat z, alpha, theta, Ks;\n\tKs = 1.0 - Kd;\n\tz = sqrt((float)(r*r - (x - x0)*(x - x0) - (y - y0)*(y - y0)));\n\tN.fx = (x - x0)*1.0 / r;\n\tN.fy = (y - y0)*1.0 / r;\n\tN.fz = z * 1.0 / r;\n\ttheta = N.fx * light.fx + N.fy * light.fy + N.fz * light.fz;\n\tif (theta < 0)\n\t\ttheta = 0;\n\talpha = H.fx*N.fx + H.fy*N.fy + H.fx*N.fz;\n\tif (alpha < 0)\n\t\talpha = 0;\n\tmColor.Ir = KaIa + mLight.Ir*Kd*theta + mLight.Ir*Ks*pow(alpha, n);\n\tmColor.Ig = KaIa + mLight.Ig*Kd*theta + mLight.Ig*Ks*pow(alpha, n);\n\tmColor.Ib = KaIa + mLight.Ib*Kd*theta + mLight.Ib*Ks*pow(alpha, n);\n\treturn mColor;\n}\n\nvoid MidCircle(int x0, int y0, int r)\n{\n\tint x, y, deltax, deltay, d;\n\tx = 0;\n\ty = r;\n\tdeltax = 3;\n\tdeltay = 5 - r - r;\n\td = 1 - r;\n\n\tglBegin(GL_POINTS);\n\t{\n\t\tfor (int i = -x; i <= x; i++)\n\t\t{\n\t\t\tmColor = Phong(x0, y0, r, i + x0, y + y0);\n\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\tglVertex2i(i + x0, y + y0);\n\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\tglVertex2i(i + x0, -y + y0);\n\t\t}\n\t\tfor (int i = -y; i <= y; i++)\n\t\t{\n\t\t\tmColor = Phong(x0, y0, r, i + x0, x + y0);\n\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\tglVertex2i(i + x0, x + y0);\n\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\tglVertex2i(i + x0, -x + y0);\n\t\t}\n\n\t\twhile (x < y)\n\t\t{\n\t\t\tif (d < 0)\n\t\t\t{\n\t\t\t\td += deltax;\n\t\t\t\tdeltax += 2;\n\t\t\t\tdeltay += 2;\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\td += deltay;\n\t\t\t\tdeltax += 2;\n\t\t\t\tdeltay += 4;\n\t\t\t\tx++;\n\t\t\t\ty--;\n\t\t\t}\n\n\t\t\tfor (int i = -x; i <= x; i++)\n\t\t\t{\n\t\t\t\tmColor = Phong(x0, y0, r, i + x0, y + y0);\n\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\t\tglVertex2i(i + x0, y + y0);\n\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\t\tglVertex2i(i + x0, -y + y0);\n\t\t\t}\n\t\t\tfor (int i = -y; i <= y; i++)\n\t\t\t{\n\t\t\t\tmColor = Phong(x0, y0, r, i + x0, x + y0);\n\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\t\tglVertex2i(i + x0, x + y0);\n\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\t\tglVertex2i(i + x0, -x + y0);\n\t\t\t}\n\t\t}\n\t}\n\tglEnd();\n}\n\nvoid myDisplay()\n{\n\tglClear(GL_COLOR_BUFFER_BIT);\n\tglColor3f(1.0f, 1.0f, 1.0f);\n\tMidCircle(250, 250, 60);\n\n\tglFlush();\n}\n\nvoid Reshape(int w, int h)\n{\n\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);\n\tglMatrixMode(GL_PROJECTION);\n\tglLoadIdentity();\n\tgluOrtho2D(0.0, (GLdouble)w, 0.0, (GLdouble)h);\n}\n\nint main(int argc, char *argv[])\n{\n\tglutInit(&argc, argv);\n\tglutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);\n\tglutInitWindowPosition(100, 100);\n\tglutInitWindowSize(640, 480);\n\tglutCreateWindow(\"Hello World!\");\n\n\tInit();\n\tglutDisplayFunc(myDisplay);\n\tglutReshapeFunc(Reshape);\n\tglutMainLoop();\n\treturn 0;\n}\n\n```\n程序运行结果： <img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj6-Light-Sphere1.png\" width=\"300\" align=center />\n\n图1\n\n### (2) 示范代码2-OpenGL光照与材质下球体效果图\n```\n#include <GL/glut.h>\n\n#include <stdlib.h>\n\n// Initialize material property, light source, lighting model, and depth buffer.\n\nvoid init(void)\n\n{\n\n\tGLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 };\n\n\tGLfloat mat_shininess[] = { 50.0 };\n\n\tGLfloat light_position[] = { 1.0, 1.0, 1.0, 0.0 };\n\n\tGLfloat white_light[] = { 1.0, 1.0, 1.0, 1.0 };\n\n\tGLfloat Light_Model_Ambient[] = { 0.2 , 0.2 , 0.2 , 1.0 }; //\n\n\tglClearColor(0.0, 0.0, 0.0, 0.0);\n\n\tglShadeModel(GL_SMOOTH);\n\n\tglMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);\n\n\tglMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);\n\n\tglLightfv(GL_LIGHT0, GL_POSITION, light_position);\n\n\tglLightfv(GL_LIGHT0, GL_DIFFUSE, white_light);\n\n\tglLightfv(GL_LIGHT0, GL_SPECULAR, white_light);\n\n\tglLightModelfv(GL_LIGHT_MODEL_AMBIENT, Light_Model_Ambient); //\n\n\tglEnable(GL_LIGHTING);\n\n\tglEnable(GL_LIGHT0);\n\n\tglEnable(GL_DEPTH_TEST);\n\n}\n\nvoid display(void)\n\n{\n\n\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\n\tglutSolidSphere (0.5, 20, 16);\n\n\t//glutSolidTeapot(0.5);\n\n\tglFlush();\n\n}\n\nvoid reshape(int w, int h)\n\n{\n\n\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);\n\n\tglMatrixMode(GL_PROJECTION);\n\n\tglLoadIdentity();\n\n\tif (w <= h)\n\n\t\tglOrtho(-1.5, 1.5, -1.5*(GLfloat)h / (GLfloat)w,\n\n\t\t\t1.5*(GLfloat)h / (GLfloat)w, -10.0, 10.0);\n\n\telse\n\n\t\tglOrtho(-1.5*(GLfloat)w / (GLfloat)h,\n\n\t\t\t1.5*(GLfloat)w / (GLfloat)h, -1.5, 1.5, -10.0, 10.0);\n\n\tglMatrixMode(GL_MODELVIEW);\n\n\tglLoadIdentity();\n\n}\n\nint main(int argc, char** argv)\n\n{\n\n\tglutInit(&argc, argv);\n\n\tglutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);\n\n\tglutInitWindowSize(500, 500);\n\n\tglutInitWindowPosition(100, 100);\n\n\tglutCreateWindow(argv[0]);\n\n\tinit();\n\n\tglutDisplayFunc(display);\n\n\tglutReshapeFunc(reshape);\n\n\tglutMainLoop();\n\n\treturn 0;\n\n}\n```\n程序运行结果：\n<img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj6-Light-Sphere2.png\" width=\"300\" align=center />\n\n图2","source":"_posts/CG-Prj6-Light.md","raw":"---\ntitle: 实验6 简单光照与材质\ntags: [计算机图形学]\ncategories: 计算机图形学\n---\n## 1．实验目的：\n\n- 通过示范代码1，理解简单光照明模型的基本原理与实现；\n- 通过示范代码2和[太阳系示范代码](https://blog.csdn.net/wpxu08/article/details/70208361)，学习与掌握OpenGL光照与材质设置与使用方法。\n\n## 2．实验内容：\n\n在示范代码1基础上，按以下要求修改：\n\n（1） 阅读和修改示范代码中的有关参数，产生不同光照效果，观察显示效果。挑选两张修改的效果图保存为图1-2，与对应修改的代码一起保存至word实验文档中（15分钟）；\n\n（2） 将代码中的球体改为圆柱体，将圆柱体的光照效果图存为图3，与对应修改的代码一起保存至word实验文档中（25分钟）；\n\n在示范代码2的基础上，按以下要求完成任务：\n\n（3） 阅读和修改示范代码2中的有关参数，产生不同光照效果，观察显示效果。挑选两张修改的效果图保存为图4-5，与对应修改的代码一起保存至word实验文档中（15分钟）；\n\n（4）参考[太阳系示范代码](https://blog.csdn.net/wpxu08/article/details/70208361)，该代码显示一个简单的太阳系模型，尝试为其增加光照与材质效果，挑选两张修改的效果图保存为图6-7，与对应修改的代码一起保存至word实验文档中（25分钟）；\n\n（5） 整理word实验文档，将其命名为“序号-姓名-Prj6.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。\n\n## 3．实验原理：\n\nPhong光照明模型是由物体表面上一点P反射到视点的光强I为环境光的反射光强Ie、理想漫反射光强Id、和镜面反射光Is的总和，即\n$$\nI = I_a k_a + I_p K_d(LN) + I_p K_s(RV)^n\n$$\n其中R，V，N为单位矢量；$I_p$为点光源发出的入射光强；$I_a$为环境光的漫反射光强；$K_a$环境光的漫反射系数；$K_d$漫反射系数（ ）取决于表面的材料；$K_s$镜面反射系数（ ）；n幂次，用以模拟反射光的空间分布，表面越光滑，n越大。\n在用Phong模型进行真实感图形计算时，对物体表面上的每个点P，均需计算光线的反射方向R，再由V计算 。为减少计算量，我们可以作如下假设：a)光源在无穷远处,即光线方向L为常数；b)视点在无穷远处，即视线方向V为常数；c)用 近似 。这里H为L和V的角平分向量， 。在这种简化下，由于对所有的点总共只需计算一次H的值，节省了计算时间。结合RGB颜色模型，Phong光照明模型的最终形式详见教材公式（8.21）。\n\n示范代码1中，光源在无穷远处，光线方向为单位向量L（0.5, 0.5, 0.707）,视点在无穷远处，视线方向V为（0， 0， 1）。\n\n## 4．示范代码：\n### (1) 示范代码1-球体简单光照模型效果图\n```\n#include <GL/glut.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nstruct Vector\n{\n\tfloat fx, fy, fz;\n};\n\nstruct Color\n{\n\tfloat Ir, Ig, Ib;\n};\n\nfloat KaIa;\nfloat Kd, n;\nVector H, light;\nColor mLight, mColor;\n\nvoid Init()\n{\n\tfloat mo;\n\tVector eye;\n\tmLight.Ir = 0;\n\tmLight.Ig = 175;\n\tmLight.Ib = 0;\n\tKaIa = 100;\n\tKd = 0.7;\n\tn = 20;\n\n\tlight.fx = 0.50; light.fy = 0.50;\n\tlight.fz = sqrt(1 - (light.fx*light.fx) - (light.fy*light.fy));\n\teye.fx = 0; eye.fy = 0; eye.fz = 1;\n\tH.fx = light.fx + eye.fx;\n\tH.fy = light.fy + eye.fy;\n\tH.fz = light.fz + eye.fz;\n\tmo = sqrt(H.fx*H.fx + H.fy*H.fy + H.fz*H.fz);\n\tH.fx = (H.fx / mo); H.fy = (H.fy / mo); H.fz = (H.fz / mo);\n\tH.fx = (H.fx / mo); H.fy = (H.fy / mo); H.fz = (H.fz / mo);\n\n\tglClearColor(1.0, 1.0, 1.0, 0.0);\n\tglShadeModel(GL_SMOOTH);\n}\n\nColor Phong(int x0, int y0, int r, int x, int y)\n{\n\tVector N;\n\tfloat z, alpha, theta, Ks;\n\tKs = 1.0 - Kd;\n\tz = sqrt((float)(r*r - (x - x0)*(x - x0) - (y - y0)*(y - y0)));\n\tN.fx = (x - x0)*1.0 / r;\n\tN.fy = (y - y0)*1.0 / r;\n\tN.fz = z * 1.0 / r;\n\ttheta = N.fx * light.fx + N.fy * light.fy + N.fz * light.fz;\n\tif (theta < 0)\n\t\ttheta = 0;\n\talpha = H.fx*N.fx + H.fy*N.fy + H.fx*N.fz;\n\tif (alpha < 0)\n\t\talpha = 0;\n\tmColor.Ir = KaIa + mLight.Ir*Kd*theta + mLight.Ir*Ks*pow(alpha, n);\n\tmColor.Ig = KaIa + mLight.Ig*Kd*theta + mLight.Ig*Ks*pow(alpha, n);\n\tmColor.Ib = KaIa + mLight.Ib*Kd*theta + mLight.Ib*Ks*pow(alpha, n);\n\treturn mColor;\n}\n\nvoid MidCircle(int x0, int y0, int r)\n{\n\tint x, y, deltax, deltay, d;\n\tx = 0;\n\ty = r;\n\tdeltax = 3;\n\tdeltay = 5 - r - r;\n\td = 1 - r;\n\n\tglBegin(GL_POINTS);\n\t{\n\t\tfor (int i = -x; i <= x; i++)\n\t\t{\n\t\t\tmColor = Phong(x0, y0, r, i + x0, y + y0);\n\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\tglVertex2i(i + x0, y + y0);\n\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\tglVertex2i(i + x0, -y + y0);\n\t\t}\n\t\tfor (int i = -y; i <= y; i++)\n\t\t{\n\t\t\tmColor = Phong(x0, y0, r, i + x0, x + y0);\n\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\tglVertex2i(i + x0, x + y0);\n\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\tglVertex2i(i + x0, -x + y0);\n\t\t}\n\n\t\twhile (x < y)\n\t\t{\n\t\t\tif (d < 0)\n\t\t\t{\n\t\t\t\td += deltax;\n\t\t\t\tdeltax += 2;\n\t\t\t\tdeltay += 2;\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\td += deltay;\n\t\t\t\tdeltax += 2;\n\t\t\t\tdeltay += 4;\n\t\t\t\tx++;\n\t\t\t\ty--;\n\t\t\t}\n\n\t\t\tfor (int i = -x; i <= x; i++)\n\t\t\t{\n\t\t\t\tmColor = Phong(x0, y0, r, i + x0, y + y0);\n\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\t\tglVertex2i(i + x0, y + y0);\n\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\t\tglVertex2i(i + x0, -y + y0);\n\t\t\t}\n\t\t\tfor (int i = -y; i <= y; i++)\n\t\t\t{\n\t\t\t\tmColor = Phong(x0, y0, r, i + x0, x + y0);\n\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\t\tglVertex2i(i + x0, x + y0);\n\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);\n\t\t\t\tglVertex2i(i + x0, -x + y0);\n\t\t\t}\n\t\t}\n\t}\n\tglEnd();\n}\n\nvoid myDisplay()\n{\n\tglClear(GL_COLOR_BUFFER_BIT);\n\tglColor3f(1.0f, 1.0f, 1.0f);\n\tMidCircle(250, 250, 60);\n\n\tglFlush();\n}\n\nvoid Reshape(int w, int h)\n{\n\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);\n\tglMatrixMode(GL_PROJECTION);\n\tglLoadIdentity();\n\tgluOrtho2D(0.0, (GLdouble)w, 0.0, (GLdouble)h);\n}\n\nint main(int argc, char *argv[])\n{\n\tglutInit(&argc, argv);\n\tglutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);\n\tglutInitWindowPosition(100, 100);\n\tglutInitWindowSize(640, 480);\n\tglutCreateWindow(\"Hello World!\");\n\n\tInit();\n\tglutDisplayFunc(myDisplay);\n\tglutReshapeFunc(Reshape);\n\tglutMainLoop();\n\treturn 0;\n}\n\n```\n程序运行结果： <img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj6-Light-Sphere1.png\" width=\"300\" align=center />\n\n图1\n\n### (2) 示范代码2-OpenGL光照与材质下球体效果图\n```\n#include <GL/glut.h>\n\n#include <stdlib.h>\n\n// Initialize material property, light source, lighting model, and depth buffer.\n\nvoid init(void)\n\n{\n\n\tGLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 };\n\n\tGLfloat mat_shininess[] = { 50.0 };\n\n\tGLfloat light_position[] = { 1.0, 1.0, 1.0, 0.0 };\n\n\tGLfloat white_light[] = { 1.0, 1.0, 1.0, 1.0 };\n\n\tGLfloat Light_Model_Ambient[] = { 0.2 , 0.2 , 0.2 , 1.0 }; //\n\n\tglClearColor(0.0, 0.0, 0.0, 0.0);\n\n\tglShadeModel(GL_SMOOTH);\n\n\tglMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);\n\n\tglMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);\n\n\tglLightfv(GL_LIGHT0, GL_POSITION, light_position);\n\n\tglLightfv(GL_LIGHT0, GL_DIFFUSE, white_light);\n\n\tglLightfv(GL_LIGHT0, GL_SPECULAR, white_light);\n\n\tglLightModelfv(GL_LIGHT_MODEL_AMBIENT, Light_Model_Ambient); //\n\n\tglEnable(GL_LIGHTING);\n\n\tglEnable(GL_LIGHT0);\n\n\tglEnable(GL_DEPTH_TEST);\n\n}\n\nvoid display(void)\n\n{\n\n\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\n\tglutSolidSphere (0.5, 20, 16);\n\n\t//glutSolidTeapot(0.5);\n\n\tglFlush();\n\n}\n\nvoid reshape(int w, int h)\n\n{\n\n\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);\n\n\tglMatrixMode(GL_PROJECTION);\n\n\tglLoadIdentity();\n\n\tif (w <= h)\n\n\t\tglOrtho(-1.5, 1.5, -1.5*(GLfloat)h / (GLfloat)w,\n\n\t\t\t1.5*(GLfloat)h / (GLfloat)w, -10.0, 10.0);\n\n\telse\n\n\t\tglOrtho(-1.5*(GLfloat)w / (GLfloat)h,\n\n\t\t\t1.5*(GLfloat)w / (GLfloat)h, -1.5, 1.5, -10.0, 10.0);\n\n\tglMatrixMode(GL_MODELVIEW);\n\n\tglLoadIdentity();\n\n}\n\nint main(int argc, char** argv)\n\n{\n\n\tglutInit(&argc, argv);\n\n\tglutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);\n\n\tglutInitWindowSize(500, 500);\n\n\tglutInitWindowPosition(100, 100);\n\n\tglutCreateWindow(argv[0]);\n\n\tinit();\n\n\tglutDisplayFunc(display);\n\n\tglutReshapeFunc(reshape);\n\n\tglutMainLoop();\n\n\treturn 0;\n\n}\n```\n程序运行结果：\n<img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj6-Light-Sphere2.png\" width=\"300\" align=center />\n\n图2","slug":"CG-Prj6-Light","published":1,"date":"2020-01-19T08:28:10.747Z","updated":"2019-08-18T02:04:22.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers05a000ar0akyoz1hkb5","content":"<h2 id=\"1．实验目的：\"><a href=\"#1．实验目的：\" class=\"headerlink\" title=\"1．实验目的：\"></a>1．实验目的：</h2><ul>\n<li>通过示范代码1，理解简单光照明模型的基本原理与实现；</li>\n<li>通过示范代码2和<a href=\"https://blog.csdn.net/wpxu08/article/details/70208361\" target=\"_blank\" rel=\"noopener\">太阳系示范代码</a>，学习与掌握OpenGL光照与材质设置与使用方法。</li>\n</ul>\n<h2 id=\"2．实验内容：\"><a href=\"#2．实验内容：\" class=\"headerlink\" title=\"2．实验内容：\"></a>2．实验内容：</h2><p>在示范代码1基础上，按以下要求修改：</p>\n<p>（1） 阅读和修改示范代码中的有关参数，产生不同光照效果，观察显示效果。挑选两张修改的效果图保存为图1-2，与对应修改的代码一起保存至word实验文档中（15分钟）；</p>\n<p>（2） 将代码中的球体改为圆柱体，将圆柱体的光照效果图存为图3，与对应修改的代码一起保存至word实验文档中（25分钟）；</p>\n<p>在示范代码2的基础上，按以下要求完成任务：</p>\n<p>（3） 阅读和修改示范代码2中的有关参数，产生不同光照效果，观察显示效果。挑选两张修改的效果图保存为图4-5，与对应修改的代码一起保存至word实验文档中（15分钟）；</p>\n<p>（4）参考<a href=\"https://blog.csdn.net/wpxu08/article/details/70208361\" target=\"_blank\" rel=\"noopener\">太阳系示范代码</a>，该代码显示一个简单的太阳系模型，尝试为其增加光照与材质效果，挑选两张修改的效果图保存为图6-7，与对应修改的代码一起保存至word实验文档中（25分钟）；</p>\n<p>（5） 整理word实验文档，将其命名为“序号-姓名-Prj6.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。</p>\n<h2 id=\"3．实验原理：\"><a href=\"#3．实验原理：\" class=\"headerlink\" title=\"3．实验原理：\"></a>3．实验原理：</h2><p>Phong光照明模型是由物体表面上一点P反射到视点的光强I为环境光的反射光强Ie、理想漫反射光强Id、和镜面反射光Is的总和，即<br>$$<br>I = I_a k_a + I_p K_d(LN) + I_p K_s(RV)^n<br>$$<br>其中R，V，N为单位矢量；$I_p$为点光源发出的入射光强；$I_a$为环境光的漫反射光强；$K_a$环境光的漫反射系数；$K_d$漫反射系数（ ）取决于表面的材料；$K_s$镜面反射系数（ ）；n幂次，用以模拟反射光的空间分布，表面越光滑，n越大。<br>在用Phong模型进行真实感图形计算时，对物体表面上的每个点P，均需计算光线的反射方向R，再由V计算 。为减少计算量，我们可以作如下假设：a)光源在无穷远处,即光线方向L为常数；b)视点在无穷远处，即视线方向V为常数；c)用 近似 。这里H为L和V的角平分向量， 。在这种简化下，由于对所有的点总共只需计算一次H的值，节省了计算时间。结合RGB颜色模型，Phong光照明模型的最终形式详见教材公式（8.21）。</p>\n<p>示范代码1中，光源在无穷远处，光线方向为单位向量L（0.5, 0.5, 0.707）,视点在无穷远处，视线方向V为（0， 0， 1）。</p>\n<h2 id=\"4．示范代码：\"><a href=\"#4．示范代码：\" class=\"headerlink\" title=\"4．示范代码：\"></a>4．示范代码：</h2><h3 id=\"1-示范代码1-球体简单光照模型效果图\"><a href=\"#1-示范代码1-球体简单光照模型效果图\" class=\"headerlink\" title=\"(1) 示范代码1-球体简单光照模型效果图\"></a>(1) 示范代码1-球体简单光照模型效果图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;math.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Vector</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfloat fx, fy, fz;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Color</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfloat Ir, Ig, Ib;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">float KaIa;</span><br><span class=\"line\">float Kd, n;</span><br><span class=\"line\">Vector H, light;</span><br><span class=\"line\">Color mLight, mColor;</span><br><span class=\"line\"></span><br><span class=\"line\">void Init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfloat mo;</span><br><span class=\"line\">\tVector eye;</span><br><span class=\"line\">\tmLight.Ir = 0;</span><br><span class=\"line\">\tmLight.Ig = 175;</span><br><span class=\"line\">\tmLight.Ib = 0;</span><br><span class=\"line\">\tKaIa = 100;</span><br><span class=\"line\">\tKd = 0.7;</span><br><span class=\"line\">\tn = 20;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlight.fx = 0.50; light.fy = 0.50;</span><br><span class=\"line\">\tlight.fz = sqrt(1 - (light.fx*light.fx) - (light.fy*light.fy));</span><br><span class=\"line\">\teye.fx = 0; eye.fy = 0; eye.fz = 1;</span><br><span class=\"line\">\tH.fx = light.fx + eye.fx;</span><br><span class=\"line\">\tH.fy = light.fy + eye.fy;</span><br><span class=\"line\">\tH.fz = light.fz + eye.fz;</span><br><span class=\"line\">\tmo = sqrt(H.fx*H.fx + H.fy*H.fy + H.fz*H.fz);</span><br><span class=\"line\">\tH.fx = (H.fx / mo); H.fy = (H.fy / mo); H.fz = (H.fz / mo);</span><br><span class=\"line\">\tH.fx = (H.fx / mo); H.fy = (H.fy / mo); H.fz = (H.fz / mo);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglClearColor(1.0, 1.0, 1.0, 0.0);</span><br><span class=\"line\">\tglShadeModel(GL_SMOOTH);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Color Phong(int x0, int y0, int r, int x, int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tVector N;</span><br><span class=\"line\">\tfloat z, alpha, theta, Ks;</span><br><span class=\"line\">\tKs = 1.0 - Kd;</span><br><span class=\"line\">\tz = sqrt((float)(r*r - (x - x0)*(x - x0) - (y - y0)*(y - y0)));</span><br><span class=\"line\">\tN.fx = (x - x0)*1.0 / r;</span><br><span class=\"line\">\tN.fy = (y - y0)*1.0 / r;</span><br><span class=\"line\">\tN.fz = z * 1.0 / r;</span><br><span class=\"line\">\ttheta = N.fx * light.fx + N.fy * light.fy + N.fz * light.fz;</span><br><span class=\"line\">\tif (theta &lt; 0)</span><br><span class=\"line\">\t\ttheta = 0;</span><br><span class=\"line\">\talpha = H.fx*N.fx + H.fy*N.fy + H.fx*N.fz;</span><br><span class=\"line\">\tif (alpha &lt; 0)</span><br><span class=\"line\">\t\talpha = 0;</span><br><span class=\"line\">\tmColor.Ir = KaIa + mLight.Ir*Kd*theta + mLight.Ir*Ks*pow(alpha, n);</span><br><span class=\"line\">\tmColor.Ig = KaIa + mLight.Ig*Kd*theta + mLight.Ig*Ks*pow(alpha, n);</span><br><span class=\"line\">\tmColor.Ib = KaIa + mLight.Ib*Kd*theta + mLight.Ib*Ks*pow(alpha, n);</span><br><span class=\"line\">\treturn mColor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void MidCircle(int x0, int y0, int r)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint x, y, deltax, deltay, d;</span><br><span class=\"line\">\tx = 0;</span><br><span class=\"line\">\ty = r;</span><br><span class=\"line\">\tdeltax = 3;</span><br><span class=\"line\">\tdeltay = 5 - r - r;</span><br><span class=\"line\">\td = 1 - r;</span><br><span class=\"line\"></span><br><span class=\"line\">\tglBegin(GL_POINTS);</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfor (int i = -x; i &lt;= x; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tmColor = Phong(x0, y0, r, i + x0, y + y0);</span><br><span class=\"line\">\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\tglVertex2i(i + x0, y + y0);</span><br><span class=\"line\">\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\tglVertex2i(i + x0, -y + y0);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfor (int i = -y; i &lt;= y; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tmColor = Phong(x0, y0, r, i + x0, x + y0);</span><br><span class=\"line\">\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\tglVertex2i(i + x0, x + y0);</span><br><span class=\"line\">\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\tglVertex2i(i + x0, -x + y0);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\twhile (x &lt; y)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif (d &lt; 0)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\td += deltax;</span><br><span class=\"line\">\t\t\t\tdeltax += 2;</span><br><span class=\"line\">\t\t\t\tdeltay += 2;</span><br><span class=\"line\">\t\t\t\tx++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\td += deltay;</span><br><span class=\"line\">\t\t\t\tdeltax += 2;</span><br><span class=\"line\">\t\t\t\tdeltay += 4;</span><br><span class=\"line\">\t\t\t\tx++;</span><br><span class=\"line\">\t\t\t\ty--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tfor (int i = -x; i &lt;= x; i++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tmColor = Phong(x0, y0, r, i + x0, y + y0);</span><br><span class=\"line\">\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\t\tglVertex2i(i + x0, y + y0);</span><br><span class=\"line\">\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\t\tglVertex2i(i + x0, -y + y0);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfor (int i = -y; i &lt;= y; i++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tmColor = Phong(x0, y0, r, i + x0, x + y0);</span><br><span class=\"line\">\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\t\tglVertex2i(i + x0, x + y0);</span><br><span class=\"line\">\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\t\tglVertex2i(i + x0, -x + y0);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tglEnd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void myDisplay()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">\tglColor3f(1.0f, 1.0f, 1.0f);</span><br><span class=\"line\">\tMidCircle(250, 250, 60);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Reshape(int w, int h)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);</span><br><span class=\"line\">\tglMatrixMode(GL_PROJECTION);</span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\">\tgluOrtho2D(0.0, (GLdouble)w, 0.0, (GLdouble)h);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\">\tglutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</span><br><span class=\"line\">\tglutInitWindowPosition(100, 100);</span><br><span class=\"line\">\tglutInitWindowSize(640, 480);</span><br><span class=\"line\">\tglutCreateWindow(&quot;Hello World!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tInit();</span><br><span class=\"line\">\tglutDisplayFunc(myDisplay);</span><br><span class=\"line\">\tglutReshapeFunc(Reshape);</span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果： <img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj6-Light-Sphere1.png\" width=\"300\" align=\"center\"></p>\n<p>图1</p>\n<h3 id=\"2-示范代码2-OpenGL光照与材质下球体效果图\"><a href=\"#2-示范代码2-OpenGL光照与材质下球体效果图\" class=\"headerlink\" title=\"(2) 示范代码2-OpenGL光照与材质下球体效果图\"></a>(2) 示范代码2-OpenGL光照与材质下球体效果图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// Initialize material property, light source, lighting model, and depth buffer.</span><br><span class=\"line\"></span><br><span class=\"line\">void init(void)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGLfloat mat_specular[] = &#123; 1.0, 1.0, 1.0, 1.0 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGLfloat mat_shininess[] = &#123; 50.0 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGLfloat light_position[] = &#123; 1.0, 1.0, 1.0, 0.0 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGLfloat white_light[] = &#123; 1.0, 1.0, 1.0, 1.0 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGLfloat Light_Model_Ambient[] = &#123; 0.2 , 0.2 , 0.2 , 1.0 &#125;; //</span><br><span class=\"line\"></span><br><span class=\"line\">\tglClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglShadeModel(GL_SMOOTH);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglLightfv(GL_LIGHT0, GL_POSITION, light_position);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglLightfv(GL_LIGHT0, GL_DIFFUSE, white_light);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglLightfv(GL_LIGHT0, GL_SPECULAR, white_light);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglLightModelfv(GL_LIGHT_MODEL_AMBIENT, Light_Model_Ambient); //</span><br><span class=\"line\"></span><br><span class=\"line\">\tglEnable(GL_LIGHTING);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglEnable(GL_LIGHT0);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglEnable(GL_DEPTH_TEST);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void display(void)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutSolidSphere (0.5, 20, 16);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//glutSolidTeapot(0.5);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void reshape(int w, int h)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglMatrixMode(GL_PROJECTION);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (w &lt;= h)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tglOrtho(-1.5, 1.5, -1.5*(GLfloat)h / (GLfloat)w,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t1.5*(GLfloat)h / (GLfloat)w, -10.0, 10.0);</span><br><span class=\"line\"></span><br><span class=\"line\">\telse</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tglOrtho(-1.5*(GLfloat)w / (GLfloat)h,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t1.5*(GLfloat)w / (GLfloat)h, -1.5, 1.5, -10.0, 10.0);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglMatrixMode(GL_MODELVIEW);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char** argv)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutInitWindowSize(500, 500);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutInitWindowPosition(100, 100);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutCreateWindow(argv[0]);</span><br><span class=\"line\"></span><br><span class=\"line\">\tinit();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutDisplayFunc(display);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutReshapeFunc(reshape);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果：<br><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj6-Light-Sphere2.png\" width=\"300\" align=\"center\"></p>\n<p>图2</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1．实验目的：\"><a href=\"#1．实验目的：\" class=\"headerlink\" title=\"1．实验目的：\"></a>1．实验目的：</h2><ul>\n<li>通过示范代码1，理解简单光照明模型的基本原理与实现；</li>\n<li>通过示范代码2和<a href=\"https://blog.csdn.net/wpxu08/article/details/70208361\" target=\"_blank\" rel=\"noopener\">太阳系示范代码</a>，学习与掌握OpenGL光照与材质设置与使用方法。</li>\n</ul>\n<h2 id=\"2．实验内容：\"><a href=\"#2．实验内容：\" class=\"headerlink\" title=\"2．实验内容：\"></a>2．实验内容：</h2><p>在示范代码1基础上，按以下要求修改：</p>\n<p>（1） 阅读和修改示范代码中的有关参数，产生不同光照效果，观察显示效果。挑选两张修改的效果图保存为图1-2，与对应修改的代码一起保存至word实验文档中（15分钟）；</p>\n<p>（2） 将代码中的球体改为圆柱体，将圆柱体的光照效果图存为图3，与对应修改的代码一起保存至word实验文档中（25分钟）；</p>\n<p>在示范代码2的基础上，按以下要求完成任务：</p>\n<p>（3） 阅读和修改示范代码2中的有关参数，产生不同光照效果，观察显示效果。挑选两张修改的效果图保存为图4-5，与对应修改的代码一起保存至word实验文档中（15分钟）；</p>\n<p>（4）参考<a href=\"https://blog.csdn.net/wpxu08/article/details/70208361\" target=\"_blank\" rel=\"noopener\">太阳系示范代码</a>，该代码显示一个简单的太阳系模型，尝试为其增加光照与材质效果，挑选两张修改的效果图保存为图6-7，与对应修改的代码一起保存至word实验文档中（25分钟）；</p>\n<p>（5） 整理word实验文档，将其命名为“序号-姓名-Prj6.doc”，电子版提交至雨课堂，A4打印稿下一次课前或实验课前提交。</p>\n<h2 id=\"3．实验原理：\"><a href=\"#3．实验原理：\" class=\"headerlink\" title=\"3．实验原理：\"></a>3．实验原理：</h2><p>Phong光照明模型是由物体表面上一点P反射到视点的光强I为环境光的反射光强Ie、理想漫反射光强Id、和镜面反射光Is的总和，即<br>$$<br>I = I_a k_a + I_p K_d(LN) + I_p K_s(RV)^n<br>$$<br>其中R，V，N为单位矢量；$I_p$为点光源发出的入射光强；$I_a$为环境光的漫反射光强；$K_a$环境光的漫反射系数；$K_d$漫反射系数（ ）取决于表面的材料；$K_s$镜面反射系数（ ）；n幂次，用以模拟反射光的空间分布，表面越光滑，n越大。<br>在用Phong模型进行真实感图形计算时，对物体表面上的每个点P，均需计算光线的反射方向R，再由V计算 。为减少计算量，我们可以作如下假设：a)光源在无穷远处,即光线方向L为常数；b)视点在无穷远处，即视线方向V为常数；c)用 近似 。这里H为L和V的角平分向量， 。在这种简化下，由于对所有的点总共只需计算一次H的值，节省了计算时间。结合RGB颜色模型，Phong光照明模型的最终形式详见教材公式（8.21）。</p>\n<p>示范代码1中，光源在无穷远处，光线方向为单位向量L（0.5, 0.5, 0.707）,视点在无穷远处，视线方向V为（0， 0， 1）。</p>\n<h2 id=\"4．示范代码：\"><a href=\"#4．示范代码：\" class=\"headerlink\" title=\"4．示范代码：\"></a>4．示范代码：</h2><h3 id=\"1-示范代码1-球体简单光照模型效果图\"><a href=\"#1-示范代码1-球体简单光照模型效果图\" class=\"headerlink\" title=\"(1) 示范代码1-球体简单光照模型效果图\"></a>(1) 示范代码1-球体简单光照模型效果图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;math.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Vector</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfloat fx, fy, fz;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Color</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfloat Ir, Ig, Ib;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">float KaIa;</span><br><span class=\"line\">float Kd, n;</span><br><span class=\"line\">Vector H, light;</span><br><span class=\"line\">Color mLight, mColor;</span><br><span class=\"line\"></span><br><span class=\"line\">void Init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfloat mo;</span><br><span class=\"line\">\tVector eye;</span><br><span class=\"line\">\tmLight.Ir = 0;</span><br><span class=\"line\">\tmLight.Ig = 175;</span><br><span class=\"line\">\tmLight.Ib = 0;</span><br><span class=\"line\">\tKaIa = 100;</span><br><span class=\"line\">\tKd = 0.7;</span><br><span class=\"line\">\tn = 20;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlight.fx = 0.50; light.fy = 0.50;</span><br><span class=\"line\">\tlight.fz = sqrt(1 - (light.fx*light.fx) - (light.fy*light.fy));</span><br><span class=\"line\">\teye.fx = 0; eye.fy = 0; eye.fz = 1;</span><br><span class=\"line\">\tH.fx = light.fx + eye.fx;</span><br><span class=\"line\">\tH.fy = light.fy + eye.fy;</span><br><span class=\"line\">\tH.fz = light.fz + eye.fz;</span><br><span class=\"line\">\tmo = sqrt(H.fx*H.fx + H.fy*H.fy + H.fz*H.fz);</span><br><span class=\"line\">\tH.fx = (H.fx / mo); H.fy = (H.fy / mo); H.fz = (H.fz / mo);</span><br><span class=\"line\">\tH.fx = (H.fx / mo); H.fy = (H.fy / mo); H.fz = (H.fz / mo);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglClearColor(1.0, 1.0, 1.0, 0.0);</span><br><span class=\"line\">\tglShadeModel(GL_SMOOTH);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Color Phong(int x0, int y0, int r, int x, int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tVector N;</span><br><span class=\"line\">\tfloat z, alpha, theta, Ks;</span><br><span class=\"line\">\tKs = 1.0 - Kd;</span><br><span class=\"line\">\tz = sqrt((float)(r*r - (x - x0)*(x - x0) - (y - y0)*(y - y0)));</span><br><span class=\"line\">\tN.fx = (x - x0)*1.0 / r;</span><br><span class=\"line\">\tN.fy = (y - y0)*1.0 / r;</span><br><span class=\"line\">\tN.fz = z * 1.0 / r;</span><br><span class=\"line\">\ttheta = N.fx * light.fx + N.fy * light.fy + N.fz * light.fz;</span><br><span class=\"line\">\tif (theta &lt; 0)</span><br><span class=\"line\">\t\ttheta = 0;</span><br><span class=\"line\">\talpha = H.fx*N.fx + H.fy*N.fy + H.fx*N.fz;</span><br><span class=\"line\">\tif (alpha &lt; 0)</span><br><span class=\"line\">\t\talpha = 0;</span><br><span class=\"line\">\tmColor.Ir = KaIa + mLight.Ir*Kd*theta + mLight.Ir*Ks*pow(alpha, n);</span><br><span class=\"line\">\tmColor.Ig = KaIa + mLight.Ig*Kd*theta + mLight.Ig*Ks*pow(alpha, n);</span><br><span class=\"line\">\tmColor.Ib = KaIa + mLight.Ib*Kd*theta + mLight.Ib*Ks*pow(alpha, n);</span><br><span class=\"line\">\treturn mColor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void MidCircle(int x0, int y0, int r)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint x, y, deltax, deltay, d;</span><br><span class=\"line\">\tx = 0;</span><br><span class=\"line\">\ty = r;</span><br><span class=\"line\">\tdeltax = 3;</span><br><span class=\"line\">\tdeltay = 5 - r - r;</span><br><span class=\"line\">\td = 1 - r;</span><br><span class=\"line\"></span><br><span class=\"line\">\tglBegin(GL_POINTS);</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfor (int i = -x; i &lt;= x; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tmColor = Phong(x0, y0, r, i + x0, y + y0);</span><br><span class=\"line\">\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\tglVertex2i(i + x0, y + y0);</span><br><span class=\"line\">\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\tglVertex2i(i + x0, -y + y0);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfor (int i = -y; i &lt;= y; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tmColor = Phong(x0, y0, r, i + x0, x + y0);</span><br><span class=\"line\">\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\tglVertex2i(i + x0, x + y0);</span><br><span class=\"line\">\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\tglVertex2i(i + x0, -x + y0);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\twhile (x &lt; y)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif (d &lt; 0)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\td += deltax;</span><br><span class=\"line\">\t\t\t\tdeltax += 2;</span><br><span class=\"line\">\t\t\t\tdeltay += 2;</span><br><span class=\"line\">\t\t\t\tx++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\td += deltay;</span><br><span class=\"line\">\t\t\t\tdeltax += 2;</span><br><span class=\"line\">\t\t\t\tdeltay += 4;</span><br><span class=\"line\">\t\t\t\tx++;</span><br><span class=\"line\">\t\t\t\ty--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tfor (int i = -x; i &lt;= x; i++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tmColor = Phong(x0, y0, r, i + x0, y + y0);</span><br><span class=\"line\">\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\t\tglVertex2i(i + x0, y + y0);</span><br><span class=\"line\">\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\t\tglVertex2i(i + x0, -y + y0);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfor (int i = -y; i &lt;= y; i++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tmColor = Phong(x0, y0, r, i + x0, x + y0);</span><br><span class=\"line\">\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\t\tglVertex2i(i + x0, x + y0);</span><br><span class=\"line\">\t\t\t\tglColor3ub(mColor.Ir, mColor.Ig, mColor.Ib);</span><br><span class=\"line\">\t\t\t\tglVertex2i(i + x0, -x + y0);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tglEnd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void myDisplay()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">\tglColor3f(1.0f, 1.0f, 1.0f);</span><br><span class=\"line\">\tMidCircle(250, 250, 60);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Reshape(int w, int h)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);</span><br><span class=\"line\">\tglMatrixMode(GL_PROJECTION);</span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\">\tgluOrtho2D(0.0, (GLdouble)w, 0.0, (GLdouble)h);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\">\tglutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</span><br><span class=\"line\">\tglutInitWindowPosition(100, 100);</span><br><span class=\"line\">\tglutInitWindowSize(640, 480);</span><br><span class=\"line\">\tglutCreateWindow(&quot;Hello World!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tInit();</span><br><span class=\"line\">\tglutDisplayFunc(myDisplay);</span><br><span class=\"line\">\tglutReshapeFunc(Reshape);</span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果： <img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj6-Light-Sphere1.png\" width=\"300\" align=\"center\"></p>\n<p>图1</p>\n<h3 id=\"2-示范代码2-OpenGL光照与材质下球体效果图\"><a href=\"#2-示范代码2-OpenGL光照与材质下球体效果图\" class=\"headerlink\" title=\"(2) 示范代码2-OpenGL光照与材质下球体效果图\"></a>(2) 示范代码2-OpenGL光照与材质下球体效果图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// Initialize material property, light source, lighting model, and depth buffer.</span><br><span class=\"line\"></span><br><span class=\"line\">void init(void)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGLfloat mat_specular[] = &#123; 1.0, 1.0, 1.0, 1.0 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGLfloat mat_shininess[] = &#123; 50.0 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGLfloat light_position[] = &#123; 1.0, 1.0, 1.0, 0.0 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGLfloat white_light[] = &#123; 1.0, 1.0, 1.0, 1.0 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGLfloat Light_Model_Ambient[] = &#123; 0.2 , 0.2 , 0.2 , 1.0 &#125;; //</span><br><span class=\"line\"></span><br><span class=\"line\">\tglClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglShadeModel(GL_SMOOTH);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglLightfv(GL_LIGHT0, GL_POSITION, light_position);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglLightfv(GL_LIGHT0, GL_DIFFUSE, white_light);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglLightfv(GL_LIGHT0, GL_SPECULAR, white_light);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglLightModelfv(GL_LIGHT_MODEL_AMBIENT, Light_Model_Ambient); //</span><br><span class=\"line\"></span><br><span class=\"line\">\tglEnable(GL_LIGHTING);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglEnable(GL_LIGHT0);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglEnable(GL_DEPTH_TEST);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void display(void)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutSolidSphere (0.5, 20, 16);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//glutSolidTeapot(0.5);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void reshape(int w, int h)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tglViewport(0, 0, (GLsizei)w, (GLsizei)h);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglMatrixMode(GL_PROJECTION);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (w &lt;= h)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tglOrtho(-1.5, 1.5, -1.5*(GLfloat)h / (GLfloat)w,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t1.5*(GLfloat)h / (GLfloat)w, -10.0, 10.0);</span><br><span class=\"line\"></span><br><span class=\"line\">\telse</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tglOrtho(-1.5*(GLfloat)w / (GLfloat)h,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t1.5*(GLfloat)w / (GLfloat)h, -1.5, 1.5, -10.0, 10.0);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglMatrixMode(GL_MODELVIEW);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglLoadIdentity();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char** argv)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutInitWindowSize(500, 500);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutInitWindowPosition(100, 100);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutCreateWindow(argv[0]);</span><br><span class=\"line\"></span><br><span class=\"line\">\tinit();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutDisplayFunc(display);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutReshapeFunc(reshape);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果：<br><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-Prj6-Light-Sphere2.png\" width=\"300\" align=\"center\"></p>\n<p>图2</p>\n"},{"title":"实验0.1 FreeGlut配置简介","_content":"\n## 1．FreeGlut简介：\n先介绍下**Glut库**。GLUT最初由MarkKilgard编写，从OpenGL Redbook（红宝书）第二版起就用来作为示例程序的支持环境，直到第八版为止（注：第九版开始改为GLFW）。从那时起，GLUT因为其简单、可用性广、可移植性强，被广泛应用于各种OpenGL实际应用中。Glut最新版本为3.7版，大致在1998年8月停止维护和更新，同时其代码也没有开源。\n[**Freeglut**](http://freeglut.sourceforge.net/)是Glut库(OpenGL Utility Toolkit，OpenGL实用工具包)的免费开源替代品。它是由Pawel W. Olszta在1999年12月创建，最新版本为2015年3月的3.0版本。\n## 2. FreeGlut获取\n可以选择源码自己编译，也可以直接使用编译好的文件。\n(1) 源码下载链接：http://prdownloads.sourceforge.net/freeglut/freeglut-3.0.0.tar.gz?download\n(2) 编译好的文件下载链接：\nhttps://www.transmissionzero.co.uk/software/freeglut-devel/\n其中如果以VS为编程环境，可以直接下载上述链接页面中的MSVC包（“freeglut 3.0.0 MSVC Package”）。\n## 3．FreeGlut配置\n下面以freeglut-MSVC.zip文件介绍FreeGlut在VS2017中的配置。\n**(1) 头文件**\n　　将freeglut\\include\\GL目录复制到 Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include目录下;\n**(2) 库文件**\n　　将freeglut\\lib\\freeglut.lib文件复制到Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x86目录下;\n　　将freeglut\\lib\\x64\\freeglut.lib文件复制到Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x64目录下;\n**(3) Dll文件**\n- 64位Windows系统：\n　　将freeglut\\bin\\freeglut.dll文件复制到C:\\Windows\\SysWOW64目录下;\n　　将freeglut\\bin\\x64\\freeglut.dll文件复制到c:\\Windows\\System32目录下;\n- 32位Windows系统：\n　　将freeglut\\bin\\freeglut.dll文件复制到c:\\Windows\\System32目录下;\n## 4．补充\n为防止出现“无法打开文件“freeglutd.lib””的错误，需要在代码文件中#include <GL/glut.h>语句前加上#define NDEBUG，如下所示：\n```\n#define NDEBUG \n#include <GL/glut.h>\n......\n```\n原因请参考文章[Freeglut中无法打开文件\"freeglutd.lib\"](https://blog.csdn.net/csxiaoshui/article/details/78720651)。","source":"_posts/CG实验0.1 FreeGlut配置简介.md","raw":"---\ntitle: 实验0.1 FreeGlut配置简介\ntags: [计算机图形学]\ncategories: 计算机图形学基础（第2版）\n---\n\n## 1．FreeGlut简介：\n先介绍下**Glut库**。GLUT最初由MarkKilgard编写，从OpenGL Redbook（红宝书）第二版起就用来作为示例程序的支持环境，直到第八版为止（注：第九版开始改为GLFW）。从那时起，GLUT因为其简单、可用性广、可移植性强，被广泛应用于各种OpenGL实际应用中。Glut最新版本为3.7版，大致在1998年8月停止维护和更新，同时其代码也没有开源。\n[**Freeglut**](http://freeglut.sourceforge.net/)是Glut库(OpenGL Utility Toolkit，OpenGL实用工具包)的免费开源替代品。它是由Pawel W. Olszta在1999年12月创建，最新版本为2015年3月的3.0版本。\n## 2. FreeGlut获取\n可以选择源码自己编译，也可以直接使用编译好的文件。\n(1) 源码下载链接：http://prdownloads.sourceforge.net/freeglut/freeglut-3.0.0.tar.gz?download\n(2) 编译好的文件下载链接：\nhttps://www.transmissionzero.co.uk/software/freeglut-devel/\n其中如果以VS为编程环境，可以直接下载上述链接页面中的MSVC包（“freeglut 3.0.0 MSVC Package”）。\n## 3．FreeGlut配置\n下面以freeglut-MSVC.zip文件介绍FreeGlut在VS2017中的配置。\n**(1) 头文件**\n　　将freeglut\\include\\GL目录复制到 Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include目录下;\n**(2) 库文件**\n　　将freeglut\\lib\\freeglut.lib文件复制到Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x86目录下;\n　　将freeglut\\lib\\x64\\freeglut.lib文件复制到Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x64目录下;\n**(3) Dll文件**\n- 64位Windows系统：\n　　将freeglut\\bin\\freeglut.dll文件复制到C:\\Windows\\SysWOW64目录下;\n　　将freeglut\\bin\\x64\\freeglut.dll文件复制到c:\\Windows\\System32目录下;\n- 32位Windows系统：\n　　将freeglut\\bin\\freeglut.dll文件复制到c:\\Windows\\System32目录下;\n## 4．补充\n为防止出现“无法打开文件“freeglutd.lib””的错误，需要在代码文件中#include <GL/glut.h>语句前加上#define NDEBUG，如下所示：\n```\n#define NDEBUG \n#include <GL/glut.h>\n......\n```\n原因请参考文章[Freeglut中无法打开文件\"freeglutd.lib\"](https://blog.csdn.net/csxiaoshui/article/details/78720651)。","slug":"CG实验0.1 FreeGlut配置简介","published":1,"date":"2020-05-20T00:42:34.044Z","updated":"2020-05-20T02:53:40.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers05b000cr0ak4xzg0vgo","content":"<h2 id=\"1．FreeGlut简介：\"><a href=\"#1．FreeGlut简介：\" class=\"headerlink\" title=\"1．FreeGlut简介：\"></a>1．FreeGlut简介：</h2><p>先介绍下<strong>Glut库</strong>。GLUT最初由MarkKilgard编写，从OpenGL Redbook（红宝书）第二版起就用来作为示例程序的支持环境，直到第八版为止（注：第九版开始改为GLFW）。从那时起，GLUT因为其简单、可用性广、可移植性强，被广泛应用于各种OpenGL实际应用中。Glut最新版本为3.7版，大致在1998年8月停止维护和更新，同时其代码也没有开源。<br><a href=\"http://freeglut.sourceforge.net/\" target=\"_blank\" rel=\"noopener\"><strong>Freeglut</strong></a>是Glut库(OpenGL Utility Toolkit，OpenGL实用工具包)的免费开源替代品。它是由Pawel W. Olszta在1999年12月创建，最新版本为2015年3月的3.0版本。</p>\n<h2 id=\"2-FreeGlut获取\"><a href=\"#2-FreeGlut获取\" class=\"headerlink\" title=\"2. FreeGlut获取\"></a>2. FreeGlut获取</h2><p>可以选择源码自己编译，也可以直接使用编译好的文件。<br>(1) 源码下载链接：<a href=\"http://prdownloads.sourceforge.net/freeglut/freeglut-3.0.0.tar.gz?download\" target=\"_blank\" rel=\"noopener\">http://prdownloads.sourceforge.net/freeglut/freeglut-3.0.0.tar.gz?download</a><br>(2) 编译好的文件下载链接：<br><a href=\"https://www.transmissionzero.co.uk/software/freeglut-devel/\" target=\"_blank\" rel=\"noopener\">https://www.transmissionzero.co.uk/software/freeglut-devel/</a><br>其中如果以VS为编程环境，可以直接下载上述链接页面中的MSVC包（“freeglut 3.0.0 MSVC Package”）。</p>\n<h2 id=\"3．FreeGlut配置\"><a href=\"#3．FreeGlut配置\" class=\"headerlink\" title=\"3．FreeGlut配置\"></a>3．FreeGlut配置</h2><p>下面以freeglut-MSVC.zip文件介绍FreeGlut在VS2017中的配置。<br><strong>(1) 头文件</strong><br>　　将freeglut\\include\\GL目录复制到 Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include目录下;<br><strong>(2) 库文件</strong><br>　　将freeglut\\lib\\freeglut.lib文件复制到Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x86目录下;<br>　　将freeglut\\lib\\x64\\freeglut.lib文件复制到Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x64目录下;<br><strong>(3) Dll文件</strong></p>\n<ul>\n<li>64位Windows系统：<br>　　将freeglut\\bin\\freeglut.dll文件复制到C:\\Windows\\SysWOW64目录下;<br>　　将freeglut\\bin\\x64\\freeglut.dll文件复制到c:\\Windows\\System32目录下;</li>\n<li>32位Windows系统：<br>　　将freeglut\\bin\\freeglut.dll文件复制到c:\\Windows\\System32目录下;<h2 id=\"4．补充\"><a href=\"#4．补充\" class=\"headerlink\" title=\"4．补充\"></a>4．补充</h2>为防止出现“无法打开文件“freeglutd.lib””的错误，需要在代码文件中#include &lt;GL/glut.h&gt;语句前加上#define NDEBUG，如下所示：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define NDEBUG </span><br><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>原因请参考文章<a href=\"https://blog.csdn.net/csxiaoshui/article/details/78720651\" target=\"_blank\" rel=\"noopener\">Freeglut中无法打开文件”freeglutd.lib”</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1．FreeGlut简介：\"><a href=\"#1．FreeGlut简介：\" class=\"headerlink\" title=\"1．FreeGlut简介：\"></a>1．FreeGlut简介：</h2><p>先介绍下<strong>Glut库</strong>。GLUT最初由MarkKilgard编写，从OpenGL Redbook（红宝书）第二版起就用来作为示例程序的支持环境，直到第八版为止（注：第九版开始改为GLFW）。从那时起，GLUT因为其简单、可用性广、可移植性强，被广泛应用于各种OpenGL实际应用中。Glut最新版本为3.7版，大致在1998年8月停止维护和更新，同时其代码也没有开源。<br><a href=\"http://freeglut.sourceforge.net/\" target=\"_blank\" rel=\"noopener\"><strong>Freeglut</strong></a>是Glut库(OpenGL Utility Toolkit，OpenGL实用工具包)的免费开源替代品。它是由Pawel W. Olszta在1999年12月创建，最新版本为2015年3月的3.0版本。</p>\n<h2 id=\"2-FreeGlut获取\"><a href=\"#2-FreeGlut获取\" class=\"headerlink\" title=\"2. FreeGlut获取\"></a>2. FreeGlut获取</h2><p>可以选择源码自己编译，也可以直接使用编译好的文件。<br>(1) 源码下载链接：<a href=\"http://prdownloads.sourceforge.net/freeglut/freeglut-3.0.0.tar.gz?download\" target=\"_blank\" rel=\"noopener\">http://prdownloads.sourceforge.net/freeglut/freeglut-3.0.0.tar.gz?download</a><br>(2) 编译好的文件下载链接：<br><a href=\"https://www.transmissionzero.co.uk/software/freeglut-devel/\" target=\"_blank\" rel=\"noopener\">https://www.transmissionzero.co.uk/software/freeglut-devel/</a><br>其中如果以VS为编程环境，可以直接下载上述链接页面中的MSVC包（“freeglut 3.0.0 MSVC Package”）。</p>\n<h2 id=\"3．FreeGlut配置\"><a href=\"#3．FreeGlut配置\" class=\"headerlink\" title=\"3．FreeGlut配置\"></a>3．FreeGlut配置</h2><p>下面以freeglut-MSVC.zip文件介绍FreeGlut在VS2017中的配置。<br><strong>(1) 头文件</strong><br>　　将freeglut\\include\\GL目录复制到 Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include目录下;<br><strong>(2) 库文件</strong><br>　　将freeglut\\lib\\freeglut.lib文件复制到Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x86目录下;<br>　　将freeglut\\lib\\x64\\freeglut.lib文件复制到Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x64目录下;<br><strong>(3) Dll文件</strong></p>\n<ul>\n<li>64位Windows系统：<br>　　将freeglut\\bin\\freeglut.dll文件复制到C:\\Windows\\SysWOW64目录下;<br>　　将freeglut\\bin\\x64\\freeglut.dll文件复制到c:\\Windows\\System32目录下;</li>\n<li>32位Windows系统：<br>　　将freeglut\\bin\\freeglut.dll文件复制到c:\\Windows\\System32目录下;<h2 id=\"4．补充\"><a href=\"#4．补充\" class=\"headerlink\" title=\"4．补充\"></a>4．补充</h2>为防止出现“无法打开文件“freeglutd.lib””的错误，需要在代码文件中#include &lt;GL/glut.h&gt;语句前加上#define NDEBUG，如下所示：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define NDEBUG </span><br><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>原因请参考文章<a href=\"https://blog.csdn.net/csxiaoshui/article/details/78720651\" target=\"_blank\" rel=\"noopener\">Freeglut中无法打开文件”freeglutd.lib”</a>。</p>\n"},{"title":"计算机图形学（OpenGL版）书中代码","_content":"本处代码主要为各章中除章节末的编程实例之外的有关代码，现全部贴出以飨读者。\n\n## 第3章 二维图形生成\n### 3.1 直线生成算法\n#### 3.1.1 数值微分法\n```\nvoid LineDDA(int x1, int y1, int x2, int y2, int color)\n{\n    int dm=0; \n    if (abs(x2-x1)>= abs(y2-y1) \t//abs是求绝对值的函数\n        dm=abs(x2-x1);\t//x为计长方向\n    else\n        dm=abs(y2-y1); \t//y为计长方向\n    float dx=(float)(x2-x1)/dm;\t//当x为计长方向时，dx的值为1\n    float dy=(float)(y2-y1)/dm;\t//当y为计长方向时，dy的值为1\n    float x=x1+0.5;\n    float y=y1+0.5;\n    for (int i=0; i< dm; i++)\n    {\n        setpixel( (int)x, (int)y, color);  \n        x+=dx;\n        y+=dy;\n    }\n}\n```\n#### 3.1.2 逐点比较法\n```\nvoid PrintLine(int x1, int y1, int x2, int y2, int color)\n{\n    int x, y, xA, yA;\n    if (y1>y2)\t//平移直线的坐标，使y值较小的点位于坐标原点\n    { yA=y1-y2; xA=x1-x2; }\n    else\n    {yA=y2-y1; xA=x2-x1; }\n    int F=x=y=0;\n    int n=abs(xA)+abs(yA);\n    for (int i=0; i<n; i++) {\n            if (xA>0) {\t//如果斜率为正\n        if (F>=0)  {x++; F-=yA;}\n        else { y++; F+=xA; }\n}\nelse {//如果斜率为负\n        if (F>=0)  {y++; F+=xA;}\n        else { x--; F+=yA; }\n}\nif (y1>y2)\n        setpixel(x+x2, y+y2, color); \nelse \n        setpixel(x+x1, y+y1, color); \n}\n\n\n```\n#### 3.1.3 Bresenham画线法\n```\nvoid swap_value (int* a, int* b)\n{\n    int temp=*a; \n    *a=*b;\n    *b=temp;\n}\nvoid Bres_Line(int x1, int y1, int x2, int y2, int color)\n{\n    setpixel(x1,y1, color);\n    int dx=abs(x2-x1);\n    int dy=abs(y2-y1);\n    if (dx==0&&dy==0)\n        return; \n    int flag=0;\n    if (dx<dy)         \t//下面将斜率变换至0≤|k|≤1区间\n    {\n        flag=1;\n        swap_value(&x1, &y1);\n        swap_value(&x2, &y2);\n        swap_value(&dx, &dy);\n    }\n    int tx=(x2-x1)>0 ? 1:-1;\n    int ty=(y2-y1)>0 ? 1: -1;\n    int curx=x1;\n    int cury=y1;\n    int dS=2*dy;\n    int dT=2*(dy-dx);\n    int d=dS-dx; \n    while (curx!=x2)\n    {\n        if (d<0) \n            d+=dS;\n        else\n        {cury+=ty;  d+=dT; }\n\n        if (flag)\n            setpixel(cury, curx, color);  \n        else \n            setpixel(curx, cury, color);\n        curx+=tx;\n    }\n}\n\n```\n\n#### 3.1.4 中点画线法\n```\nvoid MidPLine(int x0, int y0, int x1, int y1, int color)\n{\n    int a, b,  d, x, y,tag=0;\n    if(abs(x1-x0)<abs(y1-y0))\t//若斜率的绝对值大于1，将坐标和坐标互换\n    {  \n        swap(&x0,&y0);  \n        swap(&x1,&y1);\n        tag=1;\n    }\n    if(x0>x1)//保证x0<x1\n    {   \n        swap(&x0,&x1);\n        swap(&y0,&y1);\n    }\n    a=y0-y1;    \n    b=x1-x0; \n    d=a+b/2;    \n    if(y0<y1)//斜率为正\n    {\n        x=x0; y=y0;\n        setPixel(x, y, 255);\n        while (x<x1)\n        {    \n            if (d<0)       \n                {x++; y++; d=d+a+b; }\n            else       \n                {x++; d+=a;}\n            if(tag)//斜率大于1\n                setPixel(y, x, color);\t//互换\n            else\n                setPixel(x, y, color);\n        }  /* while */\n    }\n    else//斜率为负(y0>=y1)\n    {\t\n        x=x1;\n        y=y1;\n        setPixel(x, y, 255);\n        while (x>x0)\n        {  \n            if (d<0)       \n                {x--; y++; d=d-a+b; }\n            else       \n                {x--; d-=a;}\n            if(tag)//斜率大于1\n                setPixel(y, x, color);\t//互换\n            else\n                setPixel(x, y, color);\n        }  /* while */\n    }\n}\n\n```\n### 3.2 圆弧绘制算法\n#### 3.2.1 数值微分法\n##### 1. Bresenham算法\n```\n//8路对称\nvoid Cirpot(int x0, int y0, int x, int y, int color)\n{\n    SetPixel((x0+x), (y0+y), color);\n    SetPixel((x0+y), (y0+x), color);\n    SetPixel((x0+y), (y0-x), color);\n    SetPixel((x0+x), (y0-y), color );\n    SetPixel((x0-x), (y0-y), color );\n    SetPixel((x0-y), (y0-x), color );\n    SetPixel((x0-y), (y0+x), color);\n    SetPixel((x0-x), (y0+y), color);\n}\n\nvoid Bres_Circle(int x0, int y0, double r)\n{\n    int x,y,d;\n    x=0;\n    y=(int)r;\n    d=int(3-2*r);\n    while(x<y)\n    {\n        Cirpot( x0,y0,x,y);\n         if(d<0)\n             d+=4*x+6;\n         else\n         {\n             d+=4*(x-y)+10;\n             y--;\n         }\n         x++;\n    }\n    if(x==y)\n        Cirpot( x0,y0,x,y);\n}\n\n```\n\n##### 2. 中点画圆算法\n```\n//Cirpot函数与上述Bresenham算法代码中的Cirpot函数相同\nvoid MidPoint_Circle (int x0, int y0, int r, int color)\n{\n    int x=0;\n    int y=r;\n    int d=1- r;\t//是d=1.25 – r取整后的结果\n    Cirpot (x0, y0, x, y, color);\n    while ( x<y)\n    {\n        if (d<0) \n            d+=2*x+3; \n        else \n        {\n            d+= 2(x-y) +5;\n            y--;\n        }\n        x++;\n        Cirpot ( x0, y0, x, y, color);\n    }\n}\n\n```\n#### 3.2.2 角度离散法绘制圆弧和椭圆弧\n```\nvoid Arc_OpenGL(int xc, int yc, double r, double ts, double te)\n{\n    double pi=3.1415926;\n    if (te < ts) \t//当终止角比起始角还小时，则将终止角加上2π\n        te += 2*pi;\n    double dt = 0.4/r;\t//取角度离散值，使其与半径r成反比\n    int n=(int)(( te – ts ) / dt + 0.5 );\t//确定总步数\n    double ta = ts;\n    int x = xc + int ( r*cos(ts) );\n    int y = yc + int ( r*sin(ts) );\n    glBegin(GL_LINE_STRIP);\t//如果绘制整圆，选GL_LINE_LOOP更好\n    glVertex2f( x, y );\n    for(int i=1;i<=n;i++)\n    {\n        ta+=dt;\n        double cost = cos ( ta );\n        double sint = sin ( ta );\n        x = int ( xc + r * cost );\n        y = int ( yc + r * sint );\n        glVertex2f ( x, y );\n    }\n    glEnd();\n}\n\n```\n\n#### 3.3.1 种子填充算法\n```\n//四连通漫水法伪代码\nvoid FloodFill (x, y, newcolor, boundaryColor)\n{\n     Stack stack;\n     stack.Push(Pixel(x, y));\t//把种子像素(x,y)推入栈中\n     while (! stack.Empty())  \t//当栈不空时循环执行以下代码\n     {\n         pixel=stack.Pop();\t//从栈顶弹出一个像素\n            //当处理内定义区域时，用if (pixel.Color !=newcolor)判断即可\n         if (pixel.Color !=newcolor && pixel.Color !=boundaryColor)\n         {\n             xx=pixel.x; yy=pixel.y;\n            setpixel( xx,  yy,  newcolor, boundaryColor);\n            stack. Push ( Pixel (xx-1, yy  )) ;\n            stack. Push ( Pixel( xx,  yy+1)); \n            stack. Push ( Pixel (xx+1, yy  )); \n            stack.Push ( Pixel(xx, yy-1));\n         }\n    }\n}\n\n```\n## 第5章 二维观察\n### 5.3.2 直线裁剪\n#### 1. Cohen-Sutherland编码裁剪算法\n```\n# define LEFT 1\n# define RIGHT 2\n# define BOTTOM 4\n# define TOP 8\n\nvoid encode(float x, float y, float XL, float XR, float YB, float YT, int* code)\n{\n    int c = 0;\n    if (x<XL)\t c = c|LEFT;\n    else if (x>XR)\tc = c|RIGHT;\n    if (y<YB)\t\tc = c|BOTTOM;\n    else if(y>YT)\tc = c|TOP;\n    *code=c;\n    return;\n}\n\nvoid C_S_LineClip(float *x1, float *y1, float *x2, float *y2, float XL,\nfloat XR, float YB, float YT)\n{\n    int code1,code2,code;\n    float x, y;\n    encode(x1, y1, XL, XR, YB, YT, &code1);\n    encode(x2, y2, XL, XR, YB, YT, &code1);\n    while (code1!=0 || code2!=0)\n    {\n        if ((code1 & code2)!=0)\treturn;\n        code = code1;\n        if (code1==0)\tcode = code2;\n        if ((LEFT & code)!=0) {\t//线段与左边界相交\n            x = XL;\n            y = y1+(y2-y1)*(XL-x1)/(x2-x1);\n        }\n        else if ((RIGHT & code)!=0)\t//线段与右边界相交\n        {\n            x = XR;\n            y = y1+(y2-y1)*(XR-x1)/(x2-x1);\n        }\n        else if ((BOTTOM & code)!=0)\t//线段与下边界相交\n        {\n            y = YB;\n            x= x1+(x2-x1)*(YB-y1)/(y2-y1);\n        }\n        else if ((TOP & code)!=0)\t//线段与上边界相交\n        {\n            y = YT;\n            x= x1+(x2-x1)*(YT-y1)/(y2-y1);\n        }\n        if (code==code1){ \n            *x1 = x;\t*y1 = y;\n            encode(x, y, XL, XR, YB, YT, &code1);\n        }\n        else{ \n            *x2 = x;\t*y2 = y;\n            encode(x, y, XL, XR, YB, YT, &code2);\n        }\n    }\n    return;\n    }\n\n```\n#### 2．Liang-Barsky参数化裁剪算法\n```\n//x1,y1,x2,y2为直线端点坐标，XL,XR,YB,YT为窗口边界信息\nint L_B_LineClip(float *x1, float *y1, float *x2, float *y2, float XL,float XR, float YB, float YT)\n{\n    float u1 = 0, u2 = 1, dx = x2 – x1, dy;\n    //u1为始点参数，初值0；u2为终点参数，初值1\n    if (clipTest(-dx, x1-XL, &u1, &u2)) \t//计算左边界交点参数，更新u1,u2\n        if (clipTest(dx, XR-x1, &u1, &u2))\t//计算右边界交点参数，更新u1,u2\n        {\n            dy=y2-y1;\n            if(clipTest(-dy, y1-YB, &u1, &u2))\t//计算下边界交点参数，更新u1,u2\n                if (clipTest(dy, YT-y1, &u1, &u2))//计算上边界交点参数，更新u1,u2\n                {\n                    if(u2 < 1){\n                        *x2 = x1+u2*dx; \t//根据u2计算终点坐标\n                        *y2 = y1+u2*dy;\n                    }\n                    if(u1 > 0){\n                        *x1 += u1*dx;   \t//根据u1计算始点坐标\n                        *y1 += u1*dy;\n                    }\n                    return 1;\n                }\n        }\n        return 0;\n}\nint clipTest(float p, float q,float* u1,float* u2)\t//计算交点参数\n{\n    float r;\n    int retVal = 1;\n    if (p < 0){\n        r= q/p;\n        if (r>*u2)\t retVal = 0;\n        else if (r>*u1)\t*u1 = r;\n    }\n    else if (p > 0){\n        r= q/p;\n        if (r<*u1)\t retVal = 0;\n        else if (r < *u2) *u2 = r;\n    }\n    else if (q < 0)  retVal = 0;\n    return retVal;\n}\n```\n\n## 第7章 三维对象\n### 7.3.5  编程实例——简单实体构建\n```\n#include <gl/glut.h>  \n#include<iostream>\nusing namespace std;\nfloat\trtri;\nfloat\trquad; \nGLfloat points0[5][3] ={{ 0, 1,  0}, {-1, -1, 1}, { 1, -1, 1}, {\t1, -1, -1},{-1, -1,-1}};\nGLfloat points1[8][3]={ { 1, 1, -1 }, {-1, 1, -1}, {-1, 1, 1}, { 1, 1, 1},\n    { 1, -1, 1 }, {-1, -1, 1}, {-1,-1,-1}, { 1, -1, -1}};\nGLfloat Colors0[4][3]={{1,0,0},{0,1,0}, {0,0,1},{1,1,0}};\t//四棱锥的颜色\n//下行是立方体的颜色\nGLfloat Colors1[6][3]={{0,1,0},{1,0.5,0},{1,0,0},{1,1,0},{0,0,1},{1,0,1}};\nint vertice0[4][3]={{0,1,2},{0,2,3},{0,3,4},{0,4,1}};\t//四棱锥的顶点号序列\n//下行是立方体的顶点号序列\nint vertice1[6][4]={{0,1,2,3},{4,5,6,7},{3,2,5,4},{7,6,1,0},{2,1,6,5}, {0,3,4,7}};\nvoid InitGL ( GLvoid )    \n{\n    glShadeModel(GL_SMOOTH);\t\t\t\t\t\n    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);\t\t\t\n    glClearDepth(1.0f);\t\t\t\t\t\t\t\t\n    glEnable(GL_DEPTH_TEST);\t\t\t\t\t\t\t\n    glDepthFunc(GL_LEQUAL);\t\t\t\t\t\t\t\n    glEnable ( GL_COLOR_MATERIAL );\n    glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);\n}\nvoid CreatePyramid()\n{\n    glBegin(GL_TRIANGLES);\n    for(int i=0;i<4;i++)\n    {\n            glColor3fv(Colors0[i]);\n            for(int j=0;j<3;j++)\n            {\n                int VtxId=vertice0[i][j];\n                glVertex3fv(points0[VtxId]);\n            }\n    }\n    glEnd();\n    glBegin( GL_QUADS); \t//构建底面\n    glColor3f(1.0f, 1.0f, 1.0f );\n    for(i=0;i<4;i++)\n        glVertex3fv(points0[i]);\t\n    glEnd();\n}\nvoid CreateCube()\n{\n    glBegin(GL_QUADS);\t\n    for(int i=0;i<6;i++)\n    {\n        glColor3fv(Colors1[i]);\n        for(int j=0;j<4;j++)\n        {\n            int VtxId=vertice1[i][j];\n            glVertex3fv(points1[VtxId]);\n        }\n    }\n    glEnd();\t\t\t\t\t\t\n}\nvoid display ( void )   \n{\n    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\t\n    glLoadIdentity();\t\n    glPushMatrix();\n    glTranslatef(-1.5f,0.0f,-6.0f);\t//平移至左侧\n    glRotatef(rtri,0.0f,1.0f,0.0f);\t//旋转一个角度\n    CreatePyramid();\t//创建三角塔\n\n    glLoadIdentity();\t//将矩阵归一化回原样    \n    glTranslatef(1.5f,0.0f,-6.0f);\t//平移到右侧\n    glRotatef(rquad,1.0f,0.0f,0.0f);\t//旋转一个角度\n    CreateCube(); \t//创建立方体\n    glPopMatrix();\n    \n    rtri+=0.2f;\t//修改三角塔旋转角度\n    rquad-=0.15f;\t//修改立方体的旋转角度\n    glutSwapBuffers ( );  \n}\nvoid reshape ( int width , int height )  \n{\n    if (height==0)\t\t\t\t\t\t\t\t\t\n        height=1;\t\t\t\t\t\t\t\t\t\t\n    glViewport(0,0,width,height);\t\n    glMatrixMode(GL_PROJECTION);\t\t\t\t\t\t\n    glLoadIdentity();\t\t\t\t\t\t\t\t\t\n    gluPerspective(45.0f,(GLfloat)width/(GLfloat)height,0.1f,100.0f);\n    glMatrixMode(GL_MODELVIEW);\t\t\t\t\t\t\t\n    glLoadIdentity();\t\t\t\t\t\t\t\t\t\n}\nvoid main ( int argc, char** argv )  \n{\n    glutInit ( &argc, argv ); \n    glutInitDisplayMode ( GLUT_RGBA | GLUT_DOUBLE ); \n    glutInitWindowSize ( 600, 400 ); \n    glutCreateWindow ( \"Pyramid and cube\" );\n    InitGL();\n    glutDisplayFunc ( display ); \n    glutReshapeFunc ( reshape );\n    glutIdleFunc ( display );\n    glutMainLoop ( );\n}\n```\n### 7.4.2  Hermite曲线\n```\nclass Point  \t//点类\n{\nDouble x，y;\nPoint(double vx， double vy)\n{\n    This.x=vx;\n    This.y=vy;\n}\nPoint operator – (Point p) \t//重载运算符“-”\n{\n    Return new Point(x-p.x ， y-p.y);\n}\n}\n//在p1和p2之间绘制一条Hermite曲线\n//p1-p0为p1处的切线矢量，p3-p2为p2处的切线矢量\n//参数区间[0，1]被离散为count份\nvoid HermiteCurve(Point p0，Point p1，Point p2，Point p3，int count)\n{\n    Point r1，r2;\t//切线矢量\n    r1 = p1 - p0;\t//调用重载-\n    r2 = p3 - p2; \n    double t = 0.0;\n    dt = 1.0 / count;\n    moveto(p1.x，p1.y);\t//设置起点\n    for(int i=0; i<count+1; i++)\n    {\n        double tt = t * t;\n        double ttt = tt * t;\n        double F1，F2，F3，F4;\t//调和函数\n        F1 = 2 * ttt - 3 * tt + 1;\n        F2 = -2 * ttt + 3 * tt;\n        F3 = ttt - 2 * tt + t;\n        F4 = ttt - tt;\n        double x = p1.x * F1 + p2.x * F2 + r1.x * F3 + r2.x * F4;\n        double y = p1.y * F1 + p2.y * F2 + r1.y * F3 + r2.y * F4;\n        lineto(x，y);\n        t+=dt;\n    }\n}\n```\n\n### 7.4.3  Bezier曲线\n#### 3．三次Bezier曲线的绘制\n```\n//绘制由p0，p1，p2，p3确定的Bezier曲线\n//参数区间[0，1]被离散为count份\nvoid BezierCurve(Point p0,Point p1,Point p2,Point p3,int count)\n{\n    double t = 0.0;\n    dt = 1.0 / count;\n    moveto(p1.x,p1.y);\t//设置起点\n    for(int i=0; i<count+1; i++)\n    {\n        double F1,F2,F3,F4,x,y;\t//调和函数\n        double u = 1.0 – t ;\n        F1 = u * u * u ;\n        F2 = 3 * t * u * u;\n        F3 = 3 * t * t * u;\n        F4 = t * t * t;\n        x = p0.x * F1 + p1.x * F2 + p2.x * F3 + p3.x * F4;\n        y = p0.y * F1 + p1.y * F2 + p2.y * F3 + p3.y * F4;\n        lineto(x,y);\n          t+=dt;\n    }\n}\n```\n#### 4．离散生成Beizer曲线的de Casteljau算法\n```\nvoid Casteljau(Point p0,  Point p1,  Point p2,  Point p3) \n{\n    double t=0;\n    int count=20;\n    double dt=1.0/count;\n    MoveTo(p0);\n    for(int i=0;i<count;i++)\n    {\n        Point p01,p11,p21,p02,p12,p03;\n        p01.x=(1-t)*p0.x+t*p1.x;\n        p01.y=(1-t)*p0.y+t*p1.y;\n\n        p11.x=(1-t)*p1.x+t*p2.x;\n        p11.y=(1-t)*p1.y+t*p2.y;\n\n        p21.x=(1-t)*p2.x+t*p3.x;\n        p21.y=(1-t)*p2.y+t*p3.y;\n\n        p02.x=(1-t)*p01.x+t*p11.x;\n        p02.y=(1-t)*p01.y+t*p11.y;\n\n        p12.x=(1-t)*p11.x+t*p21.x;\n        p12.y=(1-t)*p11.y+t*p21.y;\n\n        p03.x=(1-t)*p02.x+t*p12.x;\n        p03.y=(1-t)*p02.y+t*p12.y;\n        dc->LineTo(p03);\n        t+=dt;\n    }\n}\n```\n\n## 第8章真实感图形技术\n### 8.3.4  OpenGL中的颜色模型\n```\n#include <GL/glut.h>\nvoid init(void)\n{\n    glClearColor(1.0,1.0,1.0,0.0);\n    glShadeModel(GL_SMOOTH);\n}\nvoid triangle(void)\n{\n    glBegin (GL_TRIANGLES);\n    glColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (5.0f,5.0f);\n    glColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (25.0f,5.0f);\n    glColor3f (0.0f, 0.0f, 1.0f);   glVertex2f (5.0f,25.0f);\n    glEnd ();\n\n    glBegin (GL_TRIANGLES);\n    glColor3f (1.0f, 1.0f, 0.0f);   glVertex2f (26.0f,25.0f);\n    glColor3f (0.0f, 1.0f, 1.0f);   glVertex2f (26.0f,5.0f);\n    glColor3f (1.0f, 0.0f, 1.0f);   glVertex2f (6.0f,25.0f);\n    glEnd ();\n}\n\nvoid display(void)\n{\n    glClear(GL_COLOR_BUFFER_BIT);\n    triangle();\n    glFlush();\n}\n\nvoid reshape(int w,int h)\n{\n    glViewport(0,0,(GLsizei)w, (GLsizei)h);\n    glMatrixMode(GL_PROJECTION);\n    glLoadIdentity();\n    if(w <= h)\n        gluOrtho2D(0.0,30.0,0.0,30.0*(GLfloat)h/(GLfloat)w);\n    else\n        gluOrtho2D(0.0,30.0*(GLfloat)w/(GLfloat)h,0.0,30.0);\n    glMatrixMode(GL_MODELVIEW);\n}\n\nint main(int argc, char** argv)\n{  glutInit(&argc, argv);\n   glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);\n   glutInitWindowSize(500, 500);\n   glutInitWindowPosition(100, 100);\n   glutCreateWindow(\"OpenGL颜色函数例程\");\n   init();\n   glutDisplayFunc(display);\n   glutReshapeFunc(reshape);\n   glutMainLoop();\n   return 0;\n}\n\n```","source":"_posts/CGBook_Code.md","raw":"---\ntitle: 计算机图形学（OpenGL版）书中代码\ntags: [图形学]\ncategories: 图形学\n---\n本处代码主要为各章中除章节末的编程实例之外的有关代码，现全部贴出以飨读者。\n\n## 第3章 二维图形生成\n### 3.1 直线生成算法\n#### 3.1.1 数值微分法\n```\nvoid LineDDA(int x1, int y1, int x2, int y2, int color)\n{\n    int dm=0; \n    if (abs(x2-x1)>= abs(y2-y1) \t//abs是求绝对值的函数\n        dm=abs(x2-x1);\t//x为计长方向\n    else\n        dm=abs(y2-y1); \t//y为计长方向\n    float dx=(float)(x2-x1)/dm;\t//当x为计长方向时，dx的值为1\n    float dy=(float)(y2-y1)/dm;\t//当y为计长方向时，dy的值为1\n    float x=x1+0.5;\n    float y=y1+0.5;\n    for (int i=0; i< dm; i++)\n    {\n        setpixel( (int)x, (int)y, color);  \n        x+=dx;\n        y+=dy;\n    }\n}\n```\n#### 3.1.2 逐点比较法\n```\nvoid PrintLine(int x1, int y1, int x2, int y2, int color)\n{\n    int x, y, xA, yA;\n    if (y1>y2)\t//平移直线的坐标，使y值较小的点位于坐标原点\n    { yA=y1-y2; xA=x1-x2; }\n    else\n    {yA=y2-y1; xA=x2-x1; }\n    int F=x=y=0;\n    int n=abs(xA)+abs(yA);\n    for (int i=0; i<n; i++) {\n            if (xA>0) {\t//如果斜率为正\n        if (F>=0)  {x++; F-=yA;}\n        else { y++; F+=xA; }\n}\nelse {//如果斜率为负\n        if (F>=0)  {y++; F+=xA;}\n        else { x--; F+=yA; }\n}\nif (y1>y2)\n        setpixel(x+x2, y+y2, color); \nelse \n        setpixel(x+x1, y+y1, color); \n}\n\n\n```\n#### 3.1.3 Bresenham画线法\n```\nvoid swap_value (int* a, int* b)\n{\n    int temp=*a; \n    *a=*b;\n    *b=temp;\n}\nvoid Bres_Line(int x1, int y1, int x2, int y2, int color)\n{\n    setpixel(x1,y1, color);\n    int dx=abs(x2-x1);\n    int dy=abs(y2-y1);\n    if (dx==0&&dy==0)\n        return; \n    int flag=0;\n    if (dx<dy)         \t//下面将斜率变换至0≤|k|≤1区间\n    {\n        flag=1;\n        swap_value(&x1, &y1);\n        swap_value(&x2, &y2);\n        swap_value(&dx, &dy);\n    }\n    int tx=(x2-x1)>0 ? 1:-1;\n    int ty=(y2-y1)>0 ? 1: -1;\n    int curx=x1;\n    int cury=y1;\n    int dS=2*dy;\n    int dT=2*(dy-dx);\n    int d=dS-dx; \n    while (curx!=x2)\n    {\n        if (d<0) \n            d+=dS;\n        else\n        {cury+=ty;  d+=dT; }\n\n        if (flag)\n            setpixel(cury, curx, color);  \n        else \n            setpixel(curx, cury, color);\n        curx+=tx;\n    }\n}\n\n```\n\n#### 3.1.4 中点画线法\n```\nvoid MidPLine(int x0, int y0, int x1, int y1, int color)\n{\n    int a, b,  d, x, y,tag=0;\n    if(abs(x1-x0)<abs(y1-y0))\t//若斜率的绝对值大于1，将坐标和坐标互换\n    {  \n        swap(&x0,&y0);  \n        swap(&x1,&y1);\n        tag=1;\n    }\n    if(x0>x1)//保证x0<x1\n    {   \n        swap(&x0,&x1);\n        swap(&y0,&y1);\n    }\n    a=y0-y1;    \n    b=x1-x0; \n    d=a+b/2;    \n    if(y0<y1)//斜率为正\n    {\n        x=x0; y=y0;\n        setPixel(x, y, 255);\n        while (x<x1)\n        {    \n            if (d<0)       \n                {x++; y++; d=d+a+b; }\n            else       \n                {x++; d+=a;}\n            if(tag)//斜率大于1\n                setPixel(y, x, color);\t//互换\n            else\n                setPixel(x, y, color);\n        }  /* while */\n    }\n    else//斜率为负(y0>=y1)\n    {\t\n        x=x1;\n        y=y1;\n        setPixel(x, y, 255);\n        while (x>x0)\n        {  \n            if (d<0)       \n                {x--; y++; d=d-a+b; }\n            else       \n                {x--; d-=a;}\n            if(tag)//斜率大于1\n                setPixel(y, x, color);\t//互换\n            else\n                setPixel(x, y, color);\n        }  /* while */\n    }\n}\n\n```\n### 3.2 圆弧绘制算法\n#### 3.2.1 数值微分法\n##### 1. Bresenham算法\n```\n//8路对称\nvoid Cirpot(int x0, int y0, int x, int y, int color)\n{\n    SetPixel((x0+x), (y0+y), color);\n    SetPixel((x0+y), (y0+x), color);\n    SetPixel((x0+y), (y0-x), color);\n    SetPixel((x0+x), (y0-y), color );\n    SetPixel((x0-x), (y0-y), color );\n    SetPixel((x0-y), (y0-x), color );\n    SetPixel((x0-y), (y0+x), color);\n    SetPixel((x0-x), (y0+y), color);\n}\n\nvoid Bres_Circle(int x0, int y0, double r)\n{\n    int x,y,d;\n    x=0;\n    y=(int)r;\n    d=int(3-2*r);\n    while(x<y)\n    {\n        Cirpot( x0,y0,x,y);\n         if(d<0)\n             d+=4*x+6;\n         else\n         {\n             d+=4*(x-y)+10;\n             y--;\n         }\n         x++;\n    }\n    if(x==y)\n        Cirpot( x0,y0,x,y);\n}\n\n```\n\n##### 2. 中点画圆算法\n```\n//Cirpot函数与上述Bresenham算法代码中的Cirpot函数相同\nvoid MidPoint_Circle (int x0, int y0, int r, int color)\n{\n    int x=0;\n    int y=r;\n    int d=1- r;\t//是d=1.25 – r取整后的结果\n    Cirpot (x0, y0, x, y, color);\n    while ( x<y)\n    {\n        if (d<0) \n            d+=2*x+3; \n        else \n        {\n            d+= 2(x-y) +5;\n            y--;\n        }\n        x++;\n        Cirpot ( x0, y0, x, y, color);\n    }\n}\n\n```\n#### 3.2.2 角度离散法绘制圆弧和椭圆弧\n```\nvoid Arc_OpenGL(int xc, int yc, double r, double ts, double te)\n{\n    double pi=3.1415926;\n    if (te < ts) \t//当终止角比起始角还小时，则将终止角加上2π\n        te += 2*pi;\n    double dt = 0.4/r;\t//取角度离散值，使其与半径r成反比\n    int n=(int)(( te – ts ) / dt + 0.5 );\t//确定总步数\n    double ta = ts;\n    int x = xc + int ( r*cos(ts) );\n    int y = yc + int ( r*sin(ts) );\n    glBegin(GL_LINE_STRIP);\t//如果绘制整圆，选GL_LINE_LOOP更好\n    glVertex2f( x, y );\n    for(int i=1;i<=n;i++)\n    {\n        ta+=dt;\n        double cost = cos ( ta );\n        double sint = sin ( ta );\n        x = int ( xc + r * cost );\n        y = int ( yc + r * sint );\n        glVertex2f ( x, y );\n    }\n    glEnd();\n}\n\n```\n\n#### 3.3.1 种子填充算法\n```\n//四连通漫水法伪代码\nvoid FloodFill (x, y, newcolor, boundaryColor)\n{\n     Stack stack;\n     stack.Push(Pixel(x, y));\t//把种子像素(x,y)推入栈中\n     while (! stack.Empty())  \t//当栈不空时循环执行以下代码\n     {\n         pixel=stack.Pop();\t//从栈顶弹出一个像素\n            //当处理内定义区域时，用if (pixel.Color !=newcolor)判断即可\n         if (pixel.Color !=newcolor && pixel.Color !=boundaryColor)\n         {\n             xx=pixel.x; yy=pixel.y;\n            setpixel( xx,  yy,  newcolor, boundaryColor);\n            stack. Push ( Pixel (xx-1, yy  )) ;\n            stack. Push ( Pixel( xx,  yy+1)); \n            stack. Push ( Pixel (xx+1, yy  )); \n            stack.Push ( Pixel(xx, yy-1));\n         }\n    }\n}\n\n```\n## 第5章 二维观察\n### 5.3.2 直线裁剪\n#### 1. Cohen-Sutherland编码裁剪算法\n```\n# define LEFT 1\n# define RIGHT 2\n# define BOTTOM 4\n# define TOP 8\n\nvoid encode(float x, float y, float XL, float XR, float YB, float YT, int* code)\n{\n    int c = 0;\n    if (x<XL)\t c = c|LEFT;\n    else if (x>XR)\tc = c|RIGHT;\n    if (y<YB)\t\tc = c|BOTTOM;\n    else if(y>YT)\tc = c|TOP;\n    *code=c;\n    return;\n}\n\nvoid C_S_LineClip(float *x1, float *y1, float *x2, float *y2, float XL,\nfloat XR, float YB, float YT)\n{\n    int code1,code2,code;\n    float x, y;\n    encode(x1, y1, XL, XR, YB, YT, &code1);\n    encode(x2, y2, XL, XR, YB, YT, &code1);\n    while (code1!=0 || code2!=0)\n    {\n        if ((code1 & code2)!=0)\treturn;\n        code = code1;\n        if (code1==0)\tcode = code2;\n        if ((LEFT & code)!=0) {\t//线段与左边界相交\n            x = XL;\n            y = y1+(y2-y1)*(XL-x1)/(x2-x1);\n        }\n        else if ((RIGHT & code)!=0)\t//线段与右边界相交\n        {\n            x = XR;\n            y = y1+(y2-y1)*(XR-x1)/(x2-x1);\n        }\n        else if ((BOTTOM & code)!=0)\t//线段与下边界相交\n        {\n            y = YB;\n            x= x1+(x2-x1)*(YB-y1)/(y2-y1);\n        }\n        else if ((TOP & code)!=0)\t//线段与上边界相交\n        {\n            y = YT;\n            x= x1+(x2-x1)*(YT-y1)/(y2-y1);\n        }\n        if (code==code1){ \n            *x1 = x;\t*y1 = y;\n            encode(x, y, XL, XR, YB, YT, &code1);\n        }\n        else{ \n            *x2 = x;\t*y2 = y;\n            encode(x, y, XL, XR, YB, YT, &code2);\n        }\n    }\n    return;\n    }\n\n```\n#### 2．Liang-Barsky参数化裁剪算法\n```\n//x1,y1,x2,y2为直线端点坐标，XL,XR,YB,YT为窗口边界信息\nint L_B_LineClip(float *x1, float *y1, float *x2, float *y2, float XL,float XR, float YB, float YT)\n{\n    float u1 = 0, u2 = 1, dx = x2 – x1, dy;\n    //u1为始点参数，初值0；u2为终点参数，初值1\n    if (clipTest(-dx, x1-XL, &u1, &u2)) \t//计算左边界交点参数，更新u1,u2\n        if (clipTest(dx, XR-x1, &u1, &u2))\t//计算右边界交点参数，更新u1,u2\n        {\n            dy=y2-y1;\n            if(clipTest(-dy, y1-YB, &u1, &u2))\t//计算下边界交点参数，更新u1,u2\n                if (clipTest(dy, YT-y1, &u1, &u2))//计算上边界交点参数，更新u1,u2\n                {\n                    if(u2 < 1){\n                        *x2 = x1+u2*dx; \t//根据u2计算终点坐标\n                        *y2 = y1+u2*dy;\n                    }\n                    if(u1 > 0){\n                        *x1 += u1*dx;   \t//根据u1计算始点坐标\n                        *y1 += u1*dy;\n                    }\n                    return 1;\n                }\n        }\n        return 0;\n}\nint clipTest(float p, float q,float* u1,float* u2)\t//计算交点参数\n{\n    float r;\n    int retVal = 1;\n    if (p < 0){\n        r= q/p;\n        if (r>*u2)\t retVal = 0;\n        else if (r>*u1)\t*u1 = r;\n    }\n    else if (p > 0){\n        r= q/p;\n        if (r<*u1)\t retVal = 0;\n        else if (r < *u2) *u2 = r;\n    }\n    else if (q < 0)  retVal = 0;\n    return retVal;\n}\n```\n\n## 第7章 三维对象\n### 7.3.5  编程实例——简单实体构建\n```\n#include <gl/glut.h>  \n#include<iostream>\nusing namespace std;\nfloat\trtri;\nfloat\trquad; \nGLfloat points0[5][3] ={{ 0, 1,  0}, {-1, -1, 1}, { 1, -1, 1}, {\t1, -1, -1},{-1, -1,-1}};\nGLfloat points1[8][3]={ { 1, 1, -1 }, {-1, 1, -1}, {-1, 1, 1}, { 1, 1, 1},\n    { 1, -1, 1 }, {-1, -1, 1}, {-1,-1,-1}, { 1, -1, -1}};\nGLfloat Colors0[4][3]={{1,0,0},{0,1,0}, {0,0,1},{1,1,0}};\t//四棱锥的颜色\n//下行是立方体的颜色\nGLfloat Colors1[6][3]={{0,1,0},{1,0.5,0},{1,0,0},{1,1,0},{0,0,1},{1,0,1}};\nint vertice0[4][3]={{0,1,2},{0,2,3},{0,3,4},{0,4,1}};\t//四棱锥的顶点号序列\n//下行是立方体的顶点号序列\nint vertice1[6][4]={{0,1,2,3},{4,5,6,7},{3,2,5,4},{7,6,1,0},{2,1,6,5}, {0,3,4,7}};\nvoid InitGL ( GLvoid )    \n{\n    glShadeModel(GL_SMOOTH);\t\t\t\t\t\n    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);\t\t\t\n    glClearDepth(1.0f);\t\t\t\t\t\t\t\t\n    glEnable(GL_DEPTH_TEST);\t\t\t\t\t\t\t\n    glDepthFunc(GL_LEQUAL);\t\t\t\t\t\t\t\n    glEnable ( GL_COLOR_MATERIAL );\n    glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);\n}\nvoid CreatePyramid()\n{\n    glBegin(GL_TRIANGLES);\n    for(int i=0;i<4;i++)\n    {\n            glColor3fv(Colors0[i]);\n            for(int j=0;j<3;j++)\n            {\n                int VtxId=vertice0[i][j];\n                glVertex3fv(points0[VtxId]);\n            }\n    }\n    glEnd();\n    glBegin( GL_QUADS); \t//构建底面\n    glColor3f(1.0f, 1.0f, 1.0f );\n    for(i=0;i<4;i++)\n        glVertex3fv(points0[i]);\t\n    glEnd();\n}\nvoid CreateCube()\n{\n    glBegin(GL_QUADS);\t\n    for(int i=0;i<6;i++)\n    {\n        glColor3fv(Colors1[i]);\n        for(int j=0;j<4;j++)\n        {\n            int VtxId=vertice1[i][j];\n            glVertex3fv(points1[VtxId]);\n        }\n    }\n    glEnd();\t\t\t\t\t\t\n}\nvoid display ( void )   \n{\n    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\t\n    glLoadIdentity();\t\n    glPushMatrix();\n    glTranslatef(-1.5f,0.0f,-6.0f);\t//平移至左侧\n    glRotatef(rtri,0.0f,1.0f,0.0f);\t//旋转一个角度\n    CreatePyramid();\t//创建三角塔\n\n    glLoadIdentity();\t//将矩阵归一化回原样    \n    glTranslatef(1.5f,0.0f,-6.0f);\t//平移到右侧\n    glRotatef(rquad,1.0f,0.0f,0.0f);\t//旋转一个角度\n    CreateCube(); \t//创建立方体\n    glPopMatrix();\n    \n    rtri+=0.2f;\t//修改三角塔旋转角度\n    rquad-=0.15f;\t//修改立方体的旋转角度\n    glutSwapBuffers ( );  \n}\nvoid reshape ( int width , int height )  \n{\n    if (height==0)\t\t\t\t\t\t\t\t\t\n        height=1;\t\t\t\t\t\t\t\t\t\t\n    glViewport(0,0,width,height);\t\n    glMatrixMode(GL_PROJECTION);\t\t\t\t\t\t\n    glLoadIdentity();\t\t\t\t\t\t\t\t\t\n    gluPerspective(45.0f,(GLfloat)width/(GLfloat)height,0.1f,100.0f);\n    glMatrixMode(GL_MODELVIEW);\t\t\t\t\t\t\t\n    glLoadIdentity();\t\t\t\t\t\t\t\t\t\n}\nvoid main ( int argc, char** argv )  \n{\n    glutInit ( &argc, argv ); \n    glutInitDisplayMode ( GLUT_RGBA | GLUT_DOUBLE ); \n    glutInitWindowSize ( 600, 400 ); \n    glutCreateWindow ( \"Pyramid and cube\" );\n    InitGL();\n    glutDisplayFunc ( display ); \n    glutReshapeFunc ( reshape );\n    glutIdleFunc ( display );\n    glutMainLoop ( );\n}\n```\n### 7.4.2  Hermite曲线\n```\nclass Point  \t//点类\n{\nDouble x，y;\nPoint(double vx， double vy)\n{\n    This.x=vx;\n    This.y=vy;\n}\nPoint operator – (Point p) \t//重载运算符“-”\n{\n    Return new Point(x-p.x ， y-p.y);\n}\n}\n//在p1和p2之间绘制一条Hermite曲线\n//p1-p0为p1处的切线矢量，p3-p2为p2处的切线矢量\n//参数区间[0，1]被离散为count份\nvoid HermiteCurve(Point p0，Point p1，Point p2，Point p3，int count)\n{\n    Point r1，r2;\t//切线矢量\n    r1 = p1 - p0;\t//调用重载-\n    r2 = p3 - p2; \n    double t = 0.0;\n    dt = 1.0 / count;\n    moveto(p1.x，p1.y);\t//设置起点\n    for(int i=0; i<count+1; i++)\n    {\n        double tt = t * t;\n        double ttt = tt * t;\n        double F1，F2，F3，F4;\t//调和函数\n        F1 = 2 * ttt - 3 * tt + 1;\n        F2 = -2 * ttt + 3 * tt;\n        F3 = ttt - 2 * tt + t;\n        F4 = ttt - tt;\n        double x = p1.x * F1 + p2.x * F2 + r1.x * F3 + r2.x * F4;\n        double y = p1.y * F1 + p2.y * F2 + r1.y * F3 + r2.y * F4;\n        lineto(x，y);\n        t+=dt;\n    }\n}\n```\n\n### 7.4.3  Bezier曲线\n#### 3．三次Bezier曲线的绘制\n```\n//绘制由p0，p1，p2，p3确定的Bezier曲线\n//参数区间[0，1]被离散为count份\nvoid BezierCurve(Point p0,Point p1,Point p2,Point p3,int count)\n{\n    double t = 0.0;\n    dt = 1.0 / count;\n    moveto(p1.x,p1.y);\t//设置起点\n    for(int i=0; i<count+1; i++)\n    {\n        double F1,F2,F3,F4,x,y;\t//调和函数\n        double u = 1.0 – t ;\n        F1 = u * u * u ;\n        F2 = 3 * t * u * u;\n        F3 = 3 * t * t * u;\n        F4 = t * t * t;\n        x = p0.x * F1 + p1.x * F2 + p2.x * F3 + p3.x * F4;\n        y = p0.y * F1 + p1.y * F2 + p2.y * F3 + p3.y * F4;\n        lineto(x,y);\n          t+=dt;\n    }\n}\n```\n#### 4．离散生成Beizer曲线的de Casteljau算法\n```\nvoid Casteljau(Point p0,  Point p1,  Point p2,  Point p3) \n{\n    double t=0;\n    int count=20;\n    double dt=1.0/count;\n    MoveTo(p0);\n    for(int i=0;i<count;i++)\n    {\n        Point p01,p11,p21,p02,p12,p03;\n        p01.x=(1-t)*p0.x+t*p1.x;\n        p01.y=(1-t)*p0.y+t*p1.y;\n\n        p11.x=(1-t)*p1.x+t*p2.x;\n        p11.y=(1-t)*p1.y+t*p2.y;\n\n        p21.x=(1-t)*p2.x+t*p3.x;\n        p21.y=(1-t)*p2.y+t*p3.y;\n\n        p02.x=(1-t)*p01.x+t*p11.x;\n        p02.y=(1-t)*p01.y+t*p11.y;\n\n        p12.x=(1-t)*p11.x+t*p21.x;\n        p12.y=(1-t)*p11.y+t*p21.y;\n\n        p03.x=(1-t)*p02.x+t*p12.x;\n        p03.y=(1-t)*p02.y+t*p12.y;\n        dc->LineTo(p03);\n        t+=dt;\n    }\n}\n```\n\n## 第8章真实感图形技术\n### 8.3.4  OpenGL中的颜色模型\n```\n#include <GL/glut.h>\nvoid init(void)\n{\n    glClearColor(1.0,1.0,1.0,0.0);\n    glShadeModel(GL_SMOOTH);\n}\nvoid triangle(void)\n{\n    glBegin (GL_TRIANGLES);\n    glColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (5.0f,5.0f);\n    glColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (25.0f,5.0f);\n    glColor3f (0.0f, 0.0f, 1.0f);   glVertex2f (5.0f,25.0f);\n    glEnd ();\n\n    glBegin (GL_TRIANGLES);\n    glColor3f (1.0f, 1.0f, 0.0f);   glVertex2f (26.0f,25.0f);\n    glColor3f (0.0f, 1.0f, 1.0f);   glVertex2f (26.0f,5.0f);\n    glColor3f (1.0f, 0.0f, 1.0f);   glVertex2f (6.0f,25.0f);\n    glEnd ();\n}\n\nvoid display(void)\n{\n    glClear(GL_COLOR_BUFFER_BIT);\n    triangle();\n    glFlush();\n}\n\nvoid reshape(int w,int h)\n{\n    glViewport(0,0,(GLsizei)w, (GLsizei)h);\n    glMatrixMode(GL_PROJECTION);\n    glLoadIdentity();\n    if(w <= h)\n        gluOrtho2D(0.0,30.0,0.0,30.0*(GLfloat)h/(GLfloat)w);\n    else\n        gluOrtho2D(0.0,30.0*(GLfloat)w/(GLfloat)h,0.0,30.0);\n    glMatrixMode(GL_MODELVIEW);\n}\n\nint main(int argc, char** argv)\n{  glutInit(&argc, argv);\n   glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);\n   glutInitWindowSize(500, 500);\n   glutInitWindowPosition(100, 100);\n   glutCreateWindow(\"OpenGL颜色函数例程\");\n   init();\n   glutDisplayFunc(display);\n   glutReshapeFunc(reshape);\n   glutMainLoop();\n   return 0;\n}\n\n```","slug":"CGBook_Code","published":1,"date":"2020-01-19T08:28:10.750Z","updated":"2019-08-18T02:04:22.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers05e000hr0akwrubjxbn","content":"<p>本处代码主要为各章中除章节末的编程实例之外的有关代码，现全部贴出以飨读者。</p>\n<h2 id=\"第3章-二维图形生成\"><a href=\"#第3章-二维图形生成\" class=\"headerlink\" title=\"第3章 二维图形生成\"></a>第3章 二维图形生成</h2><h3 id=\"3-1-直线生成算法\"><a href=\"#3-1-直线生成算法\" class=\"headerlink\" title=\"3.1 直线生成算法\"></a>3.1 直线生成算法</h3><h4 id=\"3-1-1-数值微分法\"><a href=\"#3-1-1-数值微分法\" class=\"headerlink\" title=\"3.1.1 数值微分法\"></a>3.1.1 数值微分法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void LineDDA(int x1, int y1, int x2, int y2, int color)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int dm=0; </span><br><span class=\"line\">    if (abs(x2-x1)&gt;= abs(y2-y1) \t//abs是求绝对值的函数</span><br><span class=\"line\">        dm=abs(x2-x1);\t//x为计长方向</span><br><span class=\"line\">    else</span><br><span class=\"line\">        dm=abs(y2-y1); \t//y为计长方向</span><br><span class=\"line\">    float dx=(float)(x2-x1)/dm;\t//当x为计长方向时，dx的值为1</span><br><span class=\"line\">    float dy=(float)(y2-y1)/dm;\t//当y为计长方向时，dy的值为1</span><br><span class=\"line\">    float x=x1+0.5;</span><br><span class=\"line\">    float y=y1+0.5;</span><br><span class=\"line\">    for (int i=0; i&lt; dm; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        setpixel( (int)x, (int)y, color);  </span><br><span class=\"line\">        x+=dx;</span><br><span class=\"line\">        y+=dy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-1-2-逐点比较法\"><a href=\"#3-1-2-逐点比较法\" class=\"headerlink\" title=\"3.1.2 逐点比较法\"></a>3.1.2 逐点比较法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void PrintLine(int x1, int y1, int x2, int y2, int color)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int x, y, xA, yA;</span><br><span class=\"line\">    if (y1&gt;y2)\t//平移直线的坐标，使y值较小的点位于坐标原点</span><br><span class=\"line\">    &#123; yA=y1-y2; xA=x1-x2; &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;yA=y2-y1; xA=x2-x1; &#125;</span><br><span class=\"line\">    int F=x=y=0;</span><br><span class=\"line\">    int n=abs(xA)+abs(yA);</span><br><span class=\"line\">    for (int i=0; i&lt;n; i++) &#123;</span><br><span class=\"line\">            if (xA&gt;0) &#123;\t//如果斜率为正</span><br><span class=\"line\">        if (F&gt;=0)  &#123;x++; F-=yA;&#125;</span><br><span class=\"line\">        else &#123; y++; F+=xA; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;//如果斜率为负</span><br><span class=\"line\">        if (F&gt;=0)  &#123;y++; F+=xA;&#125;</span><br><span class=\"line\">        else &#123; x--; F+=yA; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (y1&gt;y2)</span><br><span class=\"line\">        setpixel(x+x2, y+y2, color); </span><br><span class=\"line\">else </span><br><span class=\"line\">        setpixel(x+x1, y+y1, color); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-1-3-Bresenham画线法\"><a href=\"#3-1-3-Bresenham画线法\" class=\"headerlink\" title=\"3.1.3 Bresenham画线法\"></a>3.1.3 Bresenham画线法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void swap_value (int* a, int* b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int temp=*a; </span><br><span class=\"line\">    *a=*b;</span><br><span class=\"line\">    *b=temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void Bres_Line(int x1, int y1, int x2, int y2, int color)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    setpixel(x1,y1, color);</span><br><span class=\"line\">    int dx=abs(x2-x1);</span><br><span class=\"line\">    int dy=abs(y2-y1);</span><br><span class=\"line\">    if (dx==0&amp;&amp;dy==0)</span><br><span class=\"line\">        return; </span><br><span class=\"line\">    int flag=0;</span><br><span class=\"line\">    if (dx&lt;dy)         \t//下面将斜率变换至0≤|k|≤1区间</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flag=1;</span><br><span class=\"line\">        swap_value(&amp;x1, &amp;y1);</span><br><span class=\"line\">        swap_value(&amp;x2, &amp;y2);</span><br><span class=\"line\">        swap_value(&amp;dx, &amp;dy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int tx=(x2-x1)&gt;0 ? 1:-1;</span><br><span class=\"line\">    int ty=(y2-y1)&gt;0 ? 1: -1;</span><br><span class=\"line\">    int curx=x1;</span><br><span class=\"line\">    int cury=y1;</span><br><span class=\"line\">    int dS=2*dy;</span><br><span class=\"line\">    int dT=2*(dy-dx);</span><br><span class=\"line\">    int d=dS-dx; </span><br><span class=\"line\">    while (curx!=x2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (d&lt;0) </span><br><span class=\"line\">            d+=dS;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;cury+=ty;  d+=dT; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (flag)</span><br><span class=\"line\">            setpixel(cury, curx, color);  </span><br><span class=\"line\">        else </span><br><span class=\"line\">            setpixel(curx, cury, color);</span><br><span class=\"line\">        curx+=tx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-1-4-中点画线法\"><a href=\"#3-1-4-中点画线法\" class=\"headerlink\" title=\"3.1.4 中点画线法\"></a>3.1.4 中点画线法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void MidPLine(int x0, int y0, int x1, int y1, int color)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a, b,  d, x, y,tag=0;</span><br><span class=\"line\">    if(abs(x1-x0)&lt;abs(y1-y0))\t//若斜率的绝对值大于1，将坐标和坐标互换</span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        swap(&amp;x0,&amp;y0);  </span><br><span class=\"line\">        swap(&amp;x1,&amp;y1);</span><br><span class=\"line\">        tag=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(x0&gt;x1)//保证x0&lt;x1</span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        swap(&amp;x0,&amp;x1);</span><br><span class=\"line\">        swap(&amp;y0,&amp;y1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a=y0-y1;    </span><br><span class=\"line\">    b=x1-x0; </span><br><span class=\"line\">    d=a+b/2;    </span><br><span class=\"line\">    if(y0&lt;y1)//斜率为正</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x=x0; y=y0;</span><br><span class=\"line\">        setPixel(x, y, 255);</span><br><span class=\"line\">        while (x&lt;x1)</span><br><span class=\"line\">        &#123;    </span><br><span class=\"line\">            if (d&lt;0)       </span><br><span class=\"line\">                &#123;x++; y++; d=d+a+b; &#125;</span><br><span class=\"line\">            else       </span><br><span class=\"line\">                &#123;x++; d+=a;&#125;</span><br><span class=\"line\">            if(tag)//斜率大于1</span><br><span class=\"line\">                setPixel(y, x, color);\t//互换</span><br><span class=\"line\">            else</span><br><span class=\"line\">                setPixel(x, y, color);</span><br><span class=\"line\">        &#125;  /* while */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else//斜率为负(y0&gt;=y1)</span><br><span class=\"line\">    &#123;\t</span><br><span class=\"line\">        x=x1;</span><br><span class=\"line\">        y=y1;</span><br><span class=\"line\">        setPixel(x, y, 255);</span><br><span class=\"line\">        while (x&gt;x0)</span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            if (d&lt;0)       </span><br><span class=\"line\">                &#123;x--; y++; d=d-a+b; &#125;</span><br><span class=\"line\">            else       </span><br><span class=\"line\">                &#123;x--; d-=a;&#125;</span><br><span class=\"line\">            if(tag)//斜率大于1</span><br><span class=\"line\">                setPixel(y, x, color);\t//互换</span><br><span class=\"line\">            else</span><br><span class=\"line\">                setPixel(x, y, color);</span><br><span class=\"line\">        &#125;  /* while */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-圆弧绘制算法\"><a href=\"#3-2-圆弧绘制算法\" class=\"headerlink\" title=\"3.2 圆弧绘制算法\"></a>3.2 圆弧绘制算法</h3><h4 id=\"3-2-1-数值微分法\"><a href=\"#3-2-1-数值微分法\" class=\"headerlink\" title=\"3.2.1 数值微分法\"></a>3.2.1 数值微分法</h4><h5 id=\"1-Bresenham算法\"><a href=\"#1-Bresenham算法\" class=\"headerlink\" title=\"1. Bresenham算法\"></a>1. Bresenham算法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//8路对称</span><br><span class=\"line\">void Cirpot(int x0, int y0, int x, int y, int color)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SetPixel((x0+x), (y0+y), color);</span><br><span class=\"line\">    SetPixel((x0+y), (y0+x), color);</span><br><span class=\"line\">    SetPixel((x0+y), (y0-x), color);</span><br><span class=\"line\">    SetPixel((x0+x), (y0-y), color );</span><br><span class=\"line\">    SetPixel((x0-x), (y0-y), color );</span><br><span class=\"line\">    SetPixel((x0-y), (y0-x), color );</span><br><span class=\"line\">    SetPixel((x0-y), (y0+x), color);</span><br><span class=\"line\">    SetPixel((x0-x), (y0+y), color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Bres_Circle(int x0, int y0, double r)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int x,y,d;</span><br><span class=\"line\">    x=0;</span><br><span class=\"line\">    y=(int)r;</span><br><span class=\"line\">    d=int(3-2*r);</span><br><span class=\"line\">    while(x&lt;y)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Cirpot( x0,y0,x,y);</span><br><span class=\"line\">         if(d&lt;0)</span><br><span class=\"line\">             d+=4*x+6;</span><br><span class=\"line\">         else</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             d+=4*(x-y)+10;</span><br><span class=\"line\">             y--;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         x++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(x==y)</span><br><span class=\"line\">        Cirpot( x0,y0,x,y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-中点画圆算法\"><a href=\"#2-中点画圆算法\" class=\"headerlink\" title=\"2. 中点画圆算法\"></a>2. 中点画圆算法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Cirpot函数与上述Bresenham算法代码中的Cirpot函数相同</span><br><span class=\"line\">void MidPoint_Circle (int x0, int y0, int r, int color)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int x=0;</span><br><span class=\"line\">    int y=r;</span><br><span class=\"line\">    int d=1- r;\t//是d=1.25 – r取整后的结果</span><br><span class=\"line\">    Cirpot (x0, y0, x, y, color);</span><br><span class=\"line\">    while ( x&lt;y)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (d&lt;0) </span><br><span class=\"line\">            d+=2*x+3; </span><br><span class=\"line\">        else </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            d+= 2(x-y) +5;</span><br><span class=\"line\">            y--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        x++;</span><br><span class=\"line\">        Cirpot ( x0, y0, x, y, color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-2-角度离散法绘制圆弧和椭圆弧\"><a href=\"#3-2-2-角度离散法绘制圆弧和椭圆弧\" class=\"headerlink\" title=\"3.2.2 角度离散法绘制圆弧和椭圆弧\"></a>3.2.2 角度离散法绘制圆弧和椭圆弧</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void Arc_OpenGL(int xc, int yc, double r, double ts, double te)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double pi=3.1415926;</span><br><span class=\"line\">    if (te &lt; ts) \t//当终止角比起始角还小时，则将终止角加上2π</span><br><span class=\"line\">        te += 2*pi;</span><br><span class=\"line\">    double dt = 0.4/r;\t//取角度离散值，使其与半径r成反比</span><br><span class=\"line\">    int n=(int)(( te – ts ) / dt + 0.5 );\t//确定总步数</span><br><span class=\"line\">    double ta = ts;</span><br><span class=\"line\">    int x = xc + int ( r*cos(ts) );</span><br><span class=\"line\">    int y = yc + int ( r*sin(ts) );</span><br><span class=\"line\">    glBegin(GL_LINE_STRIP);\t//如果绘制整圆，选GL_LINE_LOOP更好</span><br><span class=\"line\">    glVertex2f( x, y );</span><br><span class=\"line\">    for(int i=1;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ta+=dt;</span><br><span class=\"line\">        double cost = cos ( ta );</span><br><span class=\"line\">        double sint = sin ( ta );</span><br><span class=\"line\">        x = int ( xc + r * cost );</span><br><span class=\"line\">        y = int ( yc + r * sint );</span><br><span class=\"line\">        glVertex2f ( x, y );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    glEnd();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-3-1-种子填充算法\"><a href=\"#3-3-1-种子填充算法\" class=\"headerlink\" title=\"3.3.1 种子填充算法\"></a>3.3.1 种子填充算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//四连通漫水法伪代码</span><br><span class=\"line\">void FloodFill (x, y, newcolor, boundaryColor)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     Stack stack;</span><br><span class=\"line\">     stack.Push(Pixel(x, y));\t//把种子像素(x,y)推入栈中</span><br><span class=\"line\">     while (! stack.Empty())  \t//当栈不空时循环执行以下代码</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         pixel=stack.Pop();\t//从栈顶弹出一个像素</span><br><span class=\"line\">            //当处理内定义区域时，用if (pixel.Color !=newcolor)判断即可</span><br><span class=\"line\">         if (pixel.Color !=newcolor &amp;&amp; pixel.Color !=boundaryColor)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             xx=pixel.x; yy=pixel.y;</span><br><span class=\"line\">            setpixel( xx,  yy,  newcolor, boundaryColor);</span><br><span class=\"line\">            stack. Push ( Pixel (xx-1, yy  )) ;</span><br><span class=\"line\">            stack. Push ( Pixel( xx,  yy+1)); </span><br><span class=\"line\">            stack. Push ( Pixel (xx+1, yy  )); </span><br><span class=\"line\">            stack.Push ( Pixel(xx, yy-1));</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第5章-二维观察\"><a href=\"#第5章-二维观察\" class=\"headerlink\" title=\"第5章 二维观察\"></a>第5章 二维观察</h2><h3 id=\"5-3-2-直线裁剪\"><a href=\"#5-3-2-直线裁剪\" class=\"headerlink\" title=\"5.3.2 直线裁剪\"></a>5.3.2 直线裁剪</h3><h4 id=\"1-Cohen-Sutherland编码裁剪算法\"><a href=\"#1-Cohen-Sutherland编码裁剪算法\" class=\"headerlink\" title=\"1. Cohen-Sutherland编码裁剪算法\"></a>1. Cohen-Sutherland编码裁剪算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># define LEFT 1</span><br><span class=\"line\"># define RIGHT 2</span><br><span class=\"line\"># define BOTTOM 4</span><br><span class=\"line\"># define TOP 8</span><br><span class=\"line\"></span><br><span class=\"line\">void encode(float x, float y, float XL, float XR, float YB, float YT, int* code)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int c = 0;</span><br><span class=\"line\">    if (x&lt;XL)\t c = c|LEFT;</span><br><span class=\"line\">    else if (x&gt;XR)\tc = c|RIGHT;</span><br><span class=\"line\">    if (y&lt;YB)\t\tc = c|BOTTOM;</span><br><span class=\"line\">    else if(y&gt;YT)\tc = c|TOP;</span><br><span class=\"line\">    *code=c;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void C_S_LineClip(float *x1, float *y1, float *x2, float *y2, float XL,</span><br><span class=\"line\">float XR, float YB, float YT)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int code1,code2,code;</span><br><span class=\"line\">    float x, y;</span><br><span class=\"line\">    encode(x1, y1, XL, XR, YB, YT, &amp;code1);</span><br><span class=\"line\">    encode(x2, y2, XL, XR, YB, YT, &amp;code1);</span><br><span class=\"line\">    while (code1!=0 || code2!=0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if ((code1 &amp; code2)!=0)\treturn;</span><br><span class=\"line\">        code = code1;</span><br><span class=\"line\">        if (code1==0)\tcode = code2;</span><br><span class=\"line\">        if ((LEFT &amp; code)!=0) &#123;\t//线段与左边界相交</span><br><span class=\"line\">            x = XL;</span><br><span class=\"line\">            y = y1+(y2-y1)*(XL-x1)/(x2-x1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if ((RIGHT &amp; code)!=0)\t//线段与右边界相交</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x = XR;</span><br><span class=\"line\">            y = y1+(y2-y1)*(XR-x1)/(x2-x1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if ((BOTTOM &amp; code)!=0)\t//线段与下边界相交</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            y = YB;</span><br><span class=\"line\">            x= x1+(x2-x1)*(YB-y1)/(y2-y1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if ((TOP &amp; code)!=0)\t//线段与上边界相交</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            y = YT;</span><br><span class=\"line\">            x= x1+(x2-x1)*(YT-y1)/(y2-y1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (code==code1)&#123; </span><br><span class=\"line\">            *x1 = x;\t*y1 = y;</span><br><span class=\"line\">            encode(x, y, XL, XR, YB, YT, &amp;code1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123; </span><br><span class=\"line\">            *x2 = x;\t*y2 = y;</span><br><span class=\"line\">            encode(x, y, XL, XR, YB, YT, &amp;code2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2．Liang-Barsky参数化裁剪算法\"><a href=\"#2．Liang-Barsky参数化裁剪算法\" class=\"headerlink\" title=\"2．Liang-Barsky参数化裁剪算法\"></a>2．Liang-Barsky参数化裁剪算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//x1,y1,x2,y2为直线端点坐标，XL,XR,YB,YT为窗口边界信息</span><br><span class=\"line\">int L_B_LineClip(float *x1, float *y1, float *x2, float *y2, float XL,float XR, float YB, float YT)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    float u1 = 0, u2 = 1, dx = x2 – x1, dy;</span><br><span class=\"line\">    //u1为始点参数，初值0；u2为终点参数，初值1</span><br><span class=\"line\">    if (clipTest(-dx, x1-XL, &amp;u1, &amp;u2)) \t//计算左边界交点参数，更新u1,u2</span><br><span class=\"line\">        if (clipTest(dx, XR-x1, &amp;u1, &amp;u2))\t//计算右边界交点参数，更新u1,u2</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dy=y2-y1;</span><br><span class=\"line\">            if(clipTest(-dy, y1-YB, &amp;u1, &amp;u2))\t//计算下边界交点参数，更新u1,u2</span><br><span class=\"line\">                if (clipTest(dy, YT-y1, &amp;u1, &amp;u2))//计算上边界交点参数，更新u1,u2</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    if(u2 &lt; 1)&#123;</span><br><span class=\"line\">                        *x2 = x1+u2*dx; \t//根据u2计算终点坐标</span><br><span class=\"line\">                        *y2 = y1+u2*dy;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if(u1 &gt; 0)&#123;</span><br><span class=\"line\">                        *x1 += u1*dx;   \t//根据u1计算始点坐标</span><br><span class=\"line\">                        *y1 += u1*dy;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    return 1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int clipTest(float p, float q,float* u1,float* u2)\t//计算交点参数</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    float r;</span><br><span class=\"line\">    int retVal = 1;</span><br><span class=\"line\">    if (p &lt; 0)&#123;</span><br><span class=\"line\">        r= q/p;</span><br><span class=\"line\">        if (r&gt;*u2)\t retVal = 0;</span><br><span class=\"line\">        else if (r&gt;*u1)\t*u1 = r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if (p &gt; 0)&#123;</span><br><span class=\"line\">        r= q/p;</span><br><span class=\"line\">        if (r&lt;*u1)\t retVal = 0;</span><br><span class=\"line\">        else if (r &lt; *u2) *u2 = r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if (q &lt; 0)  retVal = 0;</span><br><span class=\"line\">    return retVal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第7章-三维对象\"><a href=\"#第7章-三维对象\" class=\"headerlink\" title=\"第7章 三维对象\"></a>第7章 三维对象</h2><h3 id=\"7-3-5-编程实例——简单实体构建\"><a href=\"#7-3-5-编程实例——简单实体构建\" class=\"headerlink\" title=\"7.3.5  编程实例——简单实体构建\"></a>7.3.5  编程实例——简单实体构建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;gl/glut.h&gt;  </span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">float\trtri;</span><br><span class=\"line\">float\trquad; </span><br><span class=\"line\">GLfloat points0[5][3] =&#123;&#123; 0, 1,  0&#125;, &#123;-1, -1, 1&#125;, &#123; 1, -1, 1&#125;, &#123;\t1, -1, -1&#125;,&#123;-1, -1,-1&#125;&#125;;</span><br><span class=\"line\">GLfloat points1[8][3]=&#123; &#123; 1, 1, -1 &#125;, &#123;-1, 1, -1&#125;, &#123;-1, 1, 1&#125;, &#123; 1, 1, 1&#125;,</span><br><span class=\"line\">    &#123; 1, -1, 1 &#125;, &#123;-1, -1, 1&#125;, &#123;-1,-1,-1&#125;, &#123; 1, -1, -1&#125;&#125;;</span><br><span class=\"line\">GLfloat Colors0[4][3]=&#123;&#123;1,0,0&#125;,&#123;0,1,0&#125;, &#123;0,0,1&#125;,&#123;1,1,0&#125;&#125;;\t//四棱锥的颜色</span><br><span class=\"line\">//下行是立方体的颜色</span><br><span class=\"line\">GLfloat Colors1[6][3]=&#123;&#123;0,1,0&#125;,&#123;1,0.5,0&#125;,&#123;1,0,0&#125;,&#123;1,1,0&#125;,&#123;0,0,1&#125;,&#123;1,0,1&#125;&#125;;</span><br><span class=\"line\">int vertice0[4][3]=&#123;&#123;0,1,2&#125;,&#123;0,2,3&#125;,&#123;0,3,4&#125;,&#123;0,4,1&#125;&#125;;\t//四棱锥的顶点号序列</span><br><span class=\"line\">//下行是立方体的顶点号序列</span><br><span class=\"line\">int vertice1[6][4]=&#123;&#123;0,1,2,3&#125;,&#123;4,5,6,7&#125;,&#123;3,2,5,4&#125;,&#123;7,6,1,0&#125;,&#123;2,1,6,5&#125;, &#123;0,3,4,7&#125;&#125;;</span><br><span class=\"line\">void InitGL ( GLvoid )    </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glShadeModel(GL_SMOOTH);\t\t\t\t\t</span><br><span class=\"line\">    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);\t\t\t</span><br><span class=\"line\">    glClearDepth(1.0f);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">    glEnable(GL_DEPTH_TEST);\t\t\t\t\t\t\t</span><br><span class=\"line\">    glDepthFunc(GL_LEQUAL);\t\t\t\t\t\t\t</span><br><span class=\"line\">    glEnable ( GL_COLOR_MATERIAL );</span><br><span class=\"line\">    glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void CreatePyramid()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glBegin(GL_TRIANGLES);</span><br><span class=\"line\">    for(int i=0;i&lt;4;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            glColor3fv(Colors0[i]);</span><br><span class=\"line\">            for(int j=0;j&lt;3;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                int VtxId=vertice0[i][j];</span><br><span class=\"line\">                glVertex3fv(points0[VtxId]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    glEnd();</span><br><span class=\"line\">    glBegin( GL_QUADS); \t//构建底面</span><br><span class=\"line\">    glColor3f(1.0f, 1.0f, 1.0f );</span><br><span class=\"line\">    for(i=0;i&lt;4;i++)</span><br><span class=\"line\">        glVertex3fv(points0[i]);\t</span><br><span class=\"line\">    glEnd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void CreateCube()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glBegin(GL_QUADS);\t</span><br><span class=\"line\">    for(int i=0;i&lt;6;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        glColor3fv(Colors1[i]);</span><br><span class=\"line\">        for(int j=0;j&lt;4;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int VtxId=vertice1[i][j];</span><br><span class=\"line\">            glVertex3fv(points1[VtxId]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    glEnd();\t\t\t\t\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void display ( void )   </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\t</span><br><span class=\"line\">    glLoadIdentity();\t</span><br><span class=\"line\">    glPushMatrix();</span><br><span class=\"line\">    glTranslatef(-1.5f,0.0f,-6.0f);\t//平移至左侧</span><br><span class=\"line\">    glRotatef(rtri,0.0f,1.0f,0.0f);\t//旋转一个角度</span><br><span class=\"line\">    CreatePyramid();\t//创建三角塔</span><br><span class=\"line\"></span><br><span class=\"line\">    glLoadIdentity();\t//将矩阵归一化回原样    </span><br><span class=\"line\">    glTranslatef(1.5f,0.0f,-6.0f);\t//平移到右侧</span><br><span class=\"line\">    glRotatef(rquad,1.0f,0.0f,0.0f);\t//旋转一个角度</span><br><span class=\"line\">    CreateCube(); \t//创建立方体</span><br><span class=\"line\">    glPopMatrix();</span><br><span class=\"line\">    </span><br><span class=\"line\">    rtri+=0.2f;\t//修改三角塔旋转角度</span><br><span class=\"line\">    rquad-=0.15f;\t//修改立方体的旋转角度</span><br><span class=\"line\">    glutSwapBuffers ( );  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void reshape ( int width , int height )  </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (height==0)\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">        height=1;\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">    glViewport(0,0,width,height);\t</span><br><span class=\"line\">    glMatrixMode(GL_PROJECTION);\t\t\t\t\t\t</span><br><span class=\"line\">    glLoadIdentity();\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">    gluPerspective(45.0f,(GLfloat)width/(GLfloat)height,0.1f,100.0f);</span><br><span class=\"line\">    glMatrixMode(GL_MODELVIEW);\t\t\t\t\t\t\t</span><br><span class=\"line\">    glLoadIdentity();\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void main ( int argc, char** argv )  </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glutInit ( &amp;argc, argv ); </span><br><span class=\"line\">    glutInitDisplayMode ( GLUT_RGBA | GLUT_DOUBLE ); </span><br><span class=\"line\">    glutInitWindowSize ( 600, 400 ); </span><br><span class=\"line\">    glutCreateWindow ( &quot;Pyramid and cube&quot; );</span><br><span class=\"line\">    InitGL();</span><br><span class=\"line\">    glutDisplayFunc ( display ); </span><br><span class=\"line\">    glutReshapeFunc ( reshape );</span><br><span class=\"line\">    glutIdleFunc ( display );</span><br><span class=\"line\">    glutMainLoop ( );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-4-2-Hermite曲线\"><a href=\"#7-4-2-Hermite曲线\" class=\"headerlink\" title=\"7.4.2  Hermite曲线\"></a>7.4.2  Hermite曲线</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point  \t//点类</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">Double x，y;</span><br><span class=\"line\">Point(double vx， double vy)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    This.x=vx;</span><br><span class=\"line\">    This.y=vy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Point operator – (Point p) \t//重载运算符“-”</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Return new Point(x-p.x ， y-p.y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//在p1和p2之间绘制一条Hermite曲线</span><br><span class=\"line\">//p1-p0为p1处的切线矢量，p3-p2为p2处的切线矢量</span><br><span class=\"line\">//参数区间[0，1]被离散为count份</span><br><span class=\"line\">void HermiteCurve(Point p0，Point p1，Point p2，Point p3，int count)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Point r1，r2;\t//切线矢量</span><br><span class=\"line\">    r1 = p1 - p0;\t//调用重载-</span><br><span class=\"line\">    r2 = p3 - p2; </span><br><span class=\"line\">    double t = 0.0;</span><br><span class=\"line\">    dt = 1.0 / count;</span><br><span class=\"line\">    moveto(p1.x，p1.y);\t//设置起点</span><br><span class=\"line\">    for(int i=0; i&lt;count+1; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        double tt = t * t;</span><br><span class=\"line\">        double ttt = tt * t;</span><br><span class=\"line\">        double F1，F2，F3，F4;\t//调和函数</span><br><span class=\"line\">        F1 = 2 * ttt - 3 * tt + 1;</span><br><span class=\"line\">        F2 = -2 * ttt + 3 * tt;</span><br><span class=\"line\">        F3 = ttt - 2 * tt + t;</span><br><span class=\"line\">        F4 = ttt - tt;</span><br><span class=\"line\">        double x = p1.x * F1 + p2.x * F2 + r1.x * F3 + r2.x * F4;</span><br><span class=\"line\">        double y = p1.y * F1 + p2.y * F2 + r1.y * F3 + r2.y * F4;</span><br><span class=\"line\">        lineto(x，y);</span><br><span class=\"line\">        t+=dt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-4-3-Bezier曲线\"><a href=\"#7-4-3-Bezier曲线\" class=\"headerlink\" title=\"7.4.3  Bezier曲线\"></a>7.4.3  Bezier曲线</h3><h4 id=\"3．三次Bezier曲线的绘制\"><a href=\"#3．三次Bezier曲线的绘制\" class=\"headerlink\" title=\"3．三次Bezier曲线的绘制\"></a>3．三次Bezier曲线的绘制</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绘制由p0，p1，p2，p3确定的Bezier曲线</span><br><span class=\"line\">//参数区间[0，1]被离散为count份</span><br><span class=\"line\">void BezierCurve(Point p0,Point p1,Point p2,Point p3,int count)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double t = 0.0;</span><br><span class=\"line\">    dt = 1.0 / count;</span><br><span class=\"line\">    moveto(p1.x,p1.y);\t//设置起点</span><br><span class=\"line\">    for(int i=0; i&lt;count+1; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        double F1,F2,F3,F4,x,y;\t//调和函数</span><br><span class=\"line\">        double u = 1.0 – t ;</span><br><span class=\"line\">        F1 = u * u * u ;</span><br><span class=\"line\">        F2 = 3 * t * u * u;</span><br><span class=\"line\">        F3 = 3 * t * t * u;</span><br><span class=\"line\">        F4 = t * t * t;</span><br><span class=\"line\">        x = p0.x * F1 + p1.x * F2 + p2.x * F3 + p3.x * F4;</span><br><span class=\"line\">        y = p0.y * F1 + p1.y * F2 + p2.y * F3 + p3.y * F4;</span><br><span class=\"line\">        lineto(x,y);</span><br><span class=\"line\">          t+=dt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4．离散生成Beizer曲线的de-Casteljau算法\"><a href=\"#4．离散生成Beizer曲线的de-Casteljau算法\" class=\"headerlink\" title=\"4．离散生成Beizer曲线的de Casteljau算法\"></a>4．离散生成Beizer曲线的de Casteljau算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void Casteljau(Point p0,  Point p1,  Point p2,  Point p3) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double t=0;</span><br><span class=\"line\">    int count=20;</span><br><span class=\"line\">    double dt=1.0/count;</span><br><span class=\"line\">    MoveTo(p0);</span><br><span class=\"line\">    for(int i=0;i&lt;count;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Point p01,p11,p21,p02,p12,p03;</span><br><span class=\"line\">        p01.x=(1-t)*p0.x+t*p1.x;</span><br><span class=\"line\">        p01.y=(1-t)*p0.y+t*p1.y;</span><br><span class=\"line\"></span><br><span class=\"line\">        p11.x=(1-t)*p1.x+t*p2.x;</span><br><span class=\"line\">        p11.y=(1-t)*p1.y+t*p2.y;</span><br><span class=\"line\"></span><br><span class=\"line\">        p21.x=(1-t)*p2.x+t*p3.x;</span><br><span class=\"line\">        p21.y=(1-t)*p2.y+t*p3.y;</span><br><span class=\"line\"></span><br><span class=\"line\">        p02.x=(1-t)*p01.x+t*p11.x;</span><br><span class=\"line\">        p02.y=(1-t)*p01.y+t*p11.y;</span><br><span class=\"line\"></span><br><span class=\"line\">        p12.x=(1-t)*p11.x+t*p21.x;</span><br><span class=\"line\">        p12.y=(1-t)*p11.y+t*p21.y;</span><br><span class=\"line\"></span><br><span class=\"line\">        p03.x=(1-t)*p02.x+t*p12.x;</span><br><span class=\"line\">        p03.y=(1-t)*p02.y+t*p12.y;</span><br><span class=\"line\">        dc-&gt;LineTo(p03);</span><br><span class=\"line\">        t+=dt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第8章真实感图形技术\"><a href=\"#第8章真实感图形技术\" class=\"headerlink\" title=\"第8章真实感图形技术\"></a>第8章真实感图形技术</h2><h3 id=\"8-3-4-OpenGL中的颜色模型\"><a href=\"#8-3-4-OpenGL中的颜色模型\" class=\"headerlink\" title=\"8.3.4  OpenGL中的颜色模型\"></a>8.3.4  OpenGL中的颜色模型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">void init(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glClearColor(1.0,1.0,1.0,0.0);</span><br><span class=\"line\">    glShadeModel(GL_SMOOTH);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void triangle(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glBegin (GL_TRIANGLES);</span><br><span class=\"line\">    glColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (5.0f,5.0f);</span><br><span class=\"line\">    glColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (25.0f,5.0f);</span><br><span class=\"line\">    glColor3f (0.0f, 0.0f, 1.0f);   glVertex2f (5.0f,25.0f);</span><br><span class=\"line\">    glEnd ();</span><br><span class=\"line\"></span><br><span class=\"line\">    glBegin (GL_TRIANGLES);</span><br><span class=\"line\">    glColor3f (1.0f, 1.0f, 0.0f);   glVertex2f (26.0f,25.0f);</span><br><span class=\"line\">    glColor3f (0.0f, 1.0f, 1.0f);   glVertex2f (26.0f,5.0f);</span><br><span class=\"line\">    glColor3f (1.0f, 0.0f, 1.0f);   glVertex2f (6.0f,25.0f);</span><br><span class=\"line\">    glEnd ();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void display(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">    triangle();</span><br><span class=\"line\">    glFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void reshape(int w,int h)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glViewport(0,0,(GLsizei)w, (GLsizei)h);</span><br><span class=\"line\">    glMatrixMode(GL_PROJECTION);</span><br><span class=\"line\">    glLoadIdentity();</span><br><span class=\"line\">    if(w &lt;= h)</span><br><span class=\"line\">        gluOrtho2D(0.0,30.0,0.0,30.0*(GLfloat)h/(GLfloat)w);</span><br><span class=\"line\">    else</span><br><span class=\"line\">        gluOrtho2D(0.0,30.0*(GLfloat)w/(GLfloat)h,0.0,30.0);</span><br><span class=\"line\">    glMatrixMode(GL_MODELVIEW);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char** argv)</span><br><span class=\"line\">&#123;  glutInit(&amp;argc, argv);</span><br><span class=\"line\">   glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</span><br><span class=\"line\">   glutInitWindowSize(500, 500);</span><br><span class=\"line\">   glutInitWindowPosition(100, 100);</span><br><span class=\"line\">   glutCreateWindow(&quot;OpenGL颜色函数例程&quot;);</span><br><span class=\"line\">   init();</span><br><span class=\"line\">   glutDisplayFunc(display);</span><br><span class=\"line\">   glutReshapeFunc(reshape);</span><br><span class=\"line\">   glutMainLoop();</span><br><span class=\"line\">   return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>本处代码主要为各章中除章节末的编程实例之外的有关代码，现全部贴出以飨读者。</p>\n<h2 id=\"第3章-二维图形生成\"><a href=\"#第3章-二维图形生成\" class=\"headerlink\" title=\"第3章 二维图形生成\"></a>第3章 二维图形生成</h2><h3 id=\"3-1-直线生成算法\"><a href=\"#3-1-直线生成算法\" class=\"headerlink\" title=\"3.1 直线生成算法\"></a>3.1 直线生成算法</h3><h4 id=\"3-1-1-数值微分法\"><a href=\"#3-1-1-数值微分法\" class=\"headerlink\" title=\"3.1.1 数值微分法\"></a>3.1.1 数值微分法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void LineDDA(int x1, int y1, int x2, int y2, int color)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int dm=0; </span><br><span class=\"line\">    if (abs(x2-x1)&gt;= abs(y2-y1) \t//abs是求绝对值的函数</span><br><span class=\"line\">        dm=abs(x2-x1);\t//x为计长方向</span><br><span class=\"line\">    else</span><br><span class=\"line\">        dm=abs(y2-y1); \t//y为计长方向</span><br><span class=\"line\">    float dx=(float)(x2-x1)/dm;\t//当x为计长方向时，dx的值为1</span><br><span class=\"line\">    float dy=(float)(y2-y1)/dm;\t//当y为计长方向时，dy的值为1</span><br><span class=\"line\">    float x=x1+0.5;</span><br><span class=\"line\">    float y=y1+0.5;</span><br><span class=\"line\">    for (int i=0; i&lt; dm; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        setpixel( (int)x, (int)y, color);  </span><br><span class=\"line\">        x+=dx;</span><br><span class=\"line\">        y+=dy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-1-2-逐点比较法\"><a href=\"#3-1-2-逐点比较法\" class=\"headerlink\" title=\"3.1.2 逐点比较法\"></a>3.1.2 逐点比较法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void PrintLine(int x1, int y1, int x2, int y2, int color)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int x, y, xA, yA;</span><br><span class=\"line\">    if (y1&gt;y2)\t//平移直线的坐标，使y值较小的点位于坐标原点</span><br><span class=\"line\">    &#123; yA=y1-y2; xA=x1-x2; &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;yA=y2-y1; xA=x2-x1; &#125;</span><br><span class=\"line\">    int F=x=y=0;</span><br><span class=\"line\">    int n=abs(xA)+abs(yA);</span><br><span class=\"line\">    for (int i=0; i&lt;n; i++) &#123;</span><br><span class=\"line\">            if (xA&gt;0) &#123;\t//如果斜率为正</span><br><span class=\"line\">        if (F&gt;=0)  &#123;x++; F-=yA;&#125;</span><br><span class=\"line\">        else &#123; y++; F+=xA; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;//如果斜率为负</span><br><span class=\"line\">        if (F&gt;=0)  &#123;y++; F+=xA;&#125;</span><br><span class=\"line\">        else &#123; x--; F+=yA; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (y1&gt;y2)</span><br><span class=\"line\">        setpixel(x+x2, y+y2, color); </span><br><span class=\"line\">else </span><br><span class=\"line\">        setpixel(x+x1, y+y1, color); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-1-3-Bresenham画线法\"><a href=\"#3-1-3-Bresenham画线法\" class=\"headerlink\" title=\"3.1.3 Bresenham画线法\"></a>3.1.3 Bresenham画线法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void swap_value (int* a, int* b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int temp=*a; </span><br><span class=\"line\">    *a=*b;</span><br><span class=\"line\">    *b=temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void Bres_Line(int x1, int y1, int x2, int y2, int color)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    setpixel(x1,y1, color);</span><br><span class=\"line\">    int dx=abs(x2-x1);</span><br><span class=\"line\">    int dy=abs(y2-y1);</span><br><span class=\"line\">    if (dx==0&amp;&amp;dy==0)</span><br><span class=\"line\">        return; </span><br><span class=\"line\">    int flag=0;</span><br><span class=\"line\">    if (dx&lt;dy)         \t//下面将斜率变换至0≤|k|≤1区间</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flag=1;</span><br><span class=\"line\">        swap_value(&amp;x1, &amp;y1);</span><br><span class=\"line\">        swap_value(&amp;x2, &amp;y2);</span><br><span class=\"line\">        swap_value(&amp;dx, &amp;dy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int tx=(x2-x1)&gt;0 ? 1:-1;</span><br><span class=\"line\">    int ty=(y2-y1)&gt;0 ? 1: -1;</span><br><span class=\"line\">    int curx=x1;</span><br><span class=\"line\">    int cury=y1;</span><br><span class=\"line\">    int dS=2*dy;</span><br><span class=\"line\">    int dT=2*(dy-dx);</span><br><span class=\"line\">    int d=dS-dx; </span><br><span class=\"line\">    while (curx!=x2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (d&lt;0) </span><br><span class=\"line\">            d+=dS;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;cury+=ty;  d+=dT; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (flag)</span><br><span class=\"line\">            setpixel(cury, curx, color);  </span><br><span class=\"line\">        else </span><br><span class=\"line\">            setpixel(curx, cury, color);</span><br><span class=\"line\">        curx+=tx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-1-4-中点画线法\"><a href=\"#3-1-4-中点画线法\" class=\"headerlink\" title=\"3.1.4 中点画线法\"></a>3.1.4 中点画线法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void MidPLine(int x0, int y0, int x1, int y1, int color)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a, b,  d, x, y,tag=0;</span><br><span class=\"line\">    if(abs(x1-x0)&lt;abs(y1-y0))\t//若斜率的绝对值大于1，将坐标和坐标互换</span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        swap(&amp;x0,&amp;y0);  </span><br><span class=\"line\">        swap(&amp;x1,&amp;y1);</span><br><span class=\"line\">        tag=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(x0&gt;x1)//保证x0&lt;x1</span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        swap(&amp;x0,&amp;x1);</span><br><span class=\"line\">        swap(&amp;y0,&amp;y1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a=y0-y1;    </span><br><span class=\"line\">    b=x1-x0; </span><br><span class=\"line\">    d=a+b/2;    </span><br><span class=\"line\">    if(y0&lt;y1)//斜率为正</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x=x0; y=y0;</span><br><span class=\"line\">        setPixel(x, y, 255);</span><br><span class=\"line\">        while (x&lt;x1)</span><br><span class=\"line\">        &#123;    </span><br><span class=\"line\">            if (d&lt;0)       </span><br><span class=\"line\">                &#123;x++; y++; d=d+a+b; &#125;</span><br><span class=\"line\">            else       </span><br><span class=\"line\">                &#123;x++; d+=a;&#125;</span><br><span class=\"line\">            if(tag)//斜率大于1</span><br><span class=\"line\">                setPixel(y, x, color);\t//互换</span><br><span class=\"line\">            else</span><br><span class=\"line\">                setPixel(x, y, color);</span><br><span class=\"line\">        &#125;  /* while */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else//斜率为负(y0&gt;=y1)</span><br><span class=\"line\">    &#123;\t</span><br><span class=\"line\">        x=x1;</span><br><span class=\"line\">        y=y1;</span><br><span class=\"line\">        setPixel(x, y, 255);</span><br><span class=\"line\">        while (x&gt;x0)</span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            if (d&lt;0)       </span><br><span class=\"line\">                &#123;x--; y++; d=d-a+b; &#125;</span><br><span class=\"line\">            else       </span><br><span class=\"line\">                &#123;x--; d-=a;&#125;</span><br><span class=\"line\">            if(tag)//斜率大于1</span><br><span class=\"line\">                setPixel(y, x, color);\t//互换</span><br><span class=\"line\">            else</span><br><span class=\"line\">                setPixel(x, y, color);</span><br><span class=\"line\">        &#125;  /* while */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-圆弧绘制算法\"><a href=\"#3-2-圆弧绘制算法\" class=\"headerlink\" title=\"3.2 圆弧绘制算法\"></a>3.2 圆弧绘制算法</h3><h4 id=\"3-2-1-数值微分法\"><a href=\"#3-2-1-数值微分法\" class=\"headerlink\" title=\"3.2.1 数值微分法\"></a>3.2.1 数值微分法</h4><h5 id=\"1-Bresenham算法\"><a href=\"#1-Bresenham算法\" class=\"headerlink\" title=\"1. Bresenham算法\"></a>1. Bresenham算法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//8路对称</span><br><span class=\"line\">void Cirpot(int x0, int y0, int x, int y, int color)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SetPixel((x0+x), (y0+y), color);</span><br><span class=\"line\">    SetPixel((x0+y), (y0+x), color);</span><br><span class=\"line\">    SetPixel((x0+y), (y0-x), color);</span><br><span class=\"line\">    SetPixel((x0+x), (y0-y), color );</span><br><span class=\"line\">    SetPixel((x0-x), (y0-y), color );</span><br><span class=\"line\">    SetPixel((x0-y), (y0-x), color );</span><br><span class=\"line\">    SetPixel((x0-y), (y0+x), color);</span><br><span class=\"line\">    SetPixel((x0-x), (y0+y), color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Bres_Circle(int x0, int y0, double r)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int x,y,d;</span><br><span class=\"line\">    x=0;</span><br><span class=\"line\">    y=(int)r;</span><br><span class=\"line\">    d=int(3-2*r);</span><br><span class=\"line\">    while(x&lt;y)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Cirpot( x0,y0,x,y);</span><br><span class=\"line\">         if(d&lt;0)</span><br><span class=\"line\">             d+=4*x+6;</span><br><span class=\"line\">         else</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             d+=4*(x-y)+10;</span><br><span class=\"line\">             y--;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         x++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(x==y)</span><br><span class=\"line\">        Cirpot( x0,y0,x,y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-中点画圆算法\"><a href=\"#2-中点画圆算法\" class=\"headerlink\" title=\"2. 中点画圆算法\"></a>2. 中点画圆算法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Cirpot函数与上述Bresenham算法代码中的Cirpot函数相同</span><br><span class=\"line\">void MidPoint_Circle (int x0, int y0, int r, int color)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int x=0;</span><br><span class=\"line\">    int y=r;</span><br><span class=\"line\">    int d=1- r;\t//是d=1.25 – r取整后的结果</span><br><span class=\"line\">    Cirpot (x0, y0, x, y, color);</span><br><span class=\"line\">    while ( x&lt;y)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (d&lt;0) </span><br><span class=\"line\">            d+=2*x+3; </span><br><span class=\"line\">        else </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            d+= 2(x-y) +5;</span><br><span class=\"line\">            y--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        x++;</span><br><span class=\"line\">        Cirpot ( x0, y0, x, y, color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-2-角度离散法绘制圆弧和椭圆弧\"><a href=\"#3-2-2-角度离散法绘制圆弧和椭圆弧\" class=\"headerlink\" title=\"3.2.2 角度离散法绘制圆弧和椭圆弧\"></a>3.2.2 角度离散法绘制圆弧和椭圆弧</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void Arc_OpenGL(int xc, int yc, double r, double ts, double te)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double pi=3.1415926;</span><br><span class=\"line\">    if (te &lt; ts) \t//当终止角比起始角还小时，则将终止角加上2π</span><br><span class=\"line\">        te += 2*pi;</span><br><span class=\"line\">    double dt = 0.4/r;\t//取角度离散值，使其与半径r成反比</span><br><span class=\"line\">    int n=(int)(( te – ts ) / dt + 0.5 );\t//确定总步数</span><br><span class=\"line\">    double ta = ts;</span><br><span class=\"line\">    int x = xc + int ( r*cos(ts) );</span><br><span class=\"line\">    int y = yc + int ( r*sin(ts) );</span><br><span class=\"line\">    glBegin(GL_LINE_STRIP);\t//如果绘制整圆，选GL_LINE_LOOP更好</span><br><span class=\"line\">    glVertex2f( x, y );</span><br><span class=\"line\">    for(int i=1;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ta+=dt;</span><br><span class=\"line\">        double cost = cos ( ta );</span><br><span class=\"line\">        double sint = sin ( ta );</span><br><span class=\"line\">        x = int ( xc + r * cost );</span><br><span class=\"line\">        y = int ( yc + r * sint );</span><br><span class=\"line\">        glVertex2f ( x, y );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    glEnd();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-3-1-种子填充算法\"><a href=\"#3-3-1-种子填充算法\" class=\"headerlink\" title=\"3.3.1 种子填充算法\"></a>3.3.1 种子填充算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//四连通漫水法伪代码</span><br><span class=\"line\">void FloodFill (x, y, newcolor, boundaryColor)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     Stack stack;</span><br><span class=\"line\">     stack.Push(Pixel(x, y));\t//把种子像素(x,y)推入栈中</span><br><span class=\"line\">     while (! stack.Empty())  \t//当栈不空时循环执行以下代码</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         pixel=stack.Pop();\t//从栈顶弹出一个像素</span><br><span class=\"line\">            //当处理内定义区域时，用if (pixel.Color !=newcolor)判断即可</span><br><span class=\"line\">         if (pixel.Color !=newcolor &amp;&amp; pixel.Color !=boundaryColor)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             xx=pixel.x; yy=pixel.y;</span><br><span class=\"line\">            setpixel( xx,  yy,  newcolor, boundaryColor);</span><br><span class=\"line\">            stack. Push ( Pixel (xx-1, yy  )) ;</span><br><span class=\"line\">            stack. Push ( Pixel( xx,  yy+1)); </span><br><span class=\"line\">            stack. Push ( Pixel (xx+1, yy  )); </span><br><span class=\"line\">            stack.Push ( Pixel(xx, yy-1));</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第5章-二维观察\"><a href=\"#第5章-二维观察\" class=\"headerlink\" title=\"第5章 二维观察\"></a>第5章 二维观察</h2><h3 id=\"5-3-2-直线裁剪\"><a href=\"#5-3-2-直线裁剪\" class=\"headerlink\" title=\"5.3.2 直线裁剪\"></a>5.3.2 直线裁剪</h3><h4 id=\"1-Cohen-Sutherland编码裁剪算法\"><a href=\"#1-Cohen-Sutherland编码裁剪算法\" class=\"headerlink\" title=\"1. Cohen-Sutherland编码裁剪算法\"></a>1. Cohen-Sutherland编码裁剪算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># define LEFT 1</span><br><span class=\"line\"># define RIGHT 2</span><br><span class=\"line\"># define BOTTOM 4</span><br><span class=\"line\"># define TOP 8</span><br><span class=\"line\"></span><br><span class=\"line\">void encode(float x, float y, float XL, float XR, float YB, float YT, int* code)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int c = 0;</span><br><span class=\"line\">    if (x&lt;XL)\t c = c|LEFT;</span><br><span class=\"line\">    else if (x&gt;XR)\tc = c|RIGHT;</span><br><span class=\"line\">    if (y&lt;YB)\t\tc = c|BOTTOM;</span><br><span class=\"line\">    else if(y&gt;YT)\tc = c|TOP;</span><br><span class=\"line\">    *code=c;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void C_S_LineClip(float *x1, float *y1, float *x2, float *y2, float XL,</span><br><span class=\"line\">float XR, float YB, float YT)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int code1,code2,code;</span><br><span class=\"line\">    float x, y;</span><br><span class=\"line\">    encode(x1, y1, XL, XR, YB, YT, &amp;code1);</span><br><span class=\"line\">    encode(x2, y2, XL, XR, YB, YT, &amp;code1);</span><br><span class=\"line\">    while (code1!=0 || code2!=0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if ((code1 &amp; code2)!=0)\treturn;</span><br><span class=\"line\">        code = code1;</span><br><span class=\"line\">        if (code1==0)\tcode = code2;</span><br><span class=\"line\">        if ((LEFT &amp; code)!=0) &#123;\t//线段与左边界相交</span><br><span class=\"line\">            x = XL;</span><br><span class=\"line\">            y = y1+(y2-y1)*(XL-x1)/(x2-x1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if ((RIGHT &amp; code)!=0)\t//线段与右边界相交</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x = XR;</span><br><span class=\"line\">            y = y1+(y2-y1)*(XR-x1)/(x2-x1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if ((BOTTOM &amp; code)!=0)\t//线段与下边界相交</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            y = YB;</span><br><span class=\"line\">            x= x1+(x2-x1)*(YB-y1)/(y2-y1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if ((TOP &amp; code)!=0)\t//线段与上边界相交</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            y = YT;</span><br><span class=\"line\">            x= x1+(x2-x1)*(YT-y1)/(y2-y1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (code==code1)&#123; </span><br><span class=\"line\">            *x1 = x;\t*y1 = y;</span><br><span class=\"line\">            encode(x, y, XL, XR, YB, YT, &amp;code1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123; </span><br><span class=\"line\">            *x2 = x;\t*y2 = y;</span><br><span class=\"line\">            encode(x, y, XL, XR, YB, YT, &amp;code2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2．Liang-Barsky参数化裁剪算法\"><a href=\"#2．Liang-Barsky参数化裁剪算法\" class=\"headerlink\" title=\"2．Liang-Barsky参数化裁剪算法\"></a>2．Liang-Barsky参数化裁剪算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//x1,y1,x2,y2为直线端点坐标，XL,XR,YB,YT为窗口边界信息</span><br><span class=\"line\">int L_B_LineClip(float *x1, float *y1, float *x2, float *y2, float XL,float XR, float YB, float YT)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    float u1 = 0, u2 = 1, dx = x2 – x1, dy;</span><br><span class=\"line\">    //u1为始点参数，初值0；u2为终点参数，初值1</span><br><span class=\"line\">    if (clipTest(-dx, x1-XL, &amp;u1, &amp;u2)) \t//计算左边界交点参数，更新u1,u2</span><br><span class=\"line\">        if (clipTest(dx, XR-x1, &amp;u1, &amp;u2))\t//计算右边界交点参数，更新u1,u2</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dy=y2-y1;</span><br><span class=\"line\">            if(clipTest(-dy, y1-YB, &amp;u1, &amp;u2))\t//计算下边界交点参数，更新u1,u2</span><br><span class=\"line\">                if (clipTest(dy, YT-y1, &amp;u1, &amp;u2))//计算上边界交点参数，更新u1,u2</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    if(u2 &lt; 1)&#123;</span><br><span class=\"line\">                        *x2 = x1+u2*dx; \t//根据u2计算终点坐标</span><br><span class=\"line\">                        *y2 = y1+u2*dy;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if(u1 &gt; 0)&#123;</span><br><span class=\"line\">                        *x1 += u1*dx;   \t//根据u1计算始点坐标</span><br><span class=\"line\">                        *y1 += u1*dy;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    return 1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int clipTest(float p, float q,float* u1,float* u2)\t//计算交点参数</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    float r;</span><br><span class=\"line\">    int retVal = 1;</span><br><span class=\"line\">    if (p &lt; 0)&#123;</span><br><span class=\"line\">        r= q/p;</span><br><span class=\"line\">        if (r&gt;*u2)\t retVal = 0;</span><br><span class=\"line\">        else if (r&gt;*u1)\t*u1 = r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if (p &gt; 0)&#123;</span><br><span class=\"line\">        r= q/p;</span><br><span class=\"line\">        if (r&lt;*u1)\t retVal = 0;</span><br><span class=\"line\">        else if (r &lt; *u2) *u2 = r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if (q &lt; 0)  retVal = 0;</span><br><span class=\"line\">    return retVal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第7章-三维对象\"><a href=\"#第7章-三维对象\" class=\"headerlink\" title=\"第7章 三维对象\"></a>第7章 三维对象</h2><h3 id=\"7-3-5-编程实例——简单实体构建\"><a href=\"#7-3-5-编程实例——简单实体构建\" class=\"headerlink\" title=\"7.3.5  编程实例——简单实体构建\"></a>7.3.5  编程实例——简单实体构建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;gl/glut.h&gt;  </span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">float\trtri;</span><br><span class=\"line\">float\trquad; </span><br><span class=\"line\">GLfloat points0[5][3] =&#123;&#123; 0, 1,  0&#125;, &#123;-1, -1, 1&#125;, &#123; 1, -1, 1&#125;, &#123;\t1, -1, -1&#125;,&#123;-1, -1,-1&#125;&#125;;</span><br><span class=\"line\">GLfloat points1[8][3]=&#123; &#123; 1, 1, -1 &#125;, &#123;-1, 1, -1&#125;, &#123;-1, 1, 1&#125;, &#123; 1, 1, 1&#125;,</span><br><span class=\"line\">    &#123; 1, -1, 1 &#125;, &#123;-1, -1, 1&#125;, &#123;-1,-1,-1&#125;, &#123; 1, -1, -1&#125;&#125;;</span><br><span class=\"line\">GLfloat Colors0[4][3]=&#123;&#123;1,0,0&#125;,&#123;0,1,0&#125;, &#123;0,0,1&#125;,&#123;1,1,0&#125;&#125;;\t//四棱锥的颜色</span><br><span class=\"line\">//下行是立方体的颜色</span><br><span class=\"line\">GLfloat Colors1[6][3]=&#123;&#123;0,1,0&#125;,&#123;1,0.5,0&#125;,&#123;1,0,0&#125;,&#123;1,1,0&#125;,&#123;0,0,1&#125;,&#123;1,0,1&#125;&#125;;</span><br><span class=\"line\">int vertice0[4][3]=&#123;&#123;0,1,2&#125;,&#123;0,2,3&#125;,&#123;0,3,4&#125;,&#123;0,4,1&#125;&#125;;\t//四棱锥的顶点号序列</span><br><span class=\"line\">//下行是立方体的顶点号序列</span><br><span class=\"line\">int vertice1[6][4]=&#123;&#123;0,1,2,3&#125;,&#123;4,5,6,7&#125;,&#123;3,2,5,4&#125;,&#123;7,6,1,0&#125;,&#123;2,1,6,5&#125;, &#123;0,3,4,7&#125;&#125;;</span><br><span class=\"line\">void InitGL ( GLvoid )    </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glShadeModel(GL_SMOOTH);\t\t\t\t\t</span><br><span class=\"line\">    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);\t\t\t</span><br><span class=\"line\">    glClearDepth(1.0f);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">    glEnable(GL_DEPTH_TEST);\t\t\t\t\t\t\t</span><br><span class=\"line\">    glDepthFunc(GL_LEQUAL);\t\t\t\t\t\t\t</span><br><span class=\"line\">    glEnable ( GL_COLOR_MATERIAL );</span><br><span class=\"line\">    glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void CreatePyramid()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glBegin(GL_TRIANGLES);</span><br><span class=\"line\">    for(int i=0;i&lt;4;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            glColor3fv(Colors0[i]);</span><br><span class=\"line\">            for(int j=0;j&lt;3;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                int VtxId=vertice0[i][j];</span><br><span class=\"line\">                glVertex3fv(points0[VtxId]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    glEnd();</span><br><span class=\"line\">    glBegin( GL_QUADS); \t//构建底面</span><br><span class=\"line\">    glColor3f(1.0f, 1.0f, 1.0f );</span><br><span class=\"line\">    for(i=0;i&lt;4;i++)</span><br><span class=\"line\">        glVertex3fv(points0[i]);\t</span><br><span class=\"line\">    glEnd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void CreateCube()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glBegin(GL_QUADS);\t</span><br><span class=\"line\">    for(int i=0;i&lt;6;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        glColor3fv(Colors1[i]);</span><br><span class=\"line\">        for(int j=0;j&lt;4;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int VtxId=vertice1[i][j];</span><br><span class=\"line\">            glVertex3fv(points1[VtxId]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    glEnd();\t\t\t\t\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void display ( void )   </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\t</span><br><span class=\"line\">    glLoadIdentity();\t</span><br><span class=\"line\">    glPushMatrix();</span><br><span class=\"line\">    glTranslatef(-1.5f,0.0f,-6.0f);\t//平移至左侧</span><br><span class=\"line\">    glRotatef(rtri,0.0f,1.0f,0.0f);\t//旋转一个角度</span><br><span class=\"line\">    CreatePyramid();\t//创建三角塔</span><br><span class=\"line\"></span><br><span class=\"line\">    glLoadIdentity();\t//将矩阵归一化回原样    </span><br><span class=\"line\">    glTranslatef(1.5f,0.0f,-6.0f);\t//平移到右侧</span><br><span class=\"line\">    glRotatef(rquad,1.0f,0.0f,0.0f);\t//旋转一个角度</span><br><span class=\"line\">    CreateCube(); \t//创建立方体</span><br><span class=\"line\">    glPopMatrix();</span><br><span class=\"line\">    </span><br><span class=\"line\">    rtri+=0.2f;\t//修改三角塔旋转角度</span><br><span class=\"line\">    rquad-=0.15f;\t//修改立方体的旋转角度</span><br><span class=\"line\">    glutSwapBuffers ( );  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void reshape ( int width , int height )  </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (height==0)\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">        height=1;\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">    glViewport(0,0,width,height);\t</span><br><span class=\"line\">    glMatrixMode(GL_PROJECTION);\t\t\t\t\t\t</span><br><span class=\"line\">    glLoadIdentity();\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">    gluPerspective(45.0f,(GLfloat)width/(GLfloat)height,0.1f,100.0f);</span><br><span class=\"line\">    glMatrixMode(GL_MODELVIEW);\t\t\t\t\t\t\t</span><br><span class=\"line\">    glLoadIdentity();\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void main ( int argc, char** argv )  </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glutInit ( &amp;argc, argv ); </span><br><span class=\"line\">    glutInitDisplayMode ( GLUT_RGBA | GLUT_DOUBLE ); </span><br><span class=\"line\">    glutInitWindowSize ( 600, 400 ); </span><br><span class=\"line\">    glutCreateWindow ( &quot;Pyramid and cube&quot; );</span><br><span class=\"line\">    InitGL();</span><br><span class=\"line\">    glutDisplayFunc ( display ); </span><br><span class=\"line\">    glutReshapeFunc ( reshape );</span><br><span class=\"line\">    glutIdleFunc ( display );</span><br><span class=\"line\">    glutMainLoop ( );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-4-2-Hermite曲线\"><a href=\"#7-4-2-Hermite曲线\" class=\"headerlink\" title=\"7.4.2  Hermite曲线\"></a>7.4.2  Hermite曲线</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point  \t//点类</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">Double x，y;</span><br><span class=\"line\">Point(double vx， double vy)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    This.x=vx;</span><br><span class=\"line\">    This.y=vy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Point operator – (Point p) \t//重载运算符“-”</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Return new Point(x-p.x ， y-p.y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//在p1和p2之间绘制一条Hermite曲线</span><br><span class=\"line\">//p1-p0为p1处的切线矢量，p3-p2为p2处的切线矢量</span><br><span class=\"line\">//参数区间[0，1]被离散为count份</span><br><span class=\"line\">void HermiteCurve(Point p0，Point p1，Point p2，Point p3，int count)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Point r1，r2;\t//切线矢量</span><br><span class=\"line\">    r1 = p1 - p0;\t//调用重载-</span><br><span class=\"line\">    r2 = p3 - p2; </span><br><span class=\"line\">    double t = 0.0;</span><br><span class=\"line\">    dt = 1.0 / count;</span><br><span class=\"line\">    moveto(p1.x，p1.y);\t//设置起点</span><br><span class=\"line\">    for(int i=0; i&lt;count+1; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        double tt = t * t;</span><br><span class=\"line\">        double ttt = tt * t;</span><br><span class=\"line\">        double F1，F2，F3，F4;\t//调和函数</span><br><span class=\"line\">        F1 = 2 * ttt - 3 * tt + 1;</span><br><span class=\"line\">        F2 = -2 * ttt + 3 * tt;</span><br><span class=\"line\">        F3 = ttt - 2 * tt + t;</span><br><span class=\"line\">        F4 = ttt - tt;</span><br><span class=\"line\">        double x = p1.x * F1 + p2.x * F2 + r1.x * F3 + r2.x * F4;</span><br><span class=\"line\">        double y = p1.y * F1 + p2.y * F2 + r1.y * F3 + r2.y * F4;</span><br><span class=\"line\">        lineto(x，y);</span><br><span class=\"line\">        t+=dt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-4-3-Bezier曲线\"><a href=\"#7-4-3-Bezier曲线\" class=\"headerlink\" title=\"7.4.3  Bezier曲线\"></a>7.4.3  Bezier曲线</h3><h4 id=\"3．三次Bezier曲线的绘制\"><a href=\"#3．三次Bezier曲线的绘制\" class=\"headerlink\" title=\"3．三次Bezier曲线的绘制\"></a>3．三次Bezier曲线的绘制</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绘制由p0，p1，p2，p3确定的Bezier曲线</span><br><span class=\"line\">//参数区间[0，1]被离散为count份</span><br><span class=\"line\">void BezierCurve(Point p0,Point p1,Point p2,Point p3,int count)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double t = 0.0;</span><br><span class=\"line\">    dt = 1.0 / count;</span><br><span class=\"line\">    moveto(p1.x,p1.y);\t//设置起点</span><br><span class=\"line\">    for(int i=0; i&lt;count+1; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        double F1,F2,F3,F4,x,y;\t//调和函数</span><br><span class=\"line\">        double u = 1.0 – t ;</span><br><span class=\"line\">        F1 = u * u * u ;</span><br><span class=\"line\">        F2 = 3 * t * u * u;</span><br><span class=\"line\">        F3 = 3 * t * t * u;</span><br><span class=\"line\">        F4 = t * t * t;</span><br><span class=\"line\">        x = p0.x * F1 + p1.x * F2 + p2.x * F3 + p3.x * F4;</span><br><span class=\"line\">        y = p0.y * F1 + p1.y * F2 + p2.y * F3 + p3.y * F4;</span><br><span class=\"line\">        lineto(x,y);</span><br><span class=\"line\">          t+=dt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4．离散生成Beizer曲线的de-Casteljau算法\"><a href=\"#4．离散生成Beizer曲线的de-Casteljau算法\" class=\"headerlink\" title=\"4．离散生成Beizer曲线的de Casteljau算法\"></a>4．离散生成Beizer曲线的de Casteljau算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void Casteljau(Point p0,  Point p1,  Point p2,  Point p3) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double t=0;</span><br><span class=\"line\">    int count=20;</span><br><span class=\"line\">    double dt=1.0/count;</span><br><span class=\"line\">    MoveTo(p0);</span><br><span class=\"line\">    for(int i=0;i&lt;count;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Point p01,p11,p21,p02,p12,p03;</span><br><span class=\"line\">        p01.x=(1-t)*p0.x+t*p1.x;</span><br><span class=\"line\">        p01.y=(1-t)*p0.y+t*p1.y;</span><br><span class=\"line\"></span><br><span class=\"line\">        p11.x=(1-t)*p1.x+t*p2.x;</span><br><span class=\"line\">        p11.y=(1-t)*p1.y+t*p2.y;</span><br><span class=\"line\"></span><br><span class=\"line\">        p21.x=(1-t)*p2.x+t*p3.x;</span><br><span class=\"line\">        p21.y=(1-t)*p2.y+t*p3.y;</span><br><span class=\"line\"></span><br><span class=\"line\">        p02.x=(1-t)*p01.x+t*p11.x;</span><br><span class=\"line\">        p02.y=(1-t)*p01.y+t*p11.y;</span><br><span class=\"line\"></span><br><span class=\"line\">        p12.x=(1-t)*p11.x+t*p21.x;</span><br><span class=\"line\">        p12.y=(1-t)*p11.y+t*p21.y;</span><br><span class=\"line\"></span><br><span class=\"line\">        p03.x=(1-t)*p02.x+t*p12.x;</span><br><span class=\"line\">        p03.y=(1-t)*p02.y+t*p12.y;</span><br><span class=\"line\">        dc-&gt;LineTo(p03);</span><br><span class=\"line\">        t+=dt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第8章真实感图形技术\"><a href=\"#第8章真实感图形技术\" class=\"headerlink\" title=\"第8章真实感图形技术\"></a>第8章真实感图形技术</h2><h3 id=\"8-3-4-OpenGL中的颜色模型\"><a href=\"#8-3-4-OpenGL中的颜色模型\" class=\"headerlink\" title=\"8.3.4  OpenGL中的颜色模型\"></a>8.3.4  OpenGL中的颜色模型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">void init(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glClearColor(1.0,1.0,1.0,0.0);</span><br><span class=\"line\">    glShadeModel(GL_SMOOTH);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void triangle(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glBegin (GL_TRIANGLES);</span><br><span class=\"line\">    glColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (5.0f,5.0f);</span><br><span class=\"line\">    glColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (25.0f,5.0f);</span><br><span class=\"line\">    glColor3f (0.0f, 0.0f, 1.0f);   glVertex2f (5.0f,25.0f);</span><br><span class=\"line\">    glEnd ();</span><br><span class=\"line\"></span><br><span class=\"line\">    glBegin (GL_TRIANGLES);</span><br><span class=\"line\">    glColor3f (1.0f, 1.0f, 0.0f);   glVertex2f (26.0f,25.0f);</span><br><span class=\"line\">    glColor3f (0.0f, 1.0f, 1.0f);   glVertex2f (26.0f,5.0f);</span><br><span class=\"line\">    glColor3f (1.0f, 0.0f, 1.0f);   glVertex2f (6.0f,25.0f);</span><br><span class=\"line\">    glEnd ();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void display(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">    triangle();</span><br><span class=\"line\">    glFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void reshape(int w,int h)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glViewport(0,0,(GLsizei)w, (GLsizei)h);</span><br><span class=\"line\">    glMatrixMode(GL_PROJECTION);</span><br><span class=\"line\">    glLoadIdentity();</span><br><span class=\"line\">    if(w &lt;= h)</span><br><span class=\"line\">        gluOrtho2D(0.0,30.0,0.0,30.0*(GLfloat)h/(GLfloat)w);</span><br><span class=\"line\">    else</span><br><span class=\"line\">        gluOrtho2D(0.0,30.0*(GLfloat)w/(GLfloat)h,0.0,30.0);</span><br><span class=\"line\">    glMatrixMode(GL_MODELVIEW);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char** argv)</span><br><span class=\"line\">&#123;  glutInit(&amp;argc, argv);</span><br><span class=\"line\">   glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</span><br><span class=\"line\">   glutInitWindowSize(500, 500);</span><br><span class=\"line\">   glutInitWindowPosition(100, 100);</span><br><span class=\"line\">   glutCreateWindow(&quot;OpenGL颜色函数例程&quot;);</span><br><span class=\"line\">   init();</span><br><span class=\"line\">   glutDisplayFunc(display);</span><br><span class=\"line\">   glutReshapeFunc(reshape);</span><br><span class=\"line\">   glutMainLoop();</span><br><span class=\"line\">   return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"《计算机图形学基础（OpenGL版）》勘误表","_content":"\n| 页码|行或位置|原内容|更正为 |备注|\n|--------|------|-------------|-------|-------|\n| 38     | 9   |(1MB)  | (128KB)  |\n| 41     | 16   |$$k=\\Delta x/\\Delta y$$  | $$k=\\Delta y/\\Delta x$$  |\n| 43    | 9   |$$d \\leq 0$$ |$$d \\geq 0$$  | \n| 46     | 6   |$$ s-t = s \\frac{\\Delta x}{\\Delta y}(x_i+1)+2b+2y_i-1$$   | $$ s-t = s \\frac{\\Delta x}{\\Delta y}(x_i+1)+2b -2y_i-1$$  |\n|46|倒数第4行|$$-1\\leq1\\leq0$$|$$0\\leq k\\leq 1$$|\n|47|26|int curx = x1;|int curx = x1 + 1;|\n|48|12|$$b=x_0-x_1$$|$$b=x_1-x_0$$|\n|51|19|令$T$点的坐标为$（x_i, y_i)$|令$P$点的坐标为$（x_i, y_i)$|\n|52|倒数第3行|Cirpot(x0, y0, x, y)|Cirpot(x0, y0, x, y, color)|\n|53|9|Cirpot(x0, y0, x, y)|Cirpot(x0, y0, x, y, color)|\n|57|7|FloodFill|FloodFill4|\n|57|13-16|FloodFill4(..., newcolor)|FloodFill4(..., newcolor, boundaryColor)|\n|58-59|58页倒数第2行~59页第11行|见教材|从点P向任意方向发出一条射线，若该射线与多边形交点的个数为奇数，则P位于多边形内；若为偶数，则P位于多边形外部。当射线与多边形边界点的交点是多边形顶点时（该交点称为奇点，如图3-13的$P_3$，$P_4$，$P_5$和$P_6$情况），如果把每一个奇点简单地计为一个交点，则交点个数为偶数时P点可能在内部，如图3-13中的$P_4$情况。但若将每一个奇点都简单地计为两个交点，同样会导致错误的结果，如图3-13中的$P_3$和$P_5$情况。因此，必须按不同情况区别对待。一般来说，多边形的顶点可分为两类：极值点和非极值点。如果顶点相邻的两边在射线的同侧时，则称该顶点为极值点（如图3-13中的$Q_0$和$Q_1$）；否则称该顶点为非极值点（如图3-13中的$Q_2$）。为了保证射线法判别结果的正确性，奇点交点的计数可以根据上述分类来采用不同的方式。当奇点是多边形的极值点时，交点按照两个交点计算，否则，按一个交点计算，如图3.13所示。|\n|59|图3-13|见教材|![图片描述](http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE3-13.png)|\n|60|图3.16|  ![这里写图片描述](http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE3-16-Error.png)    | ![这里写图片描述](http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE3-16Right.png)|\n|65 | 倒数第4行 | 图3.22 | 图3.23 |\n|65 | 倒数第3行 | $y_i+m/2$ | $y_i-int(y_i)+m/2$ |\n|73|6|$$ y'=rsin(\\phi+\\theta)=rcos \\phi sin \\theta - rsin \\phi cos \\theta $$| $$ y'=rsin(\\phi+\\theta)=rcos \\phi sin \\theta + rsin \\phi cos \\theta $$ |\n|75 | 8 | 相对于y轴的反射 | 相对于x轴的反射 |\n|82/87 | 式(4.40/57) | $$\\begin{bmatrix} cos\\theta & \\mathbf{-sin\\theta} & 0  \\\\ \\mathbf{sin\\theta} & cos\\theta & 0  \\\\ 0 & 0 & 1 \\\\  \\end{bmatrix} $$ | $$\\begin{bmatrix} cos\\theta & \\mathbf{sin\\theta} & 0  \\\\ \\mathbf{-sin\\theta} & cos\\theta & 0  \\\\ 0 & 0 & 1 \\\\  \\end{bmatrix} $$ |\n|117 | 2 | $$T=R(\\theta)T(-x_0, -y_0) =\\begin{bmatrix} cos\\theta & \\mathbf{sin\\theta} & 0  \\\\ \\mathbf{-sin\\theta} & cos\\theta & 0  \\\\ 0 & 0 & 1 \\\\  \\end{bmatrix}  \\begin{bmatrix} 1 & 0 & -x_0  \\\\0 & 1 & -y_0  \\\\0 & 0 & 1  \\end{bmatrix}$$ | $$T=R(\\theta)T(-x_0, -y_0) = \\begin{bmatrix}\tcos\\theta & -sin\\theta & 0  \\\\sin\\theta & cos\\theta & 0  \\\\\t0 & 0 & 1  \\end{bmatrix}  \t\\begin{bmatrix} 1 & 0 & -x_0  \\\\0 & 1 & -y_0  \\\\0 & 0 & 1  \\end{bmatrix} $$ |\n|122 | 15 | $$t_1^{''}=(x_R-x_1)/dx$$ | $$t_1^{''}=(y_B-y_1)/dy$$ |\n| 130     |  24  |glLoadIdentity()  | 应移至void display(void)中的第1个glColor3f(0.0,0.0,1.0)后  |  参考[5.5 Opengl编程实例－红蓝三角形 ](http://blog.csdn.net/wpxu08/article/details/77608983)|\n| 131     |  1  | ![这里写图片描述](http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE5-17-Error.png)  | ![这里写图片描述](http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE5-17.png)|\n| 131     | 图5.17后   | 无 | 增加思考内容：“思考：教材中原代码中根据所给三角形顶点坐标，三角形应为一个正角形，为何显示时不是正角形呢？同时，在旋转后的三角形也发生了变形，请分析原因，并给出修改建议。提示：请从\"glViewport()\"函数入手。”|\n| 135    | (6.2)  | $$u=\\frac{V \\times n}{\\mid N \\mid} = (u_x, u_y, u_z)$$  | $$u=\\frac{V \\times n}{\\mid V \\times n \\mid} = (u_x, u_y, u_z)$$|\n|151|(6.29)| $$  \\begin{bmatrix}x_p  \\\\ y_p  \\\\\t0  \\\\\t1\t\\end{bmatrix} =\\begin{bmatrix}1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\\t0 & 0 & 0 & 0 \\\\\t0 & 0 & 0 & 1\\end{bmatrix}\t\\begin{bmatrix}\t1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\\t0 & 0 & 1 & 0 \\\\\t0 & 0 & \\frac{1}{d} & \\mathbf{ 1}  \\end{bmatrix} \\begin{bmatrix}\tx_s  \\\\ y_s  \\\\\tz_s  \\\\\t1\t\\end{bmatrix} =  \\begin{bmatrix}\tx_s  \\\\ y_s  \\\\\t0  \\\\\t\\mathbf{1+ \\frac{z_s}{d}} \t\\end{bmatrix}$$ \t\t|$$  \\begin{bmatrix}\tx_p  \\\\ y_p  \\\\\t0  \\\\\t1\t\\end{bmatrix} =\\begin{bmatrix}1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\0 & 0 & 0 & 0 \\\\0 & 0 & 0 & 1\\end{bmatrix} \\begin{bmatrix}\t1 & 0 & 0  & 0\\\\ 0 & 1 & 0 & 0 \\\\\t0 & 0 & 1 & 0 \\\\\t0 & 0 & \\frac{1}{d} & \\mathbf{0}\\end{bmatrix} \\begin{bmatrix} x_s  \\\\ y_s  \\\\\tz_s  \\\\\t1\t\\end{bmatrix}\t =  \\begin{bmatrix}\tx_s  \\\\ y_s  \\\\\t0  \\\\\t\\mathbf{ \\frac{z_s}{d} }\t\\end{bmatrix}$$ |\n|151|(6.31)| $$ \\begin{bmatrix}1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\\t0 & 0 & 1 & 0 \\\\\t0 & 0 & r & \\mathbf{1}\\end{bmatrix} $$ |$$ \\begin{bmatrix}\t1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\\t0 & 0 & 1 & 0 \\\\\t0 & 0 & r & \\mathbf{0}\\end{bmatrix} $$ |\n|151|(6.33)| $$ \\begin{bmatrix}1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\0 & 0 & 1 & 0 \\\\\tp & 0 & 0 & \\mathbf{1}\\end{bmatrix} $$ |$$ \\begin{bmatrix}1 & 0 & 0  & 0 \\\\ 0 & 1 & 0 & 0 \\\\\t0 & 0 & 1 & 0 \\\\\tp & 0 & 0 & \\mathbf{0 }\\end{bmatrix} $$ |\n|151|(6.34)| $$ \\begin{bmatrix}\t1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\\t0 & 0 & 1 & 0 \\\\\t0 & q & 0 & \\mathbf{1}\\end{bmatrix} $$ |$$ \\begin{bmatrix}\t1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\\t0 & 0 & 1 & 0 \\\\\t0 & q & 0 & \\mathbf{0}\\end{bmatrix} $$ |\n|152|(6.35)| ![这里写图片描述](http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213639458-812719339.png) |![这里写图片描述](http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213640942-1081172362.png) |\n|152|(6.35)| ![这里写图片描述](http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213718536-1468325746.png) |![这里写图片描述](http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213722567-1226100288.png) |\n| 152     |  12  |线性关系  | 非线性关系  |  |\n| 152     |  (6.37)  |$$ a=\\frac{-(z_{far}+z_{near})z_{near}}{z_{far}-z_{near}}$$  | $$ a=\\frac{z_{far}+z_{near}}{z_{near}(z_{far}-z_{near})}$$  |  |\n| 224     |  2  |对于**右手**坐标系  | 对于**OpenGL所采用的左手**坐标系  | 烟台大学韩明峰指正 |\n|      |  图8.17  |![这里写图片描述](https://img-blog.csdn.net/20180914224000616?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)  |![这里写图片描述](https://img-blog.csdn.net/2018091422402764?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)  |  |\n|      |  8  | 深度缓冲器所有单元均置为最**小** z值   |  深度缓冲器所有单元均置为最**大** z值  | 为保持与图8.17一致而修改，原内容也没错，下同  |\n|      |  11 |若z **>** ZB(x, y)，则ZB(x, y)=z   | 若z **&lt;** ZB(x, y)，则ZB(x, y)=z |   |\n|      |  20 |ZB(x,y)单元置为最**小**值  | ZB(x,y)单元置为最**大**值  |   |\n|      |  26  | if(z(x,y) **>** ZB(x,y))   |  if(z(x,y) **&lt;** ZB(x,y))  |   |\n\n### 附录B 模拟试题及答案\n| 页码|位置|原内容|更正 |备注\n|--------|------|-------------|-------|-------|\n| 337    |  图B.1  | ![这里写图片描述](http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BEB-1-Wrong.png)  | ![这里写图片描述](http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BEB-1-Right.png)| |\n| 340    |  模2试题，一.单选题，第6题  |$$T= \\left[ \\begin{matrix}   2 & 0 & 0 \\\\   0 & 1 & 0 \\\\   1 & 1 & 1  \\end{matrix}  \\right]  $$  | $$P^{'}= PT =\\left[ \\begin{matrix}   x & y & 1  \\end{matrix}  \\right] \\left[ \\begin{matrix}   2 & 0 & 0 \\\\   0 & 1 & 0 \\\\   1 & 1 & 1  \\end{matrix}  \\right]   $$  |  |\n| 345    |  模3试题，一.单选题，第1题B选项  |高光域准确  | 可以产生高光  |此题正确答案为B，见后  |\n| 347    |  四.填空题，第3题  |点坐标采用**行**向量形式  | 点坐标采用**列**向量形式  |  |\n| 349    |  模1答案，二.多选题，第1题答案  |ABC  | ABCD  | 错切变换是沿坐标轴错切，参考对象仍为坐标原点 |\n| 350    |  模2答案，一.单选题，第1题答案  |B  | C  |  |\n| 350    |  一.单选题，第3题答案  |B  | C  |  |\n| 350    |  一.单选题，第4题答案  |C  | D  |  |\n| 350    |  二.多选题，第10题答案  |ACD  | ABCD  |  |\n| 350    |  二.多选题，第11题答案  |CD  | BCD  |  |\n| 352    |  模3答案，一.单选题，第1题答案  |D  | B  |  |\n| 352    |  二.多选题，第1题答案  |BCE  | AD  |  |\n| 352    |  二.多选题，第2题答案  |BD  | B  |  |\n| 352    |  二.多选题，第6题答案  |BD  | BCD  |  |\n| 354    |  第1行  |$$\\begin{bmatrix}\t0 & 0 & 0 & 1  \\\\\t1/27 & 1/9 & 1/3 & 0  \\\\  8/27 & 4/9 & 1/3 & 0  \\\\\t1 & 1 & 1 & 1 \\end{bmatrix}$$  | $$\\begin{bmatrix}\t0 & 0 & 0 & 1  \\\\\t1/27 & 1/9 & 1/3 & 1  \\\\  8/27 & 4/9 & 2/3 & 1  \\\\\t1 & 1 & 1 & 1 \\end{bmatrix}$$  |  |\n\n\n- **P349, 模拟试题1，第四大题第3小题答案：**\n$$T_1= \\left[ \\begin{matrix}\n   1 & 0 & 0 \\\\\n   0 & 1 & 0 \\\\\n   -2 & -4 & 1\n  \\end{matrix}\n  \\right]  $$\n  \n$$T_2= \\left[ \\begin{matrix}\n   cos600^\\circ & sin600^\\circ & 0 \\\\\n   -sin600^\\circ & cos600^\\circ & 0 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  =\\left[ \\begin{matrix}\n   -1/2 & -\\sqrt{3}/2 & 0 \\\\\n   \\sqrt{3}/2 & -1/2 & 0 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]$$\n  \n$$T_3= \\left[ \\begin{matrix}\n   1 & 0 & 0 \\\\\n   0 & 1 & 0 \\\\\n   2 & 4 & 1\n  \\end{matrix}\n  \\right]  $$\n\n$$T= T_1T_2T_3= \\left[ \\begin{matrix}\n   -1/2 & -\\sqrt{3}/2 &  0\\\\\n   \\sqrt{3}/2 & -1/2 & 0 \\\\\n   3-2 \\sqrt{3} & 6+ \\sqrt{3} & 1\n  \\end{matrix}\n  \\right]  $$\n由 $ P^{'}= PT$  可得：$$ \\left[ \\begin{matrix}\n    A^{'} \\\\\n    B^{'} \\\\\n    C^{'}\n  \\end{matrix}\n  \\right] =\\left[ \\begin{matrix}\n    A \\\\\n    B \\\\\n    C\n  \\end{matrix}\n  \\right] T\n  = \\left[ \\begin{matrix}\n   2 & 4 & 1 \\\\\n   4 & 4 & 1 \\\\\n   4 & 1 & 1\n  \\end{matrix}\n  \\right] T= \n  \\left[ \\begin{matrix}\n   2 & 4 & 1 \\\\\n   1 & 4-\\sqrt{3} & 1 \\\\\n   1-3\\sqrt{3}/2 & 11/2-\\sqrt{3} & 1\n  \\end{matrix}\n  \\right]$$ \n\n<!---列向量模式\n      1.变换过程：\n(1) 平移三角形，使其角点A与原点重合。其中，平移变换对应的矩阵为\n$$T_1= \\left[ \\begin{matrix}\n   1 & 0 & -2 \\\\\n   0 & 1 & -4 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n  (2) 对平移后三角形进行旋转变换，使其绕角点A（即原点）逆时针旋转600度。相应的旋转变换矩阵为\n$$T_2= \\left[ \\begin{matrix}\n   cos600^\\circ & -sin600^\\circ & 0 \\\\\n   sin600^\\circ & cos600^\\circ & 0 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n  (3) 平移三角形，使其角点A回到原有位置即点（2,4）。其中，平移变换对应的矩阵为\n$$T_3= \\left[ \\begin{matrix}\n   1 & 0 & 2 \\\\\n   0 & 1 & 4 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n综合（1）、（2）、（3）可得最终的变换矩阵为：\n$$T= T_3T_2T_1= \\left[ \\begin{matrix}\n   -1/2 & \\sqrt{3}/2 &  3-2 \\sqrt{3}\\\\\n   - \\sqrt{3}/2 & -1/2 & 6+ \\sqrt{3} \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n  2. 由变换计算式$ P^{'}＝TP$，可计算变换后的三角形顶点坐标分别为：\n  $$ A^{'}＝TA=T \\left[ \\begin{matrix}\n    2 \\\\\n    4 \\\\\n    1\n  \\end{matrix}\n  \\right]=\\left[ \\begin{matrix}\n    2 \\\\\n    4 \\\\\n    1\n  \\end{matrix}\n  \\right]$$\n $$ B^{'}＝TB=T \\left[ \\begin{matrix}\n    4 \\\\\n    4 \\\\\n    1\n  \\end{matrix}\n  \\right]=\\left[ \\begin{matrix}\n    1 \\\\\n    4-\\sqrt{3} \\\\\n    1\n  \\end{matrix}\n  \\right]$$\n   $$ C^{'}＝TC=T \\left[ \\begin{matrix}\n    4 \\\\\n    1 \\\\\n    1\n  \\end{matrix}\n  \\right]=\\left[ \\begin{matrix}\n    1-3\\sqrt{3}/2  \\\\\n    11/2-\\sqrt{3}  \\\\\n    1\n  \\end{matrix}\n  \\right]$$  \n  -->\n\n- **P350, 模拟试题1，第四大题第4小题答案：**\n由相似三角形关系可得$$ \\frac{x^{'}} {x} =  \\frac{d} {d-z} $$于是\n$$x^{'} =  \\frac{xd} {d-z}=  \\frac{x} {1-\\frac{z}{d}}$$\n同理有：$$y^{'} =  \\frac{y} {1-\\frac{z}{d}}$$\n另外，$z^{'}=0$.\n于是有：\n$$ P^{'}  = \\left[ \\begin{matrix}\n    x^{'} \\\\\n    y^{'} \\\\\n    z^{'} \\\\\n    1\n  \\end{matrix}\n  \\right] =\\left[ \\begin{matrix}\n    \\frac{x} {1-\\frac{z}{d}} \\\\\n    \\frac{y} {1-\\frac{z}{d}} \\\\\n    0 \\\\\n    1\n  \\end{matrix}\n  \\right] \n  \\equiv \\left[ \\begin{matrix}\n   x \\\\\n   y \\\\\n   0 \\\\\n   1-\\frac{z}{d}\n  \\end{matrix}\n  \\right] = \n  \\left[ \\begin{matrix}\n   1 & 0 & 0 & 0 \\\\\n   0 & 1 & 0 & 0 \\\\\n   0 & 0 & 0 & 0 \\\\\n  0 & 0 & -\\frac{1}{d} & 1 \\\\\n  \\end{matrix}\n  \\right] \n  \\left[ \\begin{matrix}\n   x \\\\\n   y \\\\\n   z \\\\\n   1\n  \\end{matrix}\n  \\right] ＝ TP $$\n  上式中$T$即为透视变换矩阵，其中$ \\equiv$表示齐次坐标转化。\n  顶点坐标计算：以G点为例，G点齐次坐标为(1,1,-1,1)，则由透视变换可知：\n  $$ G^{'}  = TG =T \\left[ \\begin{matrix}\n    1 \\\\\n    1 \\\\\n    -1 \\\\\n    1\n  \\end{matrix}\n  \\right] =\n  \\left[ \\begin{matrix}\n   1 & 0 & 0 & 0 \\\\\n   0 & 1 & 0 & 0 \\\\\n   0 & 0 & 0 & 0 \\\\\n  0 & 0 & -\\frac{1}{d} & 1 \\\\\n  \\end{matrix}\n  \\right] \n  \\left[ \\begin{matrix}\n   1 \\\\\n    1 \\\\\n    -1 \\\\\n    1\n  \\end{matrix}\n  \\right] ＝ \\left[ \\begin{matrix}\n   1 \\\\\n    1 \\\\\n    0 \\\\\n    1+\\frac{1}{d}\n  \\end{matrix}\n  \\right]\n  \\equiv \\left[ \\begin{matrix}\n   \\frac{d}{d+1} \\\\\n    \\frac{d}{d+1} \\\\\n    0 \\\\\n    1\n  \\end{matrix}\n  \\right]  $$\n故透视变换后G点变为$G^{'}=( \\frac{d}{d+1},  \\frac{d}{d+1}, 0)$.\n\n- **P351, 模拟试题2，第五大题第2小题答案：**\n$$ cosi=\\vec{L} \\cdot \\vec{N}=0.5, \\vec{R} = 2cosi\\vec{N}-\\vec{L}=(-1/2,1/2,-\\sqrt{2}/2).$$\n$$cos\\theta= \\vec{R} \\cdot \\vec{V} = -\\sqrt{2}/2<0, \\vec{R}与\\vec{V}夹角大于90度，因此\\vec{V}方向上无镜面反射光，所以 cos\\theta取0. $$\n$$\\therefore I=I_{pa}k_a+I_p(k_dcosi+k_scos^n\\theta)=160*0.5+175(0.2*0.5+0)=97.5$$\n\n\n- **P353, 模拟试题3，第五大题第1小题答案：**\n$a=y_0-y_1=-4, b=x_1-x_0=8, d_0=a+0.5b=0; a+b=4, a=-4$，当$d_i<0$时，中点M在直线下方，下一点取当前点P的右上方点，记为NE，同时$d_{i+1}=d_i+a+b$；当$d_i\\geq0$时，中点M在直线上方，下一点取当前点P的右侧点，记为E，同时$d_{i+1}=d_i+a$。根据中点线算法原理可得下表：\n\n| x|y|$d_i$|Next Point |\n|--------|------|-------------|-------|\n| 2     | 1   |0  | E  |\n| 3     | 1   |0-4=-4  | NE  |\n| 4     | 2   |-4+4=0  | E  |\n| 5     | 2   |0-4=-4  | NE  |\n| 6     | 3   |-4+4=0  | E  |\n| 7     | 3   |0-4=-4  | NE  |\n| 8     | 4   |-4+4=0  | E  |\n| 9     | 4   |0-4=-4  | NE  |\n| 10     | 5   |  |   |\n\n<!--- 中点线有关原理\n令直线方程为$F(x,y)=ax+by+c=0$，设当前点为$P(x_p, y_p)$，则可根据中点构造判别式\n$$d=F(M)=F(x_p+1, y_p+0.5)=a(x_p+1)+b(y_p+0.5)+c$$\n-->","source":"_posts/CGBook_Error.md","raw":"---\ntitle: 《计算机图形学基础（OpenGL版）》勘误表\ntags: [计算机图形学]\ncategories: 计算机图形学\n---\n\n| 页码|行或位置|原内容|更正为 |备注|\n|--------|------|-------------|-------|-------|\n| 38     | 9   |(1MB)  | (128KB)  |\n| 41     | 16   |$$k=\\Delta x/\\Delta y$$  | $$k=\\Delta y/\\Delta x$$  |\n| 43    | 9   |$$d \\leq 0$$ |$$d \\geq 0$$  | \n| 46     | 6   |$$ s-t = s \\frac{\\Delta x}{\\Delta y}(x_i+1)+2b+2y_i-1$$   | $$ s-t = s \\frac{\\Delta x}{\\Delta y}(x_i+1)+2b -2y_i-1$$  |\n|46|倒数第4行|$$-1\\leq1\\leq0$$|$$0\\leq k\\leq 1$$|\n|47|26|int curx = x1;|int curx = x1 + 1;|\n|48|12|$$b=x_0-x_1$$|$$b=x_1-x_0$$|\n|51|19|令$T$点的坐标为$（x_i, y_i)$|令$P$点的坐标为$（x_i, y_i)$|\n|52|倒数第3行|Cirpot(x0, y0, x, y)|Cirpot(x0, y0, x, y, color)|\n|53|9|Cirpot(x0, y0, x, y)|Cirpot(x0, y0, x, y, color)|\n|57|7|FloodFill|FloodFill4|\n|57|13-16|FloodFill4(..., newcolor)|FloodFill4(..., newcolor, boundaryColor)|\n|58-59|58页倒数第2行~59页第11行|见教材|从点P向任意方向发出一条射线，若该射线与多边形交点的个数为奇数，则P位于多边形内；若为偶数，则P位于多边形外部。当射线与多边形边界点的交点是多边形顶点时（该交点称为奇点，如图3-13的$P_3$，$P_4$，$P_5$和$P_6$情况），如果把每一个奇点简单地计为一个交点，则交点个数为偶数时P点可能在内部，如图3-13中的$P_4$情况。但若将每一个奇点都简单地计为两个交点，同样会导致错误的结果，如图3-13中的$P_3$和$P_5$情况。因此，必须按不同情况区别对待。一般来说，多边形的顶点可分为两类：极值点和非极值点。如果顶点相邻的两边在射线的同侧时，则称该顶点为极值点（如图3-13中的$Q_0$和$Q_1$）；否则称该顶点为非极值点（如图3-13中的$Q_2$）。为了保证射线法判别结果的正确性，奇点交点的计数可以根据上述分类来采用不同的方式。当奇点是多边形的极值点时，交点按照两个交点计算，否则，按一个交点计算，如图3.13所示。|\n|59|图3-13|见教材|![图片描述](http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE3-13.png)|\n|60|图3.16|  ![这里写图片描述](http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE3-16-Error.png)    | ![这里写图片描述](http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE3-16Right.png)|\n|65 | 倒数第4行 | 图3.22 | 图3.23 |\n|65 | 倒数第3行 | $y_i+m/2$ | $y_i-int(y_i)+m/2$ |\n|73|6|$$ y'=rsin(\\phi+\\theta)=rcos \\phi sin \\theta - rsin \\phi cos \\theta $$| $$ y'=rsin(\\phi+\\theta)=rcos \\phi sin \\theta + rsin \\phi cos \\theta $$ |\n|75 | 8 | 相对于y轴的反射 | 相对于x轴的反射 |\n|82/87 | 式(4.40/57) | $$\\begin{bmatrix} cos\\theta & \\mathbf{-sin\\theta} & 0  \\\\ \\mathbf{sin\\theta} & cos\\theta & 0  \\\\ 0 & 0 & 1 \\\\  \\end{bmatrix} $$ | $$\\begin{bmatrix} cos\\theta & \\mathbf{sin\\theta} & 0  \\\\ \\mathbf{-sin\\theta} & cos\\theta & 0  \\\\ 0 & 0 & 1 \\\\  \\end{bmatrix} $$ |\n|117 | 2 | $$T=R(\\theta)T(-x_0, -y_0) =\\begin{bmatrix} cos\\theta & \\mathbf{sin\\theta} & 0  \\\\ \\mathbf{-sin\\theta} & cos\\theta & 0  \\\\ 0 & 0 & 1 \\\\  \\end{bmatrix}  \\begin{bmatrix} 1 & 0 & -x_0  \\\\0 & 1 & -y_0  \\\\0 & 0 & 1  \\end{bmatrix}$$ | $$T=R(\\theta)T(-x_0, -y_0) = \\begin{bmatrix}\tcos\\theta & -sin\\theta & 0  \\\\sin\\theta & cos\\theta & 0  \\\\\t0 & 0 & 1  \\end{bmatrix}  \t\\begin{bmatrix} 1 & 0 & -x_0  \\\\0 & 1 & -y_0  \\\\0 & 0 & 1  \\end{bmatrix} $$ |\n|122 | 15 | $$t_1^{''}=(x_R-x_1)/dx$$ | $$t_1^{''}=(y_B-y_1)/dy$$ |\n| 130     |  24  |glLoadIdentity()  | 应移至void display(void)中的第1个glColor3f(0.0,0.0,1.0)后  |  参考[5.5 Opengl编程实例－红蓝三角形 ](http://blog.csdn.net/wpxu08/article/details/77608983)|\n| 131     |  1  | ![这里写图片描述](http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE5-17-Error.png)  | ![这里写图片描述](http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE5-17.png)|\n| 131     | 图5.17后   | 无 | 增加思考内容：“思考：教材中原代码中根据所给三角形顶点坐标，三角形应为一个正角形，为何显示时不是正角形呢？同时，在旋转后的三角形也发生了变形，请分析原因，并给出修改建议。提示：请从\"glViewport()\"函数入手。”|\n| 135    | (6.2)  | $$u=\\frac{V \\times n}{\\mid N \\mid} = (u_x, u_y, u_z)$$  | $$u=\\frac{V \\times n}{\\mid V \\times n \\mid} = (u_x, u_y, u_z)$$|\n|151|(6.29)| $$  \\begin{bmatrix}x_p  \\\\ y_p  \\\\\t0  \\\\\t1\t\\end{bmatrix} =\\begin{bmatrix}1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\\t0 & 0 & 0 & 0 \\\\\t0 & 0 & 0 & 1\\end{bmatrix}\t\\begin{bmatrix}\t1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\\t0 & 0 & 1 & 0 \\\\\t0 & 0 & \\frac{1}{d} & \\mathbf{ 1}  \\end{bmatrix} \\begin{bmatrix}\tx_s  \\\\ y_s  \\\\\tz_s  \\\\\t1\t\\end{bmatrix} =  \\begin{bmatrix}\tx_s  \\\\ y_s  \\\\\t0  \\\\\t\\mathbf{1+ \\frac{z_s}{d}} \t\\end{bmatrix}$$ \t\t|$$  \\begin{bmatrix}\tx_p  \\\\ y_p  \\\\\t0  \\\\\t1\t\\end{bmatrix} =\\begin{bmatrix}1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\0 & 0 & 0 & 0 \\\\0 & 0 & 0 & 1\\end{bmatrix} \\begin{bmatrix}\t1 & 0 & 0  & 0\\\\ 0 & 1 & 0 & 0 \\\\\t0 & 0 & 1 & 0 \\\\\t0 & 0 & \\frac{1}{d} & \\mathbf{0}\\end{bmatrix} \\begin{bmatrix} x_s  \\\\ y_s  \\\\\tz_s  \\\\\t1\t\\end{bmatrix}\t =  \\begin{bmatrix}\tx_s  \\\\ y_s  \\\\\t0  \\\\\t\\mathbf{ \\frac{z_s}{d} }\t\\end{bmatrix}$$ |\n|151|(6.31)| $$ \\begin{bmatrix}1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\\t0 & 0 & 1 & 0 \\\\\t0 & 0 & r & \\mathbf{1}\\end{bmatrix} $$ |$$ \\begin{bmatrix}\t1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\\t0 & 0 & 1 & 0 \\\\\t0 & 0 & r & \\mathbf{0}\\end{bmatrix} $$ |\n|151|(6.33)| $$ \\begin{bmatrix}1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\0 & 0 & 1 & 0 \\\\\tp & 0 & 0 & \\mathbf{1}\\end{bmatrix} $$ |$$ \\begin{bmatrix}1 & 0 & 0  & 0 \\\\ 0 & 1 & 0 & 0 \\\\\t0 & 0 & 1 & 0 \\\\\tp & 0 & 0 & \\mathbf{0 }\\end{bmatrix} $$ |\n|151|(6.34)| $$ \\begin{bmatrix}\t1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\\t0 & 0 & 1 & 0 \\\\\t0 & q & 0 & \\mathbf{1}\\end{bmatrix} $$ |$$ \\begin{bmatrix}\t1 & 0 & 0  & 0\\\\\t0 & 1 & 0 & 0 \\\\\t0 & 0 & 1 & 0 \\\\\t0 & q & 0 & \\mathbf{0}\\end{bmatrix} $$ |\n|152|(6.35)| ![这里写图片描述](http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213639458-812719339.png) |![这里写图片描述](http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213640942-1081172362.png) |\n|152|(6.35)| ![这里写图片描述](http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213718536-1468325746.png) |![这里写图片描述](http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213722567-1226100288.png) |\n| 152     |  12  |线性关系  | 非线性关系  |  |\n| 152     |  (6.37)  |$$ a=\\frac{-(z_{far}+z_{near})z_{near}}{z_{far}-z_{near}}$$  | $$ a=\\frac{z_{far}+z_{near}}{z_{near}(z_{far}-z_{near})}$$  |  |\n| 224     |  2  |对于**右手**坐标系  | 对于**OpenGL所采用的左手**坐标系  | 烟台大学韩明峰指正 |\n|      |  图8.17  |![这里写图片描述](https://img-blog.csdn.net/20180914224000616?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)  |![这里写图片描述](https://img-blog.csdn.net/2018091422402764?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)  |  |\n|      |  8  | 深度缓冲器所有单元均置为最**小** z值   |  深度缓冲器所有单元均置为最**大** z值  | 为保持与图8.17一致而修改，原内容也没错，下同  |\n|      |  11 |若z **>** ZB(x, y)，则ZB(x, y)=z   | 若z **&lt;** ZB(x, y)，则ZB(x, y)=z |   |\n|      |  20 |ZB(x,y)单元置为最**小**值  | ZB(x,y)单元置为最**大**值  |   |\n|      |  26  | if(z(x,y) **>** ZB(x,y))   |  if(z(x,y) **&lt;** ZB(x,y))  |   |\n\n### 附录B 模拟试题及答案\n| 页码|位置|原内容|更正 |备注\n|--------|------|-------------|-------|-------|\n| 337    |  图B.1  | ![这里写图片描述](http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BEB-1-Wrong.png)  | ![这里写图片描述](http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BEB-1-Right.png)| |\n| 340    |  模2试题，一.单选题，第6题  |$$T= \\left[ \\begin{matrix}   2 & 0 & 0 \\\\   0 & 1 & 0 \\\\   1 & 1 & 1  \\end{matrix}  \\right]  $$  | $$P^{'}= PT =\\left[ \\begin{matrix}   x & y & 1  \\end{matrix}  \\right] \\left[ \\begin{matrix}   2 & 0 & 0 \\\\   0 & 1 & 0 \\\\   1 & 1 & 1  \\end{matrix}  \\right]   $$  |  |\n| 345    |  模3试题，一.单选题，第1题B选项  |高光域准确  | 可以产生高光  |此题正确答案为B，见后  |\n| 347    |  四.填空题，第3题  |点坐标采用**行**向量形式  | 点坐标采用**列**向量形式  |  |\n| 349    |  模1答案，二.多选题，第1题答案  |ABC  | ABCD  | 错切变换是沿坐标轴错切，参考对象仍为坐标原点 |\n| 350    |  模2答案，一.单选题，第1题答案  |B  | C  |  |\n| 350    |  一.单选题，第3题答案  |B  | C  |  |\n| 350    |  一.单选题，第4题答案  |C  | D  |  |\n| 350    |  二.多选题，第10题答案  |ACD  | ABCD  |  |\n| 350    |  二.多选题，第11题答案  |CD  | BCD  |  |\n| 352    |  模3答案，一.单选题，第1题答案  |D  | B  |  |\n| 352    |  二.多选题，第1题答案  |BCE  | AD  |  |\n| 352    |  二.多选题，第2题答案  |BD  | B  |  |\n| 352    |  二.多选题，第6题答案  |BD  | BCD  |  |\n| 354    |  第1行  |$$\\begin{bmatrix}\t0 & 0 & 0 & 1  \\\\\t1/27 & 1/9 & 1/3 & 0  \\\\  8/27 & 4/9 & 1/3 & 0  \\\\\t1 & 1 & 1 & 1 \\end{bmatrix}$$  | $$\\begin{bmatrix}\t0 & 0 & 0 & 1  \\\\\t1/27 & 1/9 & 1/3 & 1  \\\\  8/27 & 4/9 & 2/3 & 1  \\\\\t1 & 1 & 1 & 1 \\end{bmatrix}$$  |  |\n\n\n- **P349, 模拟试题1，第四大题第3小题答案：**\n$$T_1= \\left[ \\begin{matrix}\n   1 & 0 & 0 \\\\\n   0 & 1 & 0 \\\\\n   -2 & -4 & 1\n  \\end{matrix}\n  \\right]  $$\n  \n$$T_2= \\left[ \\begin{matrix}\n   cos600^\\circ & sin600^\\circ & 0 \\\\\n   -sin600^\\circ & cos600^\\circ & 0 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  =\\left[ \\begin{matrix}\n   -1/2 & -\\sqrt{3}/2 & 0 \\\\\n   \\sqrt{3}/2 & -1/2 & 0 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]$$\n  \n$$T_3= \\left[ \\begin{matrix}\n   1 & 0 & 0 \\\\\n   0 & 1 & 0 \\\\\n   2 & 4 & 1\n  \\end{matrix}\n  \\right]  $$\n\n$$T= T_1T_2T_3= \\left[ \\begin{matrix}\n   -1/2 & -\\sqrt{3}/2 &  0\\\\\n   \\sqrt{3}/2 & -1/2 & 0 \\\\\n   3-2 \\sqrt{3} & 6+ \\sqrt{3} & 1\n  \\end{matrix}\n  \\right]  $$\n由 $ P^{'}= PT$  可得：$$ \\left[ \\begin{matrix}\n    A^{'} \\\\\n    B^{'} \\\\\n    C^{'}\n  \\end{matrix}\n  \\right] =\\left[ \\begin{matrix}\n    A \\\\\n    B \\\\\n    C\n  \\end{matrix}\n  \\right] T\n  = \\left[ \\begin{matrix}\n   2 & 4 & 1 \\\\\n   4 & 4 & 1 \\\\\n   4 & 1 & 1\n  \\end{matrix}\n  \\right] T= \n  \\left[ \\begin{matrix}\n   2 & 4 & 1 \\\\\n   1 & 4-\\sqrt{3} & 1 \\\\\n   1-3\\sqrt{3}/2 & 11/2-\\sqrt{3} & 1\n  \\end{matrix}\n  \\right]$$ \n\n<!---列向量模式\n      1.变换过程：\n(1) 平移三角形，使其角点A与原点重合。其中，平移变换对应的矩阵为\n$$T_1= \\left[ \\begin{matrix}\n   1 & 0 & -2 \\\\\n   0 & 1 & -4 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n  (2) 对平移后三角形进行旋转变换，使其绕角点A（即原点）逆时针旋转600度。相应的旋转变换矩阵为\n$$T_2= \\left[ \\begin{matrix}\n   cos600^\\circ & -sin600^\\circ & 0 \\\\\n   sin600^\\circ & cos600^\\circ & 0 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n  (3) 平移三角形，使其角点A回到原有位置即点（2,4）。其中，平移变换对应的矩阵为\n$$T_3= \\left[ \\begin{matrix}\n   1 & 0 & 2 \\\\\n   0 & 1 & 4 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n综合（1）、（2）、（3）可得最终的变换矩阵为：\n$$T= T_3T_2T_1= \\left[ \\begin{matrix}\n   -1/2 & \\sqrt{3}/2 &  3-2 \\sqrt{3}\\\\\n   - \\sqrt{3}/2 & -1/2 & 6+ \\sqrt{3} \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n  2. 由变换计算式$ P^{'}＝TP$，可计算变换后的三角形顶点坐标分别为：\n  $$ A^{'}＝TA=T \\left[ \\begin{matrix}\n    2 \\\\\n    4 \\\\\n    1\n  \\end{matrix}\n  \\right]=\\left[ \\begin{matrix}\n    2 \\\\\n    4 \\\\\n    1\n  \\end{matrix}\n  \\right]$$\n $$ B^{'}＝TB=T \\left[ \\begin{matrix}\n    4 \\\\\n    4 \\\\\n    1\n  \\end{matrix}\n  \\right]=\\left[ \\begin{matrix}\n    1 \\\\\n    4-\\sqrt{3} \\\\\n    1\n  \\end{matrix}\n  \\right]$$\n   $$ C^{'}＝TC=T \\left[ \\begin{matrix}\n    4 \\\\\n    1 \\\\\n    1\n  \\end{matrix}\n  \\right]=\\left[ \\begin{matrix}\n    1-3\\sqrt{3}/2  \\\\\n    11/2-\\sqrt{3}  \\\\\n    1\n  \\end{matrix}\n  \\right]$$  \n  -->\n\n- **P350, 模拟试题1，第四大题第4小题答案：**\n由相似三角形关系可得$$ \\frac{x^{'}} {x} =  \\frac{d} {d-z} $$于是\n$$x^{'} =  \\frac{xd} {d-z}=  \\frac{x} {1-\\frac{z}{d}}$$\n同理有：$$y^{'} =  \\frac{y} {1-\\frac{z}{d}}$$\n另外，$z^{'}=0$.\n于是有：\n$$ P^{'}  = \\left[ \\begin{matrix}\n    x^{'} \\\\\n    y^{'} \\\\\n    z^{'} \\\\\n    1\n  \\end{matrix}\n  \\right] =\\left[ \\begin{matrix}\n    \\frac{x} {1-\\frac{z}{d}} \\\\\n    \\frac{y} {1-\\frac{z}{d}} \\\\\n    0 \\\\\n    1\n  \\end{matrix}\n  \\right] \n  \\equiv \\left[ \\begin{matrix}\n   x \\\\\n   y \\\\\n   0 \\\\\n   1-\\frac{z}{d}\n  \\end{matrix}\n  \\right] = \n  \\left[ \\begin{matrix}\n   1 & 0 & 0 & 0 \\\\\n   0 & 1 & 0 & 0 \\\\\n   0 & 0 & 0 & 0 \\\\\n  0 & 0 & -\\frac{1}{d} & 1 \\\\\n  \\end{matrix}\n  \\right] \n  \\left[ \\begin{matrix}\n   x \\\\\n   y \\\\\n   z \\\\\n   1\n  \\end{matrix}\n  \\right] ＝ TP $$\n  上式中$T$即为透视变换矩阵，其中$ \\equiv$表示齐次坐标转化。\n  顶点坐标计算：以G点为例，G点齐次坐标为(1,1,-1,1)，则由透视变换可知：\n  $$ G^{'}  = TG =T \\left[ \\begin{matrix}\n    1 \\\\\n    1 \\\\\n    -1 \\\\\n    1\n  \\end{matrix}\n  \\right] =\n  \\left[ \\begin{matrix}\n   1 & 0 & 0 & 0 \\\\\n   0 & 1 & 0 & 0 \\\\\n   0 & 0 & 0 & 0 \\\\\n  0 & 0 & -\\frac{1}{d} & 1 \\\\\n  \\end{matrix}\n  \\right] \n  \\left[ \\begin{matrix}\n   1 \\\\\n    1 \\\\\n    -1 \\\\\n    1\n  \\end{matrix}\n  \\right] ＝ \\left[ \\begin{matrix}\n   1 \\\\\n    1 \\\\\n    0 \\\\\n    1+\\frac{1}{d}\n  \\end{matrix}\n  \\right]\n  \\equiv \\left[ \\begin{matrix}\n   \\frac{d}{d+1} \\\\\n    \\frac{d}{d+1} \\\\\n    0 \\\\\n    1\n  \\end{matrix}\n  \\right]  $$\n故透视变换后G点变为$G^{'}=( \\frac{d}{d+1},  \\frac{d}{d+1}, 0)$.\n\n- **P351, 模拟试题2，第五大题第2小题答案：**\n$$ cosi=\\vec{L} \\cdot \\vec{N}=0.5, \\vec{R} = 2cosi\\vec{N}-\\vec{L}=(-1/2,1/2,-\\sqrt{2}/2).$$\n$$cos\\theta= \\vec{R} \\cdot \\vec{V} = -\\sqrt{2}/2<0, \\vec{R}与\\vec{V}夹角大于90度，因此\\vec{V}方向上无镜面反射光，所以 cos\\theta取0. $$\n$$\\therefore I=I_{pa}k_a+I_p(k_dcosi+k_scos^n\\theta)=160*0.5+175(0.2*0.5+0)=97.5$$\n\n\n- **P353, 模拟试题3，第五大题第1小题答案：**\n$a=y_0-y_1=-4, b=x_1-x_0=8, d_0=a+0.5b=0; a+b=4, a=-4$，当$d_i<0$时，中点M在直线下方，下一点取当前点P的右上方点，记为NE，同时$d_{i+1}=d_i+a+b$；当$d_i\\geq0$时，中点M在直线上方，下一点取当前点P的右侧点，记为E，同时$d_{i+1}=d_i+a$。根据中点线算法原理可得下表：\n\n| x|y|$d_i$|Next Point |\n|--------|------|-------------|-------|\n| 2     | 1   |0  | E  |\n| 3     | 1   |0-4=-4  | NE  |\n| 4     | 2   |-4+4=0  | E  |\n| 5     | 2   |0-4=-4  | NE  |\n| 6     | 3   |-4+4=0  | E  |\n| 7     | 3   |0-4=-4  | NE  |\n| 8     | 4   |-4+4=0  | E  |\n| 9     | 4   |0-4=-4  | NE  |\n| 10     | 5   |  |   |\n\n<!--- 中点线有关原理\n令直线方程为$F(x,y)=ax+by+c=0$，设当前点为$P(x_p, y_p)$，则可根据中点构造判别式\n$$d=F(M)=F(x_p+1, y_p+0.5)=a(x_p+1)+b(y_p+0.5)+c$$\n-->","slug":"CGBook_Error","published":1,"date":"2020-01-19T08:28:10.754Z","updated":"2019-08-18T02:04:22.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers05g000kr0akqe0mhppo","content":"<table>\n<thead>\n<tr>\n<th>页码</th>\n<th>行或位置</th>\n<th>原内容</th>\n<th>更正为</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>38</td>\n<td>9</td>\n<td>(1MB)</td>\n<td>(128KB)</td>\n</tr>\n<tr>\n<td>41</td>\n<td>16</td>\n<td>$$k=\\Delta x/\\Delta y$$</td>\n<td>$$k=\\Delta y/\\Delta x$$</td>\n</tr>\n<tr>\n<td>43</td>\n<td>9</td>\n<td>$$d \\leq 0$$</td>\n<td>$$d \\geq 0$$</td>\n</tr>\n<tr>\n<td>46</td>\n<td>6</td>\n<td>$$ s-t = s \\frac{\\Delta x}{\\Delta y}(x_i+1)+2b+2y_i-1$$</td>\n<td>$$ s-t = s \\frac{\\Delta x}{\\Delta y}(x_i+1)+2b -2y_i-1$$</td>\n</tr>\n<tr>\n<td>46</td>\n<td>倒数第4行</td>\n<td>$$-1\\leq1\\leq0$$</td>\n<td>$$0\\leq k\\leq 1$$</td>\n</tr>\n<tr>\n<td>47</td>\n<td>26</td>\n<td>int curx = x1;</td>\n<td>int curx = x1 + 1;</td>\n</tr>\n<tr>\n<td>48</td>\n<td>12</td>\n<td>$$b=x_0-x_1$$</td>\n<td>$$b=x_1-x_0$$</td>\n</tr>\n<tr>\n<td>51</td>\n<td>19</td>\n<td>令$T$点的坐标为$（x_i, y_i)$</td>\n<td>令$P$点的坐标为$（x_i, y_i)$</td>\n</tr>\n<tr>\n<td>52</td>\n<td>倒数第3行</td>\n<td>Cirpot(x0, y0, x, y)</td>\n<td>Cirpot(x0, y0, x, y, color)</td>\n</tr>\n<tr>\n<td>53</td>\n<td>9</td>\n<td>Cirpot(x0, y0, x, y)</td>\n<td>Cirpot(x0, y0, x, y, color)</td>\n</tr>\n<tr>\n<td>57</td>\n<td>7</td>\n<td>FloodFill</td>\n<td>FloodFill4</td>\n</tr>\n<tr>\n<td>57</td>\n<td>13-16</td>\n<td>FloodFill4(…, newcolor)</td>\n<td>FloodFill4(…, newcolor, boundaryColor)</td>\n</tr>\n<tr>\n<td>58-59</td>\n<td>58页倒数第2行~59页第11行</td>\n<td>见教材</td>\n<td>从点P向任意方向发出一条射线，若该射线与多边形交点的个数为奇数，则P位于多边形内；若为偶数，则P位于多边形外部。当射线与多边形边界点的交点是多边形顶点时（该交点称为奇点，如图3-13的$P_3$，$P_4$，$P_5$和$P_6$情况），如果把每一个奇点简单地计为一个交点，则交点个数为偶数时P点可能在内部，如图3-13中的$P_4$情况。但若将每一个奇点都简单地计为两个交点，同样会导致错误的结果，如图3-13中的$P_3$和$P_5$情况。因此，必须按不同情况区别对待。一般来说，多边形的顶点可分为两类：极值点和非极值点。如果顶点相邻的两边在射线的同侧时，则称该顶点为极值点（如图3-13中的$Q_0$和$Q_1$）；否则称该顶点为非极值点（如图3-13中的$Q_2$）。为了保证射线法判别结果的正确性，奇点交点的计数可以根据上述分类来采用不同的方式。当奇点是多边形的极值点时，交点按照两个交点计算，否则，按一个交点计算，如图3.13所示。</td>\n</tr>\n<tr>\n<td>59</td>\n<td>图3-13</td>\n<td>见教材</td>\n<td><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE3-13.png\" alt=\"图片描述\"></td>\n</tr>\n<tr>\n<td>60</td>\n<td>图3.16</td>\n<td><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE3-16-Error.png\" alt=\"这里写图片描述\"></td>\n<td><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE3-16Right.png\" alt=\"这里写图片描述\"></td>\n</tr>\n<tr>\n<td>65</td>\n<td>倒数第4行</td>\n<td>图3.22</td>\n<td>图3.23</td>\n</tr>\n<tr>\n<td>65</td>\n<td>倒数第3行</td>\n<td>$y_i+m/2$</td>\n<td>$y_i-int(y_i)+m/2$</td>\n</tr>\n<tr>\n<td>73</td>\n<td>6</td>\n<td>$$ y’=rsin(\\phi+\\theta)=rcos \\phi sin \\theta - rsin \\phi cos \\theta $$</td>\n<td>$$ y’=rsin(\\phi+\\theta)=rcos \\phi sin \\theta + rsin \\phi cos \\theta $$</td>\n</tr>\n<tr>\n<td>75</td>\n<td>8</td>\n<td>相对于y轴的反射</td>\n<td>相对于x轴的反射</td>\n</tr>\n<tr>\n<td>82/87</td>\n<td>式(4.40/57)</td>\n<td>$$\\begin{bmatrix} cos\\theta &amp; \\mathbf{-sin\\theta} &amp; 0  \\ \\mathbf{sin\\theta} &amp; cos\\theta &amp; 0  \\ 0 &amp; 0 &amp; 1 \\  \\end{bmatrix} $$</td>\n<td>$$\\begin{bmatrix} cos\\theta &amp; \\mathbf{sin\\theta} &amp; 0  \\ \\mathbf{-sin\\theta} &amp; cos\\theta &amp; 0  \\ 0 &amp; 0 &amp; 1 \\  \\end{bmatrix} $$</td>\n</tr>\n<tr>\n<td>117</td>\n<td>2</td>\n<td>$$T=R(\\theta)T(-x_0, -y_0) =\\begin{bmatrix} cos\\theta &amp; \\mathbf{sin\\theta} &amp; 0  \\ \\mathbf{-sin\\theta} &amp; cos\\theta &amp; 0  \\ 0 &amp; 0 &amp; 1 \\  \\end{bmatrix}  \\begin{bmatrix} 1 &amp; 0 &amp; -x_0  \\0 &amp; 1 &amp; -y_0  \\0 &amp; 0 &amp; 1  \\end{bmatrix}$$</td>\n<td>$$T=R(\\theta)T(-x_0, -y_0) = \\begin{bmatrix}    cos\\theta &amp; -sin\\theta &amp; 0  \\sin\\theta &amp; cos\\theta &amp; 0  \\    0 &amp; 0 &amp; 1  \\end{bmatrix}      \\begin{bmatrix} 1 &amp; 0 &amp; -x_0  \\0 &amp; 1 &amp; -y_0  \\0 &amp; 0 &amp; 1  \\end{bmatrix} $$</td>\n</tr>\n<tr>\n<td>122</td>\n<td>15</td>\n<td>$$t_1^{‘’}=(x_R-x_1)/dx$$</td>\n<td>$$t_1^{‘’}=(y_B-y_1)/dy$$</td>\n</tr>\n<tr>\n<td>130</td>\n<td>24</td>\n<td>glLoadIdentity()</td>\n<td>应移至void display(void)中的第1个glColor3f(0.0,0.0,1.0)后</td>\n<td>参考<a href=\"http://blog.csdn.net/wpxu08/article/details/77608983\" target=\"_blank\" rel=\"noopener\">5.5 Opengl编程实例－红蓝三角形 </a></td>\n</tr>\n<tr>\n<td>131</td>\n<td>1</td>\n<td><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE5-17-Error.png\" alt=\"这里写图片描述\"></td>\n<td><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE5-17.png\" alt=\"这里写图片描述\"></td>\n</tr>\n<tr>\n<td>131</td>\n<td>图5.17后</td>\n<td>无</td>\n<td>增加思考内容：“思考：教材中原代码中根据所给三角形顶点坐标，三角形应为一个正角形，为何显示时不是正角形呢？同时，在旋转后的三角形也发生了变形，请分析原因，并给出修改建议。提示：请从”glViewport()”函数入手。”</td>\n</tr>\n<tr>\n<td>135</td>\n<td>(6.2)</td>\n<td>$$u=\\frac{V \\times n}{\\mid N \\mid} = (u_x, u_y, u_z)$$</td>\n<td>$$u=\\frac{V \\times n}{\\mid V \\times n \\mid} = (u_x, u_y, u_z)$$</td>\n</tr>\n<tr>\n<td>151</td>\n<td>(6.29)</td>\n<td>$$  \\begin{bmatrix}x_p  \\ y_p  \\    0  \\    1    \\end{bmatrix} =\\begin{bmatrix}1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 0 &amp; 1\\end{bmatrix}    \\begin{bmatrix}    1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 1 &amp; 0 \\    0 &amp; 0 &amp; \\frac{1}{d} &amp; \\mathbf{ 1}  \\end{bmatrix} \\begin{bmatrix}    x_s  \\ y_s  \\    z_s  \\    1    \\end{bmatrix} =  \\begin{bmatrix}    x_s  \\ y_s  \\    0  \\    \\mathbf{1+ \\frac{z_s}{d}}     \\end{bmatrix}$$</td>\n<td>$$  \\begin{bmatrix}    x_p  \\ y_p  \\    0  \\    1    \\end{bmatrix} =\\begin{bmatrix}1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\\end{bmatrix} \\begin{bmatrix}    1 &amp; 0 &amp; 0  &amp; 0\\ 0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 1 &amp; 0 \\    0 &amp; 0 &amp; \\frac{1}{d} &amp; \\mathbf{0}\\end{bmatrix} \\begin{bmatrix} x_s  \\ y_s  \\    z_s  \\    1    \\end{bmatrix}     =  \\begin{bmatrix}    x_s  \\ y_s  \\    0  \\    \\mathbf{ \\frac{z_s}{d} }    \\end{bmatrix}$$</td>\n</tr>\n<tr>\n<td>151</td>\n<td>(6.31)</td>\n<td>$$ \\begin{bmatrix}1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 1 &amp; 0 \\    0 &amp; 0 &amp; r &amp; \\mathbf{1}\\end{bmatrix} $$</td>\n<td>$$ \\begin{bmatrix}    1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 1 &amp; 0 \\    0 &amp; 0 &amp; r &amp; \\mathbf{0}\\end{bmatrix} $$</td>\n</tr>\n<tr>\n<td>151</td>\n<td>(6.33)</td>\n<td>$$ \\begin{bmatrix}1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; 1 &amp; 0 \\    p &amp; 0 &amp; 0 &amp; \\mathbf{1}\\end{bmatrix} $$</td>\n<td>$$ \\begin{bmatrix}1 &amp; 0 &amp; 0  &amp; 0 \\ 0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 1 &amp; 0 \\    p &amp; 0 &amp; 0 &amp; \\mathbf{0 }\\end{bmatrix} $$</td>\n</tr>\n<tr>\n<td>151</td>\n<td>(6.34)</td>\n<td>$$ \\begin{bmatrix}    1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 1 &amp; 0 \\    0 &amp; q &amp; 0 &amp; \\mathbf{1}\\end{bmatrix} $$</td>\n<td>$$ \\begin{bmatrix}    1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 1 &amp; 0 \\    0 &amp; q &amp; 0 &amp; \\mathbf{0}\\end{bmatrix} $$</td>\n</tr>\n<tr>\n<td>152</td>\n<td>(6.35)</td>\n<td><img src=\"http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213639458-812719339.png\" alt=\"这里写图片描述\"></td>\n<td><img src=\"http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213640942-1081172362.png\" alt=\"这里写图片描述\"></td>\n</tr>\n<tr>\n<td>152</td>\n<td>(6.35)</td>\n<td><img src=\"http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213718536-1468325746.png\" alt=\"这里写图片描述\"></td>\n<td><img src=\"http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213722567-1226100288.png\" alt=\"这里写图片描述\"></td>\n</tr>\n<tr>\n<td>152</td>\n<td>12</td>\n<td>线性关系</td>\n<td>非线性关系</td>\n<td></td>\n</tr>\n<tr>\n<td>152</td>\n<td>(6.37)</td>\n<td>$$ a=\\frac{-(z_{far}+z_{near})z_{near}}{z_{far}-z_{near}}$$</td>\n<td>$$ a=\\frac{z_{far}+z_{near}}{z_{near}(z_{far}-z_{near})}$$</td>\n<td></td>\n</tr>\n<tr>\n<td>224</td>\n<td>2</td>\n<td>对于<strong>右手</strong>坐标系</td>\n<td>对于<strong>OpenGL所采用的左手</strong>坐标系</td>\n<td>烟台大学韩明峰指正</td>\n</tr>\n<tr>\n<td></td>\n<td>图8.17</td>\n<td><img src=\"https://img-blog.csdn.net/20180914224000616?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"></td>\n<td><img src=\"https://img-blog.csdn.net/2018091422402764?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>8</td>\n<td>深度缓冲器所有单元均置为最<strong>小</strong> z值</td>\n<td>深度缓冲器所有单元均置为最<strong>大</strong> z值</td>\n<td>为保持与图8.17一致而修改，原内容也没错，下同</td>\n</tr>\n<tr>\n<td></td>\n<td>11</td>\n<td>若z <strong>&gt;</strong> ZB(x, y)，则ZB(x, y)=z</td>\n<td>若z <strong>&lt;</strong> ZB(x, y)，则ZB(x, y)=z</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>20</td>\n<td>ZB(x,y)单元置为最<strong>小</strong>值</td>\n<td>ZB(x,y)单元置为最<strong>大</strong>值</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>26</td>\n<td>if(z(x,y) <strong>&gt;</strong> ZB(x,y))</td>\n<td>if(z(x,y) <strong>&lt;</strong> ZB(x,y))</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"附录B-模拟试题及答案\"><a href=\"#附录B-模拟试题及答案\" class=\"headerlink\" title=\"附录B 模拟试题及答案\"></a>附录B 模拟试题及答案</h3><table>\n<thead>\n<tr>\n<th>页码</th>\n<th>位置</th>\n<th>原内容</th>\n<th>更正</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>337</td>\n<td>图B.1</td>\n<td><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BEB-1-Wrong.png\" alt=\"这里写图片描述\"></td>\n<td><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BEB-1-Right.png\" alt=\"这里写图片描述\"></td>\n<td></td>\n</tr>\n<tr>\n<td>340</td>\n<td>模2试题，一.单选题，第6题</td>\n<td>$$T= \\left[ \\begin{matrix}   2 &amp; 0 &amp; 0 \\   0 &amp; 1 &amp; 0 \\   1 &amp; 1 &amp; 1  \\end{matrix}  \\right]  $$</td>\n<td>$$P^{‘}= PT =\\left[ \\begin{matrix}   x &amp; y &amp; 1  \\end{matrix}  \\right] \\left[ \\begin{matrix}   2 &amp; 0 &amp; 0 \\   0 &amp; 1 &amp; 0 \\   1 &amp; 1 &amp; 1  \\end{matrix}  \\right]   $$</td>\n<td></td>\n</tr>\n<tr>\n<td>345</td>\n<td>模3试题，一.单选题，第1题B选项</td>\n<td>高光域准确</td>\n<td>可以产生高光</td>\n<td>此题正确答案为B，见后</td>\n</tr>\n<tr>\n<td>347</td>\n<td>四.填空题，第3题</td>\n<td>点坐标采用<strong>行</strong>向量形式</td>\n<td>点坐标采用<strong>列</strong>向量形式</td>\n<td></td>\n</tr>\n<tr>\n<td>349</td>\n<td>模1答案，二.多选题，第1题答案</td>\n<td>ABC</td>\n<td>ABCD</td>\n<td>错切变换是沿坐标轴错切，参考对象仍为坐标原点</td>\n</tr>\n<tr>\n<td>350</td>\n<td>模2答案，一.单选题，第1题答案</td>\n<td>B</td>\n<td>C</td>\n<td></td>\n</tr>\n<tr>\n<td>350</td>\n<td>一.单选题，第3题答案</td>\n<td>B</td>\n<td>C</td>\n<td></td>\n</tr>\n<tr>\n<td>350</td>\n<td>一.单选题，第4题答案</td>\n<td>C</td>\n<td>D</td>\n<td></td>\n</tr>\n<tr>\n<td>350</td>\n<td>二.多选题，第10题答案</td>\n<td>ACD</td>\n<td>ABCD</td>\n<td></td>\n</tr>\n<tr>\n<td>350</td>\n<td>二.多选题，第11题答案</td>\n<td>CD</td>\n<td>BCD</td>\n<td></td>\n</tr>\n<tr>\n<td>352</td>\n<td>模3答案，一.单选题，第1题答案</td>\n<td>D</td>\n<td>B</td>\n<td></td>\n</tr>\n<tr>\n<td>352</td>\n<td>二.多选题，第1题答案</td>\n<td>BCE</td>\n<td>AD</td>\n<td></td>\n</tr>\n<tr>\n<td>352</td>\n<td>二.多选题，第2题答案</td>\n<td>BD</td>\n<td>B</td>\n<td></td>\n</tr>\n<tr>\n<td>352</td>\n<td>二.多选题，第6题答案</td>\n<td>BD</td>\n<td>BCD</td>\n<td></td>\n</tr>\n<tr>\n<td>354</td>\n<td>第1行</td>\n<td>$$\\begin{bmatrix}    0 &amp; 0 &amp; 0 &amp; 1  \\    1/27 &amp; 1/9 &amp; 1/3 &amp; 0  \\  8/27 &amp; 4/9 &amp; 1/3 &amp; 0  \\    1 &amp; 1 &amp; 1 &amp; 1 \\end{bmatrix}$$</td>\n<td>$$\\begin{bmatrix}    0 &amp; 0 &amp; 0 &amp; 1  \\    1/27 &amp; 1/9 &amp; 1/3 &amp; 1  \\  8/27 &amp; 4/9 &amp; 2/3 &amp; 1  \\    1 &amp; 1 &amp; 1 &amp; 1 \\end{bmatrix}$$</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>P349, 模拟试题1，第四大题第3小题答案：</strong><br>$$T_1= \\left[ \\begin{matrix}<br> 1 &amp; 0 &amp; 0 \\<br> 0 &amp; 1 &amp; 0 \\<br> -2 &amp; -4 &amp; 1<br>\\end{matrix}<br>\\right]  $$</li>\n</ul>\n<p>$$T_2= \\left[ \\begin{matrix}<br>   cos600^\\circ &amp; sin600^\\circ &amp; 0 \\<br>   -sin600^\\circ &amp; cos600^\\circ &amp; 0 \\<br>   0 &amp; 0 &amp; 1<br>  \\end{matrix}<br>  \\right]  =\\left[ \\begin{matrix}<br>   -1/2 &amp; -\\sqrt{3}/2 &amp; 0 \\<br>   \\sqrt{3}/2 &amp; -1/2 &amp; 0 \\<br>   0 &amp; 0 &amp; 1<br>  \\end{matrix}<br>  \\right]$$</p>\n<p>$$T_3= \\left[ \\begin{matrix}<br>   1 &amp; 0 &amp; 0 \\<br>   0 &amp; 1 &amp; 0 \\<br>   2 &amp; 4 &amp; 1<br>  \\end{matrix}<br>  \\right]  $$</p>\n<p>$$T= T_1T_2T_3= \\left[ \\begin{matrix}<br>   -1/2 &amp; -\\sqrt{3}/2 &amp;  0\\<br>   \\sqrt{3}/2 &amp; -1/2 &amp; 0 \\<br>   3-2 \\sqrt{3} &amp; 6+ \\sqrt{3} &amp; 1<br>  \\end{matrix}<br>  \\right]  $$<br>由 $ P^{‘}= PT$  可得：$$ \\left[ \\begin{matrix}<br>    A^{‘} \\<br>    B^{‘} \\<br>    C^{‘}<br>  \\end{matrix}<br>  \\right] =\\left[ \\begin{matrix}<br>    A \\<br>    B \\<br>    C<br>  \\end{matrix}<br>  \\right] T<br>  = \\left[ \\begin{matrix}<br>   2 &amp; 4 &amp; 1 \\<br>   4 &amp; 4 &amp; 1 \\<br>   4 &amp; 1 &amp; 1<br>  \\end{matrix}<br>  \\right] T=<br>  \\left[ \\begin{matrix}<br>   2 &amp; 4 &amp; 1 \\<br>   1 &amp; 4-\\sqrt{3} &amp; 1 \\<br>   1-3\\sqrt{3}/2 &amp; 11/2-\\sqrt{3} &amp; 1<br>  \\end{matrix}<br>  \\right]$$ </p>\n<!---列向量模式\n      1.变换过程：\n(1) 平移三角形，使其角点A与原点重合。其中，平移变换对应的矩阵为\n$$T_1= \\left[ \\begin{matrix}\n   1 & 0 & -2 \\\\\n   0 & 1 & -4 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n  (2) 对平移后三角形进行旋转变换，使其绕角点A（即原点）逆时针旋转600度。相应的旋转变换矩阵为\n$$T_2= \\left[ \\begin{matrix}\n   cos600^\\circ & -sin600^\\circ & 0 \\\\\n   sin600^\\circ & cos600^\\circ & 0 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n  (3) 平移三角形，使其角点A回到原有位置即点（2,4）。其中，平移变换对应的矩阵为\n$$T_3= \\left[ \\begin{matrix}\n   1 & 0 & 2 \\\\\n   0 & 1 & 4 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n综合（1）、（2）、（3）可得最终的变换矩阵为：\n$$T= T_3T_2T_1= \\left[ \\begin{matrix}\n   -1/2 & \\sqrt{3}/2 &  3-2 \\sqrt{3}\\\\\n   - \\sqrt{3}/2 & -1/2 & 6+ \\sqrt{3} \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n  2. 由变换计算式$ P^{'}＝TP$，可计算变换后的三角形顶点坐标分别为：\n  $$ A^{'}＝TA=T \\left[ \\begin{matrix}\n    2 \\\\\n    4 \\\\\n    1\n  \\end{matrix}\n  \\right]=\\left[ \\begin{matrix}\n    2 \\\\\n    4 \\\\\n    1\n  \\end{matrix}\n  \\right]$$\n $$ B^{'}＝TB=T \\left[ \\begin{matrix}\n    4 \\\\\n    4 \\\\\n    1\n  \\end{matrix}\n  \\right]=\\left[ \\begin{matrix}\n    1 \\\\\n    4-\\sqrt{3} \\\\\n    1\n  \\end{matrix}\n  \\right]$$\n   $$ C^{'}＝TC=T \\left[ \\begin{matrix}\n    4 \\\\\n    1 \\\\\n    1\n  \\end{matrix}\n  \\right]=\\left[ \\begin{matrix}\n    1-3\\sqrt{3}/2  \\\\\n    11/2-\\sqrt{3}  \\\\\n    1\n  \\end{matrix}\n  \\right]$$  \n  -->\n<ul>\n<li><p><strong>P350, 模拟试题1，第四大题第4小题答案：</strong><br>由相似三角形关系可得$$ \\frac{x^{‘}} {x} =  \\frac{d} {d-z} $$于是<br>$$x^{‘} =  \\frac{xd} {d-z}=  \\frac{x} {1-\\frac{z}{d}}$$<br>同理有：$$y^{‘} =  \\frac{y} {1-\\frac{z}{d}}$$<br>另外，$z^{‘}=0$.<br>于是有：<br>$$ P^{‘}  = \\left[ \\begin{matrix}<br>  x^{‘} \\<br>  y^{‘} \\<br>  z^{‘} \\<br>  1<br>\\end{matrix}<br>\\right] =\\left[ \\begin{matrix}<br>  \\frac{x} {1-\\frac{z}{d}} \\<br>  \\frac{y} {1-\\frac{z}{d}} \\<br>  0 \\<br>  1<br>\\end{matrix}<br>\\right]<br>\\equiv \\left[ \\begin{matrix}<br> x \\<br> y \\<br> 0 \\<br> 1-\\frac{z}{d}<br>\\end{matrix}<br>\\right] =<br>\\left[ \\begin{matrix}<br> 1 &amp; 0 &amp; 0 &amp; 0 \\<br> 0 &amp; 1 &amp; 0 &amp; 0 \\<br> 0 &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; -\\frac{1}{d} &amp; 1 \\<br>\\end{matrix}<br>\\right]<br>\\left[ \\begin{matrix}<br> x \\<br> y \\<br> z \\<br> 1<br>\\end{matrix}<br>\\right] ＝ TP $$<br>上式中$T$即为透视变换矩阵，其中$ \\equiv$表示齐次坐标转化。<br>顶点坐标计算：以G点为例，G点齐次坐标为(1,1,-1,1)，则由透视变换可知：<br>$$ G^{‘}  = TG =T \\left[ \\begin{matrix}<br>  1 \\<br>  1 \\<br>  -1 \\<br>  1<br>\\end{matrix}<br>\\right] =<br>\\left[ \\begin{matrix}<br> 1 &amp; 0 &amp; 0 &amp; 0 \\<br> 0 &amp; 1 &amp; 0 &amp; 0 \\<br> 0 &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; -\\frac{1}{d} &amp; 1 \\<br>\\end{matrix}<br>\\right]<br>\\left[ \\begin{matrix}<br> 1 \\<br>  1 \\<br>  -1 \\<br>  1<br>\\end{matrix}<br>\\right] ＝ \\left[ \\begin{matrix}<br> 1 \\<br>  1 \\<br>  0 \\<br>  1+\\frac{1}{d}<br>\\end{matrix}<br>\\right]<br>\\equiv \\left[ \\begin{matrix}<br> \\frac{d}{d+1} \\<br>  \\frac{d}{d+1} \\<br>  0 \\<br>  1<br>\\end{matrix}<br>\\right]  $$<br>故透视变换后G点变为$G^{‘}=( \\frac{d}{d+1},  \\frac{d}{d+1}, 0)$.</p>\n</li>\n<li><p><strong>P351, 模拟试题2，第五大题第2小题答案：</strong><br>$$ cosi=\\vec{L} \\cdot \\vec{N}=0.5, \\vec{R} = 2cosi\\vec{N}-\\vec{L}=(-1/2,1/2,-\\sqrt{2}/2).$$<br>$$cos\\theta= \\vec{R} \\cdot \\vec{V} = -\\sqrt{2}/2&lt;0, \\vec{R}与\\vec{V}夹角大于90度，因此\\vec{V}方向上无镜面反射光，所以 cos\\theta取0. $$<br>$$\\therefore I=I_{pa}k_a+I_p(k_dcosi+k_scos^n\\theta)=160<em>0.5+175(0.2</em>0.5+0)=97.5$$</p>\n</li>\n</ul>\n<ul>\n<li><strong>P353, 模拟试题3，第五大题第1小题答案：</strong><br>$a=y_0-y_1=-4, b=x_1-x_0=8, d_0=a+0.5b=0; a+b=4, a=-4$，当$d_i&lt;0$时，中点M在直线下方，下一点取当前点P的右上方点，记为NE，同时$d_{i+1}=d_i+a+b$；当$d_i\\geq0$时，中点M在直线上方，下一点取当前点P的右侧点，记为E，同时$d_{i+1}=d_i+a$。根据中点线算法原理可得下表：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>$d_i$</th>\n<th>Next Point</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n<td>E</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>0-4=-4</td>\n<td>NE</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>-4+4=0</td>\n<td>E</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2</td>\n<td>0-4=-4</td>\n<td>NE</td>\n</tr>\n<tr>\n<td>6</td>\n<td>3</td>\n<td>-4+4=0</td>\n<td>E</td>\n</tr>\n<tr>\n<td>7</td>\n<td>3</td>\n<td>0-4=-4</td>\n<td>NE</td>\n</tr>\n<tr>\n<td>8</td>\n<td>4</td>\n<td>-4+4=0</td>\n<td>E</td>\n</tr>\n<tr>\n<td>9</td>\n<td>4</td>\n<td>0-4=-4</td>\n<td>NE</td>\n</tr>\n<tr>\n<td>10</td>\n<td>5</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!--- 中点线有关原理\n令直线方程为$F(x,y)=ax+by+c=0$，设当前点为$P(x_p, y_p)$，则可根据中点构造判别式\n$$d=F(M)=F(x_p+1, y_p+0.5)=a(x_p+1)+b(y_p+0.5)+c$$\n-->","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>页码</th>\n<th>行或位置</th>\n<th>原内容</th>\n<th>更正为</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>38</td>\n<td>9</td>\n<td>(1MB)</td>\n<td>(128KB)</td>\n</tr>\n<tr>\n<td>41</td>\n<td>16</td>\n<td>$$k=\\Delta x/\\Delta y$$</td>\n<td>$$k=\\Delta y/\\Delta x$$</td>\n</tr>\n<tr>\n<td>43</td>\n<td>9</td>\n<td>$$d \\leq 0$$</td>\n<td>$$d \\geq 0$$</td>\n</tr>\n<tr>\n<td>46</td>\n<td>6</td>\n<td>$$ s-t = s \\frac{\\Delta x}{\\Delta y}(x_i+1)+2b+2y_i-1$$</td>\n<td>$$ s-t = s \\frac{\\Delta x}{\\Delta y}(x_i+1)+2b -2y_i-1$$</td>\n</tr>\n<tr>\n<td>46</td>\n<td>倒数第4行</td>\n<td>$$-1\\leq1\\leq0$$</td>\n<td>$$0\\leq k\\leq 1$$</td>\n</tr>\n<tr>\n<td>47</td>\n<td>26</td>\n<td>int curx = x1;</td>\n<td>int curx = x1 + 1;</td>\n</tr>\n<tr>\n<td>48</td>\n<td>12</td>\n<td>$$b=x_0-x_1$$</td>\n<td>$$b=x_1-x_0$$</td>\n</tr>\n<tr>\n<td>51</td>\n<td>19</td>\n<td>令$T$点的坐标为$（x_i, y_i)$</td>\n<td>令$P$点的坐标为$（x_i, y_i)$</td>\n</tr>\n<tr>\n<td>52</td>\n<td>倒数第3行</td>\n<td>Cirpot(x0, y0, x, y)</td>\n<td>Cirpot(x0, y0, x, y, color)</td>\n</tr>\n<tr>\n<td>53</td>\n<td>9</td>\n<td>Cirpot(x0, y0, x, y)</td>\n<td>Cirpot(x0, y0, x, y, color)</td>\n</tr>\n<tr>\n<td>57</td>\n<td>7</td>\n<td>FloodFill</td>\n<td>FloodFill4</td>\n</tr>\n<tr>\n<td>57</td>\n<td>13-16</td>\n<td>FloodFill4(…, newcolor)</td>\n<td>FloodFill4(…, newcolor, boundaryColor)</td>\n</tr>\n<tr>\n<td>58-59</td>\n<td>58页倒数第2行~59页第11行</td>\n<td>见教材</td>\n<td>从点P向任意方向发出一条射线，若该射线与多边形交点的个数为奇数，则P位于多边形内；若为偶数，则P位于多边形外部。当射线与多边形边界点的交点是多边形顶点时（该交点称为奇点，如图3-13的$P_3$，$P_4$，$P_5$和$P_6$情况），如果把每一个奇点简单地计为一个交点，则交点个数为偶数时P点可能在内部，如图3-13中的$P_4$情况。但若将每一个奇点都简单地计为两个交点，同样会导致错误的结果，如图3-13中的$P_3$和$P_5$情况。因此，必须按不同情况区别对待。一般来说，多边形的顶点可分为两类：极值点和非极值点。如果顶点相邻的两边在射线的同侧时，则称该顶点为极值点（如图3-13中的$Q_0$和$Q_1$）；否则称该顶点为非极值点（如图3-13中的$Q_2$）。为了保证射线法判别结果的正确性，奇点交点的计数可以根据上述分类来采用不同的方式。当奇点是多边形的极值点时，交点按照两个交点计算，否则，按一个交点计算，如图3.13所示。</td>\n</tr>\n<tr>\n<td>59</td>\n<td>图3-13</td>\n<td>见教材</td>\n<td><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE3-13.png\" alt=\"图片描述\"></td>\n</tr>\n<tr>\n<td>60</td>\n<td>图3.16</td>\n<td><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE3-16-Error.png\" alt=\"这里写图片描述\"></td>\n<td><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE3-16Right.png\" alt=\"这里写图片描述\"></td>\n</tr>\n<tr>\n<td>65</td>\n<td>倒数第4行</td>\n<td>图3.22</td>\n<td>图3.23</td>\n</tr>\n<tr>\n<td>65</td>\n<td>倒数第3行</td>\n<td>$y_i+m/2$</td>\n<td>$y_i-int(y_i)+m/2$</td>\n</tr>\n<tr>\n<td>73</td>\n<td>6</td>\n<td>$$ y’=rsin(\\phi+\\theta)=rcos \\phi sin \\theta - rsin \\phi cos \\theta $$</td>\n<td>$$ y’=rsin(\\phi+\\theta)=rcos \\phi sin \\theta + rsin \\phi cos \\theta $$</td>\n</tr>\n<tr>\n<td>75</td>\n<td>8</td>\n<td>相对于y轴的反射</td>\n<td>相对于x轴的反射</td>\n</tr>\n<tr>\n<td>82/87</td>\n<td>式(4.40/57)</td>\n<td>$$\\begin{bmatrix} cos\\theta &amp; \\mathbf{-sin\\theta} &amp; 0  \\ \\mathbf{sin\\theta} &amp; cos\\theta &amp; 0  \\ 0 &amp; 0 &amp; 1 \\  \\end{bmatrix} $$</td>\n<td>$$\\begin{bmatrix} cos\\theta &amp; \\mathbf{sin\\theta} &amp; 0  \\ \\mathbf{-sin\\theta} &amp; cos\\theta &amp; 0  \\ 0 &amp; 0 &amp; 1 \\  \\end{bmatrix} $$</td>\n</tr>\n<tr>\n<td>117</td>\n<td>2</td>\n<td>$$T=R(\\theta)T(-x_0, -y_0) =\\begin{bmatrix} cos\\theta &amp; \\mathbf{sin\\theta} &amp; 0  \\ \\mathbf{-sin\\theta} &amp; cos\\theta &amp; 0  \\ 0 &amp; 0 &amp; 1 \\  \\end{bmatrix}  \\begin{bmatrix} 1 &amp; 0 &amp; -x_0  \\0 &amp; 1 &amp; -y_0  \\0 &amp; 0 &amp; 1  \\end{bmatrix}$$</td>\n<td>$$T=R(\\theta)T(-x_0, -y_0) = \\begin{bmatrix}    cos\\theta &amp; -sin\\theta &amp; 0  \\sin\\theta &amp; cos\\theta &amp; 0  \\    0 &amp; 0 &amp; 1  \\end{bmatrix}      \\begin{bmatrix} 1 &amp; 0 &amp; -x_0  \\0 &amp; 1 &amp; -y_0  \\0 &amp; 0 &amp; 1  \\end{bmatrix} $$</td>\n</tr>\n<tr>\n<td>122</td>\n<td>15</td>\n<td>$$t_1^{‘’}=(x_R-x_1)/dx$$</td>\n<td>$$t_1^{‘’}=(y_B-y_1)/dy$$</td>\n</tr>\n<tr>\n<td>130</td>\n<td>24</td>\n<td>glLoadIdentity()</td>\n<td>应移至void display(void)中的第1个glColor3f(0.0,0.0,1.0)后</td>\n<td>参考<a href=\"http://blog.csdn.net/wpxu08/article/details/77608983\" target=\"_blank\" rel=\"noopener\">5.5 Opengl编程实例－红蓝三角形 </a></td>\n</tr>\n<tr>\n<td>131</td>\n<td>1</td>\n<td><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE5-17-Error.png\" alt=\"这里写图片描述\"></td>\n<td><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BE5-17.png\" alt=\"这里写图片描述\"></td>\n</tr>\n<tr>\n<td>131</td>\n<td>图5.17后</td>\n<td>无</td>\n<td>增加思考内容：“思考：教材中原代码中根据所给三角形顶点坐标，三角形应为一个正角形，为何显示时不是正角形呢？同时，在旋转后的三角形也发生了变形，请分析原因，并给出修改建议。提示：请从”glViewport()”函数入手。”</td>\n</tr>\n<tr>\n<td>135</td>\n<td>(6.2)</td>\n<td>$$u=\\frac{V \\times n}{\\mid N \\mid} = (u_x, u_y, u_z)$$</td>\n<td>$$u=\\frac{V \\times n}{\\mid V \\times n \\mid} = (u_x, u_y, u_z)$$</td>\n</tr>\n<tr>\n<td>151</td>\n<td>(6.29)</td>\n<td>$$  \\begin{bmatrix}x_p  \\ y_p  \\    0  \\    1    \\end{bmatrix} =\\begin{bmatrix}1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 0 &amp; 1\\end{bmatrix}    \\begin{bmatrix}    1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 1 &amp; 0 \\    0 &amp; 0 &amp; \\frac{1}{d} &amp; \\mathbf{ 1}  \\end{bmatrix} \\begin{bmatrix}    x_s  \\ y_s  \\    z_s  \\    1    \\end{bmatrix} =  \\begin{bmatrix}    x_s  \\ y_s  \\    0  \\    \\mathbf{1+ \\frac{z_s}{d}}     \\end{bmatrix}$$</td>\n<td>$$  \\begin{bmatrix}    x_p  \\ y_p  \\    0  \\    1    \\end{bmatrix} =\\begin{bmatrix}1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\\end{bmatrix} \\begin{bmatrix}    1 &amp; 0 &amp; 0  &amp; 0\\ 0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 1 &amp; 0 \\    0 &amp; 0 &amp; \\frac{1}{d} &amp; \\mathbf{0}\\end{bmatrix} \\begin{bmatrix} x_s  \\ y_s  \\    z_s  \\    1    \\end{bmatrix}     =  \\begin{bmatrix}    x_s  \\ y_s  \\    0  \\    \\mathbf{ \\frac{z_s}{d} }    \\end{bmatrix}$$</td>\n</tr>\n<tr>\n<td>151</td>\n<td>(6.31)</td>\n<td>$$ \\begin{bmatrix}1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 1 &amp; 0 \\    0 &amp; 0 &amp; r &amp; \\mathbf{1}\\end{bmatrix} $$</td>\n<td>$$ \\begin{bmatrix}    1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 1 &amp; 0 \\    0 &amp; 0 &amp; r &amp; \\mathbf{0}\\end{bmatrix} $$</td>\n</tr>\n<tr>\n<td>151</td>\n<td>(6.33)</td>\n<td>$$ \\begin{bmatrix}1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; 1 &amp; 0 \\    p &amp; 0 &amp; 0 &amp; \\mathbf{1}\\end{bmatrix} $$</td>\n<td>$$ \\begin{bmatrix}1 &amp; 0 &amp; 0  &amp; 0 \\ 0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 1 &amp; 0 \\    p &amp; 0 &amp; 0 &amp; \\mathbf{0 }\\end{bmatrix} $$</td>\n</tr>\n<tr>\n<td>151</td>\n<td>(6.34)</td>\n<td>$$ \\begin{bmatrix}    1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 1 &amp; 0 \\    0 &amp; q &amp; 0 &amp; \\mathbf{1}\\end{bmatrix} $$</td>\n<td>$$ \\begin{bmatrix}    1 &amp; 0 &amp; 0  &amp; 0\\    0 &amp; 1 &amp; 0 &amp; 0 \\    0 &amp; 0 &amp; 1 &amp; 0 \\    0 &amp; q &amp; 0 &amp; \\mathbf{0}\\end{bmatrix} $$</td>\n</tr>\n<tr>\n<td>152</td>\n<td>(6.35)</td>\n<td><img src=\"http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213639458-812719339.png\" alt=\"这里写图片描述\"></td>\n<td><img src=\"http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213640942-1081172362.png\" alt=\"这里写图片描述\"></td>\n</tr>\n<tr>\n<td>152</td>\n<td>(6.35)</td>\n<td><img src=\"http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213718536-1468325746.png\" alt=\"这里写图片描述\"></td>\n<td><img src=\"http://images2015.cnblogs.com/blog/26309/201701/26309-20170117213722567-1226100288.png\" alt=\"这里写图片描述\"></td>\n</tr>\n<tr>\n<td>152</td>\n<td>12</td>\n<td>线性关系</td>\n<td>非线性关系</td>\n<td></td>\n</tr>\n<tr>\n<td>152</td>\n<td>(6.37)</td>\n<td>$$ a=\\frac{-(z_{far}+z_{near})z_{near}}{z_{far}-z_{near}}$$</td>\n<td>$$ a=\\frac{z_{far}+z_{near}}{z_{near}(z_{far}-z_{near})}$$</td>\n<td></td>\n</tr>\n<tr>\n<td>224</td>\n<td>2</td>\n<td>对于<strong>右手</strong>坐标系</td>\n<td>对于<strong>OpenGL所采用的左手</strong>坐标系</td>\n<td>烟台大学韩明峰指正</td>\n</tr>\n<tr>\n<td></td>\n<td>图8.17</td>\n<td><img src=\"https://img-blog.csdn.net/20180914224000616?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"></td>\n<td><img src=\"https://img-blog.csdn.net/2018091422402764?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>8</td>\n<td>深度缓冲器所有单元均置为最<strong>小</strong> z值</td>\n<td>深度缓冲器所有单元均置为最<strong>大</strong> z值</td>\n<td>为保持与图8.17一致而修改，原内容也没错，下同</td>\n</tr>\n<tr>\n<td></td>\n<td>11</td>\n<td>若z <strong>&gt;</strong> ZB(x, y)，则ZB(x, y)=z</td>\n<td>若z <strong>&lt;</strong> ZB(x, y)，则ZB(x, y)=z</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>20</td>\n<td>ZB(x,y)单元置为最<strong>小</strong>值</td>\n<td>ZB(x,y)单元置为最<strong>大</strong>值</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>26</td>\n<td>if(z(x,y) <strong>&gt;</strong> ZB(x,y))</td>\n<td>if(z(x,y) <strong>&lt;</strong> ZB(x,y))</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"附录B-模拟试题及答案\"><a href=\"#附录B-模拟试题及答案\" class=\"headerlink\" title=\"附录B 模拟试题及答案\"></a>附录B 模拟试题及答案</h3><table>\n<thead>\n<tr>\n<th>页码</th>\n<th>位置</th>\n<th>原内容</th>\n<th>更正</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>337</td>\n<td>图B.1</td>\n<td><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BEB-1-Wrong.png\" alt=\"这里写图片描述\"></td>\n<td><img src=\"http://oty0nwcbq.bkt.clouddn.com/CG-%E5%9B%BEB-1-Right.png\" alt=\"这里写图片描述\"></td>\n<td></td>\n</tr>\n<tr>\n<td>340</td>\n<td>模2试题，一.单选题，第6题</td>\n<td>$$T= \\left[ \\begin{matrix}   2 &amp; 0 &amp; 0 \\   0 &amp; 1 &amp; 0 \\   1 &amp; 1 &amp; 1  \\end{matrix}  \\right]  $$</td>\n<td>$$P^{‘}= PT =\\left[ \\begin{matrix}   x &amp; y &amp; 1  \\end{matrix}  \\right] \\left[ \\begin{matrix}   2 &amp; 0 &amp; 0 \\   0 &amp; 1 &amp; 0 \\   1 &amp; 1 &amp; 1  \\end{matrix}  \\right]   $$</td>\n<td></td>\n</tr>\n<tr>\n<td>345</td>\n<td>模3试题，一.单选题，第1题B选项</td>\n<td>高光域准确</td>\n<td>可以产生高光</td>\n<td>此题正确答案为B，见后</td>\n</tr>\n<tr>\n<td>347</td>\n<td>四.填空题，第3题</td>\n<td>点坐标采用<strong>行</strong>向量形式</td>\n<td>点坐标采用<strong>列</strong>向量形式</td>\n<td></td>\n</tr>\n<tr>\n<td>349</td>\n<td>模1答案，二.多选题，第1题答案</td>\n<td>ABC</td>\n<td>ABCD</td>\n<td>错切变换是沿坐标轴错切，参考对象仍为坐标原点</td>\n</tr>\n<tr>\n<td>350</td>\n<td>模2答案，一.单选题，第1题答案</td>\n<td>B</td>\n<td>C</td>\n<td></td>\n</tr>\n<tr>\n<td>350</td>\n<td>一.单选题，第3题答案</td>\n<td>B</td>\n<td>C</td>\n<td></td>\n</tr>\n<tr>\n<td>350</td>\n<td>一.单选题，第4题答案</td>\n<td>C</td>\n<td>D</td>\n<td></td>\n</tr>\n<tr>\n<td>350</td>\n<td>二.多选题，第10题答案</td>\n<td>ACD</td>\n<td>ABCD</td>\n<td></td>\n</tr>\n<tr>\n<td>350</td>\n<td>二.多选题，第11题答案</td>\n<td>CD</td>\n<td>BCD</td>\n<td></td>\n</tr>\n<tr>\n<td>352</td>\n<td>模3答案，一.单选题，第1题答案</td>\n<td>D</td>\n<td>B</td>\n<td></td>\n</tr>\n<tr>\n<td>352</td>\n<td>二.多选题，第1题答案</td>\n<td>BCE</td>\n<td>AD</td>\n<td></td>\n</tr>\n<tr>\n<td>352</td>\n<td>二.多选题，第2题答案</td>\n<td>BD</td>\n<td>B</td>\n<td></td>\n</tr>\n<tr>\n<td>352</td>\n<td>二.多选题，第6题答案</td>\n<td>BD</td>\n<td>BCD</td>\n<td></td>\n</tr>\n<tr>\n<td>354</td>\n<td>第1行</td>\n<td>$$\\begin{bmatrix}    0 &amp; 0 &amp; 0 &amp; 1  \\    1/27 &amp; 1/9 &amp; 1/3 &amp; 0  \\  8/27 &amp; 4/9 &amp; 1/3 &amp; 0  \\    1 &amp; 1 &amp; 1 &amp; 1 \\end{bmatrix}$$</td>\n<td>$$\\begin{bmatrix}    0 &amp; 0 &amp; 0 &amp; 1  \\    1/27 &amp; 1/9 &amp; 1/3 &amp; 1  \\  8/27 &amp; 4/9 &amp; 2/3 &amp; 1  \\    1 &amp; 1 &amp; 1 &amp; 1 \\end{bmatrix}$$</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>P349, 模拟试题1，第四大题第3小题答案：</strong><br>$$T_1= \\left[ \\begin{matrix}<br> 1 &amp; 0 &amp; 0 \\<br> 0 &amp; 1 &amp; 0 \\<br> -2 &amp; -4 &amp; 1<br>\\end{matrix}<br>\\right]  $$</li>\n</ul>\n<p>$$T_2= \\left[ \\begin{matrix}<br>   cos600^\\circ &amp; sin600^\\circ &amp; 0 \\<br>   -sin600^\\circ &amp; cos600^\\circ &amp; 0 \\<br>   0 &amp; 0 &amp; 1<br>  \\end{matrix}<br>  \\right]  =\\left[ \\begin{matrix}<br>   -1/2 &amp; -\\sqrt{3}/2 &amp; 0 \\<br>   \\sqrt{3}/2 &amp; -1/2 &amp; 0 \\<br>   0 &amp; 0 &amp; 1<br>  \\end{matrix}<br>  \\right]$$</p>\n<p>$$T_3= \\left[ \\begin{matrix}<br>   1 &amp; 0 &amp; 0 \\<br>   0 &amp; 1 &amp; 0 \\<br>   2 &amp; 4 &amp; 1<br>  \\end{matrix}<br>  \\right]  $$</p>\n<p>$$T= T_1T_2T_3= \\left[ \\begin{matrix}<br>   -1/2 &amp; -\\sqrt{3}/2 &amp;  0\\<br>   \\sqrt{3}/2 &amp; -1/2 &amp; 0 \\<br>   3-2 \\sqrt{3} &amp; 6+ \\sqrt{3} &amp; 1<br>  \\end{matrix}<br>  \\right]  $$<br>由 $ P^{‘}= PT$  可得：$$ \\left[ \\begin{matrix}<br>    A^{‘} \\<br>    B^{‘} \\<br>    C^{‘}<br>  \\end{matrix}<br>  \\right] =\\left[ \\begin{matrix}<br>    A \\<br>    B \\<br>    C<br>  \\end{matrix}<br>  \\right] T<br>  = \\left[ \\begin{matrix}<br>   2 &amp; 4 &amp; 1 \\<br>   4 &amp; 4 &amp; 1 \\<br>   4 &amp; 1 &amp; 1<br>  \\end{matrix}<br>  \\right] T=<br>  \\left[ \\begin{matrix}<br>   2 &amp; 4 &amp; 1 \\<br>   1 &amp; 4-\\sqrt{3} &amp; 1 \\<br>   1-3\\sqrt{3}/2 &amp; 11/2-\\sqrt{3} &amp; 1<br>  \\end{matrix}<br>  \\right]$$ </p>\n<!---列向量模式\n      1.变换过程：\n(1) 平移三角形，使其角点A与原点重合。其中，平移变换对应的矩阵为\n$$T_1= \\left[ \\begin{matrix}\n   1 & 0 & -2 \\\\\n   0 & 1 & -4 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n  (2) 对平移后三角形进行旋转变换，使其绕角点A（即原点）逆时针旋转600度。相应的旋转变换矩阵为\n$$T_2= \\left[ \\begin{matrix}\n   cos600^\\circ & -sin600^\\circ & 0 \\\\\n   sin600^\\circ & cos600^\\circ & 0 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n  (3) 平移三角形，使其角点A回到原有位置即点（2,4）。其中，平移变换对应的矩阵为\n$$T_3= \\left[ \\begin{matrix}\n   1 & 0 & 2 \\\\\n   0 & 1 & 4 \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n综合（1）、（2）、（3）可得最终的变换矩阵为：\n$$T= T_3T_2T_1= \\left[ \\begin{matrix}\n   -1/2 & \\sqrt{3}/2 &  3-2 \\sqrt{3}\\\\\n   - \\sqrt{3}/2 & -1/2 & 6+ \\sqrt{3} \\\\\n   0 & 0 & 1\n  \\end{matrix}\n  \\right]  $$\n  2. 由变换计算式$ P^{'}＝TP$，可计算变换后的三角形顶点坐标分别为：\n  $$ A^{'}＝TA=T \\left[ \\begin{matrix}\n    2 \\\\\n    4 \\\\\n    1\n  \\end{matrix}\n  \\right]=\\left[ \\begin{matrix}\n    2 \\\\\n    4 \\\\\n    1\n  \\end{matrix}\n  \\right]$$\n $$ B^{'}＝TB=T \\left[ \\begin{matrix}\n    4 \\\\\n    4 \\\\\n    1\n  \\end{matrix}\n  \\right]=\\left[ \\begin{matrix}\n    1 \\\\\n    4-\\sqrt{3} \\\\\n    1\n  \\end{matrix}\n  \\right]$$\n   $$ C^{'}＝TC=T \\left[ \\begin{matrix}\n    4 \\\\\n    1 \\\\\n    1\n  \\end{matrix}\n  \\right]=\\left[ \\begin{matrix}\n    1-3\\sqrt{3}/2  \\\\\n    11/2-\\sqrt{3}  \\\\\n    1\n  \\end{matrix}\n  \\right]$$  \n  -->\n<ul>\n<li><p><strong>P350, 模拟试题1，第四大题第4小题答案：</strong><br>由相似三角形关系可得$$ \\frac{x^{‘}} {x} =  \\frac{d} {d-z} $$于是<br>$$x^{‘} =  \\frac{xd} {d-z}=  \\frac{x} {1-\\frac{z}{d}}$$<br>同理有：$$y^{‘} =  \\frac{y} {1-\\frac{z}{d}}$$<br>另外，$z^{‘}=0$.<br>于是有：<br>$$ P^{‘}  = \\left[ \\begin{matrix}<br>  x^{‘} \\<br>  y^{‘} \\<br>  z^{‘} \\<br>  1<br>\\end{matrix}<br>\\right] =\\left[ \\begin{matrix}<br>  \\frac{x} {1-\\frac{z}{d}} \\<br>  \\frac{y} {1-\\frac{z}{d}} \\<br>  0 \\<br>  1<br>\\end{matrix}<br>\\right]<br>\\equiv \\left[ \\begin{matrix}<br> x \\<br> y \\<br> 0 \\<br> 1-\\frac{z}{d}<br>\\end{matrix}<br>\\right] =<br>\\left[ \\begin{matrix}<br> 1 &amp; 0 &amp; 0 &amp; 0 \\<br> 0 &amp; 1 &amp; 0 &amp; 0 \\<br> 0 &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; -\\frac{1}{d} &amp; 1 \\<br>\\end{matrix}<br>\\right]<br>\\left[ \\begin{matrix}<br> x \\<br> y \\<br> z \\<br> 1<br>\\end{matrix}<br>\\right] ＝ TP $$<br>上式中$T$即为透视变换矩阵，其中$ \\equiv$表示齐次坐标转化。<br>顶点坐标计算：以G点为例，G点齐次坐标为(1,1,-1,1)，则由透视变换可知：<br>$$ G^{‘}  = TG =T \\left[ \\begin{matrix}<br>  1 \\<br>  1 \\<br>  -1 \\<br>  1<br>\\end{matrix}<br>\\right] =<br>\\left[ \\begin{matrix}<br> 1 &amp; 0 &amp; 0 &amp; 0 \\<br> 0 &amp; 1 &amp; 0 &amp; 0 \\<br> 0 &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; -\\frac{1}{d} &amp; 1 \\<br>\\end{matrix}<br>\\right]<br>\\left[ \\begin{matrix}<br> 1 \\<br>  1 \\<br>  -1 \\<br>  1<br>\\end{matrix}<br>\\right] ＝ \\left[ \\begin{matrix}<br> 1 \\<br>  1 \\<br>  0 \\<br>  1+\\frac{1}{d}<br>\\end{matrix}<br>\\right]<br>\\equiv \\left[ \\begin{matrix}<br> \\frac{d}{d+1} \\<br>  \\frac{d}{d+1} \\<br>  0 \\<br>  1<br>\\end{matrix}<br>\\right]  $$<br>故透视变换后G点变为$G^{‘}=( \\frac{d}{d+1},  \\frac{d}{d+1}, 0)$.</p>\n</li>\n<li><p><strong>P351, 模拟试题2，第五大题第2小题答案：</strong><br>$$ cosi=\\vec{L} \\cdot \\vec{N}=0.5, \\vec{R} = 2cosi\\vec{N}-\\vec{L}=(-1/2,1/2,-\\sqrt{2}/2).$$<br>$$cos\\theta= \\vec{R} \\cdot \\vec{V} = -\\sqrt{2}/2&lt;0, \\vec{R}与\\vec{V}夹角大于90度，因此\\vec{V}方向上无镜面反射光，所以 cos\\theta取0. $$<br>$$\\therefore I=I_{pa}k_a+I_p(k_dcosi+k_scos^n\\theta)=160<em>0.5+175(0.2</em>0.5+0)=97.5$$</p>\n</li>\n</ul>\n<ul>\n<li><strong>P353, 模拟试题3，第五大题第1小题答案：</strong><br>$a=y_0-y_1=-4, b=x_1-x_0=8, d_0=a+0.5b=0; a+b=4, a=-4$，当$d_i&lt;0$时，中点M在直线下方，下一点取当前点P的右上方点，记为NE，同时$d_{i+1}=d_i+a+b$；当$d_i\\geq0$时，中点M在直线上方，下一点取当前点P的右侧点，记为E，同时$d_{i+1}=d_i+a$。根据中点线算法原理可得下表：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>$d_i$</th>\n<th>Next Point</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n<td>E</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>0-4=-4</td>\n<td>NE</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>-4+4=0</td>\n<td>E</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2</td>\n<td>0-4=-4</td>\n<td>NE</td>\n</tr>\n<tr>\n<td>6</td>\n<td>3</td>\n<td>-4+4=0</td>\n<td>E</td>\n</tr>\n<tr>\n<td>7</td>\n<td>3</td>\n<td>0-4=-4</td>\n<td>NE</td>\n</tr>\n<tr>\n<td>8</td>\n<td>4</td>\n<td>-4+4=0</td>\n<td>E</td>\n</tr>\n<tr>\n<td>9</td>\n<td>4</td>\n<td>0-4=-4</td>\n<td>NE</td>\n</tr>\n<tr>\n<td>10</td>\n<td>5</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!--- 中点线有关原理\n令直线方程为$F(x,y)=ax+by+c=0$，设当前点为$P(x_p, y_p)$，则可根据中点构造判别式\n$$d=F(M)=F(x_p+1, y_p+0.5)=a(x_p+1)+b(y_p+0.5)+c$$\n-->"},{"title":"实验0.2 OpenGL程序创建与运行","_content":"\n下列介绍与图示均以Microsoft Visual Studio Community 2017版本（下面简称为VS）为例，其它版本类似。\n## 1. 创建控制台应用\n（1）点击：文件&rarr;新建&rarr;项目，如下图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520054720575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n选择“Visual C++ &rarr; Windows桌面&rarr;控制台应用”：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520054720489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n在名称对应文本框中，修改工程名称为“HelloPoint”：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520060836182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n点击“确定”，得到缺省工程结果，如图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520060836189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n## 2. 生成解决方案，确认生成没有错误\n(1) 点击菜单：生成&rarr;生成解决方案，如图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520060836201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n(2) 观察VS下方“输出”窗口中提示：“生成：成功1个...”，确认生成没有错误，如下图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520060836208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n## 3. OpenGL代码替换，解决方案重新生成、运行\n在运行下面代码前，请先配置FreeGlut库，这是一个OpenGL程序的支持环境库，具体信息与配置方法请参考： [FreeGlut配置简介](https://blog.csdn.net/wpxu08/article/details/87785547)。\n(1) 将原有缺省代码替换为下列OpenGL代码：\n```\n#include <GL/glut.h>\nvoid myDisplay(void)\n{\n\tglClearColor(0.0, 0.0, 0.0, 0.0);\n\tglClear(GL_COLOR_BUFFER_BIT);\n\n\tglPointSize(3);\n\tglBegin(GL_POINTS);\n\tglColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(-0.4f, -0.4f);\n\tglColor3f(0.0f, 1.0f, 0.0f);   glVertex2f(0.0f, 0.0f);\n\tglColor3f(0.0f, 0.0f, 1.0f);   glVertex2f(0.4f, 0.4f);\n\tglEnd();\n\n\tglFlush();\n}\n\nint main(int argc, char *argv[])\n{\n\tglutInit(&argc, argv);\n\tglutInitWindowPosition(100, 100);\n\tglutInitWindowSize(400, 400);\n\tglutCreateWindow(\"Hello Point!\");\n\tglutDisplayFunc(&myDisplay);\n\tglutMainLoop();\n\treturn 0;\n}\n```\n替换完成后并重新生成，结果如下图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520060836202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n(2)运行程序，观察程序运行结果\n点击菜单：调试&rarr;开始执行（不调试），如图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520075018132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center)\n弹出两个窗口，其中一个窗口中显示红、绿、蓝三个点，即为程序运行结果，如图所示：\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520060836185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n 至此，完成了一个简单的OpenGL程序创建与运行。","source":"_posts/CG实验0.2 OpenGL程序创建与运行.md","raw":"---\ntitle: 实验0.2 OpenGL程序创建与运行\ntags: [计算机图形学]\ncategories: 计算机图形学基础（第2版）\n---\n\n下列介绍与图示均以Microsoft Visual Studio Community 2017版本（下面简称为VS）为例，其它版本类似。\n## 1. 创建控制台应用\n（1）点击：文件&rarr;新建&rarr;项目，如下图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520054720575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n选择“Visual C++ &rarr; Windows桌面&rarr;控制台应用”：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520054720489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n在名称对应文本框中，修改工程名称为“HelloPoint”：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520060836182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n点击“确定”，得到缺省工程结果，如图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520060836189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n## 2. 生成解决方案，确认生成没有错误\n(1) 点击菜单：生成&rarr;生成解决方案，如图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520060836201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n(2) 观察VS下方“输出”窗口中提示：“生成：成功1个...”，确认生成没有错误，如下图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520060836208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n## 3. OpenGL代码替换，解决方案重新生成、运行\n在运行下面代码前，请先配置FreeGlut库，这是一个OpenGL程序的支持环境库，具体信息与配置方法请参考： [FreeGlut配置简介](https://blog.csdn.net/wpxu08/article/details/87785547)。\n(1) 将原有缺省代码替换为下列OpenGL代码：\n```\n#include <GL/glut.h>\nvoid myDisplay(void)\n{\n\tglClearColor(0.0, 0.0, 0.0, 0.0);\n\tglClear(GL_COLOR_BUFFER_BIT);\n\n\tglPointSize(3);\n\tglBegin(GL_POINTS);\n\tglColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(-0.4f, -0.4f);\n\tglColor3f(0.0f, 1.0f, 0.0f);   glVertex2f(0.0f, 0.0f);\n\tglColor3f(0.0f, 0.0f, 1.0f);   glVertex2f(0.4f, 0.4f);\n\tglEnd();\n\n\tglFlush();\n}\n\nint main(int argc, char *argv[])\n{\n\tglutInit(&argc, argv);\n\tglutInitWindowPosition(100, 100);\n\tglutInitWindowSize(400, 400);\n\tglutCreateWindow(\"Hello Point!\");\n\tglutDisplayFunc(&myDisplay);\n\tglutMainLoop();\n\treturn 0;\n}\n```\n替换完成后并重新生成，结果如下图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520060836202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n(2)运行程序，观察程序运行结果\n点击菜单：调试&rarr;开始执行（不调试），如图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520075018132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center)\n弹出两个窗口，其中一个窗口中显示红、绿、蓝三个点，即为程序运行结果，如图所示：\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200520060836185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70)\n 至此，完成了一个简单的OpenGL程序创建与运行。","slug":"CG实验0.2 OpenGL程序创建与运行","published":1,"date":"2020-05-19T21:11:26.033Z","updated":"2020-05-20T02:53:42.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers05k000pr0akfbezn18c","content":"<p>下列介绍与图示均以Microsoft Visual Studio Community 2017版本（下面简称为VS）为例，其它版本类似。</p>\n<h2 id=\"1-创建控制台应用\"><a href=\"#1-创建控制台应用\" class=\"headerlink\" title=\"1. 创建控制台应用\"></a>1. 创建控制台应用</h2><p>（1）点击：文件&rarr;新建&rarr;项目，如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/20200520054720575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>选择“Visual C++ &rarr; Windows桌面&rarr;控制台应用”：<br><img src=\"https://img-blog.csdnimg.cn/20200520054720489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>在名称对应文本框中，修改工程名称为“HelloPoint”：<br><img src=\"https://img-blog.csdnimg.cn/20200520060836182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>点击“确定”，得到缺省工程结果，如图所示：<br><img src=\"https://img-blog.csdnimg.cn/20200520060836189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-生成解决方案，确认生成没有错误\"><a href=\"#2-生成解决方案，确认生成没有错误\" class=\"headerlink\" title=\"2. 生成解决方案，确认生成没有错误\"></a>2. 生成解决方案，确认生成没有错误</h2><p>(1) 点击菜单：生成&rarr;生成解决方案，如图所示：<br><img src=\"https://img-blog.csdnimg.cn/20200520060836201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>(2) 观察VS下方“输出”窗口中提示：“生成：成功1个…”，确认生成没有错误，如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/20200520060836208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-OpenGL代码替换，解决方案重新生成、运行\"><a href=\"#3-OpenGL代码替换，解决方案重新生成、运行\" class=\"headerlink\" title=\"3. OpenGL代码替换，解决方案重新生成、运行\"></a>3. OpenGL代码替换，解决方案重新生成、运行</h2><p>在运行下面代码前，请先配置FreeGlut库，这是一个OpenGL程序的支持环境库，具体信息与配置方法请参考： <a href=\"https://blog.csdn.net/wpxu08/article/details/87785547\" target=\"_blank\" rel=\"noopener\">FreeGlut配置简介</a>。<br>(1) 将原有缺省代码替换为下列OpenGL代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">void myDisplay(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglPointSize(3);</span><br><span class=\"line\">\tglBegin(GL_POINTS);</span><br><span class=\"line\">\tglColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(-0.4f, -0.4f);</span><br><span class=\"line\">\tglColor3f(0.0f, 1.0f, 0.0f);   glVertex2f(0.0f, 0.0f);</span><br><span class=\"line\">\tglColor3f(0.0f, 0.0f, 1.0f);   glVertex2f(0.4f, 0.4f);</span><br><span class=\"line\">\tglEnd();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\">\tglutInitWindowPosition(100, 100);</span><br><span class=\"line\">\tglutInitWindowSize(400, 400);</span><br><span class=\"line\">\tglutCreateWindow(&quot;Hello Point!&quot;);</span><br><span class=\"line\">\tglutDisplayFunc(&amp;myDisplay);</span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>替换完成后并重新生成，结果如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/20200520060836202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>(2)运行程序，观察程序运行结果<br>点击菜单：调试&rarr;开始执行（不调试），如图所示：<br><img src=\"https://img-blog.csdnimg.cn/20200520075018132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>弹出两个窗口，其中一个窗口中显示红、绿、蓝三个点，即为程序运行结果，如图所示：<br> <img src=\"https://img-blog.csdnimg.cn/20200520060836185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 至此，完成了一个简单的OpenGL程序创建与运行。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>下列介绍与图示均以Microsoft Visual Studio Community 2017版本（下面简称为VS）为例，其它版本类似。</p>\n<h2 id=\"1-创建控制台应用\"><a href=\"#1-创建控制台应用\" class=\"headerlink\" title=\"1. 创建控制台应用\"></a>1. 创建控制台应用</h2><p>（1）点击：文件&rarr;新建&rarr;项目，如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/20200520054720575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>选择“Visual C++ &rarr; Windows桌面&rarr;控制台应用”：<br><img src=\"https://img-blog.csdnimg.cn/20200520054720489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>在名称对应文本框中，修改工程名称为“HelloPoint”：<br><img src=\"https://img-blog.csdnimg.cn/20200520060836182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>点击“确定”，得到缺省工程结果，如图所示：<br><img src=\"https://img-blog.csdnimg.cn/20200520060836189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-生成解决方案，确认生成没有错误\"><a href=\"#2-生成解决方案，确认生成没有错误\" class=\"headerlink\" title=\"2. 生成解决方案，确认生成没有错误\"></a>2. 生成解决方案，确认生成没有错误</h2><p>(1) 点击菜单：生成&rarr;生成解决方案，如图所示：<br><img src=\"https://img-blog.csdnimg.cn/20200520060836201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>(2) 观察VS下方“输出”窗口中提示：“生成：成功1个…”，确认生成没有错误，如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/20200520060836208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-OpenGL代码替换，解决方案重新生成、运行\"><a href=\"#3-OpenGL代码替换，解决方案重新生成、运行\" class=\"headerlink\" title=\"3. OpenGL代码替换，解决方案重新生成、运行\"></a>3. OpenGL代码替换，解决方案重新生成、运行</h2><p>在运行下面代码前，请先配置FreeGlut库，这是一个OpenGL程序的支持环境库，具体信息与配置方法请参考： <a href=\"https://blog.csdn.net/wpxu08/article/details/87785547\" target=\"_blank\" rel=\"noopener\">FreeGlut配置简介</a>。<br>(1) 将原有缺省代码替换为下列OpenGL代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">void myDisplay(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglPointSize(3);</span><br><span class=\"line\">\tglBegin(GL_POINTS);</span><br><span class=\"line\">\tglColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(-0.4f, -0.4f);</span><br><span class=\"line\">\tglColor3f(0.0f, 1.0f, 0.0f);   glVertex2f(0.0f, 0.0f);</span><br><span class=\"line\">\tglColor3f(0.0f, 0.0f, 1.0f);   glVertex2f(0.4f, 0.4f);</span><br><span class=\"line\">\tglEnd();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglutInit(&amp;argc, argv);</span><br><span class=\"line\">\tglutInitWindowPosition(100, 100);</span><br><span class=\"line\">\tglutInitWindowSize(400, 400);</span><br><span class=\"line\">\tglutCreateWindow(&quot;Hello Point!&quot;);</span><br><span class=\"line\">\tglutDisplayFunc(&amp;myDisplay);</span><br><span class=\"line\">\tglutMainLoop();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>替换完成后并重新生成，结果如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/20200520060836202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>(2)运行程序，观察程序运行结果<br>点击菜单：调试&rarr;开始执行（不调试），如图所示：<br><img src=\"https://img-blog.csdnimg.cn/20200520075018132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>弹出两个窗口，其中一个窗口中显示红、绿、蓝三个点，即为程序运行结果，如图所示：<br> <img src=\"https://img-blog.csdnimg.cn/20200520060836185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 至此，完成了一个简单的OpenGL程序创建与运行。</p>\n"},{"title":"实验1 OpenGL初识","_content":"\n## 一．实验目的\n- 熟悉编程环境；了解光栅图形显示器的特点；了解计算机绘图的特点；\n- 利用VC+OpenGL作为开发平台设计程序，以能够在屏幕上生成任意一个像素点作为本实验的目标。\n\n## 二．实验内容\n- 了解和使用VC的开发环境，理解简单的OpenGL程序结构。\n- 掌握OpenGL提供的基本图形函数，尤其是生成点的函数。\n\n## 三．实验原理\n#### 1. 基本语法\n常用的程序设计语言，如C、C++、Pascal、Fortran和Java等，都支持OpenGL的开发。这里只讨论C版本下OpenGL的语法。\nOpenGL基本函数均使用gl作为函数名的前缀，如glClearColor()；实用函数则使用glu作为函数名的前缀，如gluSphere()。OpenGL基本常量的名字以GL_开头，如GL_LINE_LOOP；实用常量的名字以GLU_开头，如GLU_FILL。一些函数如glColor*()（定义颜色值），函数名后可以接不同的后缀以支持不同的数据类型和格式。如glColor3b(...)、glColor3d(...)、glColor3f(...)和glColor3bv(...)等，这几个函数在功能上是相似的，只是适用于不同的数据类型和格式，其中3表示该函数带有三个参数，b、d、f分别表示参数的类型是字节型、双精度浮点型和单精度浮点型，v则表示这些参数是以向量形式出现的。\n为便于移植，OpenGL定义了一些自己的数据类型，如GLfloat、GLvoid，它们其实就是C语言中的float和void。在gl.h文件中可以看到以下定义：\n\n```\ntypedef float GLfloat;\ntypedef void GLvoid;\n```\n\n一些基本的数据类型都有类似的定义项。\n#### 2. 程序的基本结构\nOpenGL程序的基本结构可分为三个部分：\n**(1) 初始化：** 主要是设置一些OpenGL的状态开关，如颜色模式（RGBA或Alpha）的选择、是否作光照处理（若有的话，还需设置光源的特性）、深度检测、裁剪等。这些状态一般都用函数glEnable(...), glDisable(…)来设置，“…”表示特定的状态。\n**(2) 观察设置：** 设置观察坐标系下的取景模式和取景框位置大小。主要利用了三个函数。\n- void glViewport(left,top,right,bottom)：设置在屏幕上的窗口大小，四个参数描述屏幕窗口四个角上的坐标（以像素表示）。\n- void glOrtho(left,right,bottom,top,near,far)：设置投影方式为正交投影（平行投影），其取景体积是一个各面均为矩形的六面体。\n- void gluPerspective(fovy,aspect,zNear,zFar)：设置投影方式为透视投影，其取景体积是一个截头锥体。\n\n**(3) 程序主体：** 使用OpenGL的库函数构造几何物体对象的数学描述，包括点线面的位置和拓扑关系、几何变换、光照处理等。\n#### 3. 状态机制\nOpenGL的工作方式是一种状态机制，它可以进行各种状态或模式设置，这些状态或模式在重新改变它们之前一直有效。例如，当前颜色就是一个状态变量，在这个状态改变之前，绘制的每个像素都将使用该颜色，直到当前颜色被设置为其他颜色为止。\nOpenGL中大量使用了这种状态机制，如颜色模式、投影模式、单双显示缓存区的设置、背景色的设置、光源的位置和特性等。许多状态变量可以通过glEnable()、glDisable()这两个函数来设置成有效或无效状态，如是否设置光照、是否进行深度检测等；在被设置成有效状态之后，绝大部分状态变量都有一个默认值。\n通常情况下，可以用下列四个函数来获取某个状态变量的值：glGetBooleanv、glGetDouble、glGetFloatv和glGetIntegerv。究竟选择哪个函数应该根据所要获得的返回值的数据类型来决定。还有些状态变量有特殊的查询函数，如glGetLight*、glGetError和glPolygonStipple等。另外，使用glPushAttrib和glPopAttrib函数，可以存储和恢复最近的状态变量的值。只要有可能，都应该使用这些函数，因为它们比其他查询函数的效率更高。\n#### 4. OpenGL的坐标系统\n如下图A.1所示,OpengGL坐标与绘图区坐标关系如下，\n绘图区的中心点：(0.0,0.0,0.0)\n绘图区的右上角点：(1.0,1.0,0.0)\n绘图区的左下角点：(-1.0, 1.0,0.0)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200519185542162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center)\n<center>图A.1 OpengGL绘图区对应坐标</center>\n\n\n## 四．实验代码\n在运行下面实验代码前，请先配置FreeGlut库，这是一个OpenGL程序的支持环境库，具体信息与配置方法请参考： [FreeGlut配置简介](https://blog.csdn.net/wpxu08/article/details/87785547)。之后，学习掌握OpenGL程序创建与运行，具体请参考[OpenGL程序创建与运行](https://blog.csdn.net/wpxu08/article/details/106226748)。\n```\n#include <GL/glut.h>\nvoid myDisplay(void)\n{\n\tglClearColor(0.0, 0.0, 0.0, 0.0);\n\tglClear(GL_COLOR_BUFFER_BIT);\n\n\tglColor3f (1.0f, 1.0f, 1.0f); \n\tglRectf(-0.5f, -0.5f, 0.5f, 0.5f);\n\n\tglBegin (GL_TRIANGLES);\n\tglColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (0.0f, 1.0f);\n\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (0.8f, -0.5f);\n\tglColor3f (0.0f, 0.0f, 1.0f);   glVertex2f (-0.8f, -0.5f);\n\tglEnd ();\n\n\tglPointSize(3);\n\tglBegin (GL_POINTS);\n\tglColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (-0.4f, -0.4f);\n\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (0.0f, 0.0f);\n\tglColor3f (0.0f, 0.0f, 1.0f);   glVertex2f (0.4f, 0.4f);\n\tglEnd ();\n\n\tglFlush();\n}\n\nint main(int argc, char *argv[])\n{\n    glutInit(&argc, argv);\n    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);\n    glutInitWindowPosition(100, 100);\n    glutInitWindowSize(400, 400);\n    glutCreateWindow(\"Hello World!\");\n    glutDisplayFunc(&myDisplay);\n    glutMainLoop();\n    return 0;\n}\n```\n该程序的作用是在一个黑色的窗口中央画一个矩形、三角形和三个点，如图A.2（a）所示。下面对主要语句进行说明。\n首先，需要包含GLUT的头文件：#include <GL/glut.h>。一般，OpenGL程序还要包含<GL/gl.h>和<GL/glu.h>，但GLUT的头文件中已经自动将这两个文件包含了，不必再次包含。\n然后看main函数。int main(int argc, char *argv[])，这个是带命令行参数的main函数。注意main函数中的各语句，除了最后的return之外，其余全部以glut开头。这种以glut开头的函数都是GLUT工具包所提供的函数。\n下面对用到的几个函数进行介绍。\n- glutInit，对GLUT进行初始化，这个函数必须在其他的GLUT使用之前调用一次。其格式比较固定，一般都是glutInit(&argc, argv)就行。\n- glutInitDisplayMode，设置显示方式，其中GLUT_RGB表示使用RGB颜色，与之对应的还有GLUT_INDEX（表示使用索引颜色）。GLUT_SINGLE表示使用单缓冲，与之对应的还有GLUT_DOUBLE（使用双缓冲）。更多信息，以后的实验教程会有介绍。\n- glutInitWindowPosition，设置窗口在屏幕中的位置。\n- glutInitWindowSize，设置窗口的大小。\n- glutCreateWindow，根据前述设置的信息创建窗口。参数将被作为窗口的标题。注意：窗口被创建后，并不立即显示到屏幕上。需要调用glutMainLoop才能看到窗口。\n- glutDisplayFunc，设置一个函数，当需要进行画图时，这个函数就会被调用（暂且这样理解）。\n- glutMainLoop，进行一个消息循环（现在只需知道这个函数可以显示窗口，并且等待窗口关闭后才会返回）。\n\n在glutDisplayFunc函数中，我们设置了“当需要画图时，请调用myDisplay函数”。于是myDisplay函数就用来画图。观察myDisplay函数中的三个函数调用，发现它们都以gl开头。这种以gl开头的函数都是OpenGL的标准函数，下面对用到的函数进行介绍。\n- glClearColor(0.0, 0.0, 0.0, 0.0) ：将清空颜色设为黑色（思考：为什么会有四个参数？）。\n- glClear(GL_COLOR_BUFFER_BIT)：将窗口的背景设置为当前清空颜色。\n- glRectf：画一个矩形。四个参数分别表示了位于对角线上的两个点的横、纵坐标。\n- (4)glFlush：保证前面的OpenGL命令立即执行（而不是让它们在缓冲区中等待）。\n\n## 五．实验提高\n根据示范程序，能否在原有结果基础上添加三条直线组成三角形，结果如图A.2（b）所示？\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200519190057132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center)\n \n <center>（a）示范程序结果</center>   \n \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200519190227388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center)  \n\n<center>（b）加三角形后的结果</center>\n<center>图A.2 实验1</center>","source":"_posts/CG实验1 OpenGL初识.md","raw":"---\ntitle: 实验1 OpenGL初识\ntags: [计算机图形学]\ncategories: 计算机图形学基础（第2版）\n---\n\n## 一．实验目的\n- 熟悉编程环境；了解光栅图形显示器的特点；了解计算机绘图的特点；\n- 利用VC+OpenGL作为开发平台设计程序，以能够在屏幕上生成任意一个像素点作为本实验的目标。\n\n## 二．实验内容\n- 了解和使用VC的开发环境，理解简单的OpenGL程序结构。\n- 掌握OpenGL提供的基本图形函数，尤其是生成点的函数。\n\n## 三．实验原理\n#### 1. 基本语法\n常用的程序设计语言，如C、C++、Pascal、Fortran和Java等，都支持OpenGL的开发。这里只讨论C版本下OpenGL的语法。\nOpenGL基本函数均使用gl作为函数名的前缀，如glClearColor()；实用函数则使用glu作为函数名的前缀，如gluSphere()。OpenGL基本常量的名字以GL_开头，如GL_LINE_LOOP；实用常量的名字以GLU_开头，如GLU_FILL。一些函数如glColor*()（定义颜色值），函数名后可以接不同的后缀以支持不同的数据类型和格式。如glColor3b(...)、glColor3d(...)、glColor3f(...)和glColor3bv(...)等，这几个函数在功能上是相似的，只是适用于不同的数据类型和格式，其中3表示该函数带有三个参数，b、d、f分别表示参数的类型是字节型、双精度浮点型和单精度浮点型，v则表示这些参数是以向量形式出现的。\n为便于移植，OpenGL定义了一些自己的数据类型，如GLfloat、GLvoid，它们其实就是C语言中的float和void。在gl.h文件中可以看到以下定义：\n\n```\ntypedef float GLfloat;\ntypedef void GLvoid;\n```\n\n一些基本的数据类型都有类似的定义项。\n#### 2. 程序的基本结构\nOpenGL程序的基本结构可分为三个部分：\n**(1) 初始化：** 主要是设置一些OpenGL的状态开关，如颜色模式（RGBA或Alpha）的选择、是否作光照处理（若有的话，还需设置光源的特性）、深度检测、裁剪等。这些状态一般都用函数glEnable(...), glDisable(…)来设置，“…”表示特定的状态。\n**(2) 观察设置：** 设置观察坐标系下的取景模式和取景框位置大小。主要利用了三个函数。\n- void glViewport(left,top,right,bottom)：设置在屏幕上的窗口大小，四个参数描述屏幕窗口四个角上的坐标（以像素表示）。\n- void glOrtho(left,right,bottom,top,near,far)：设置投影方式为正交投影（平行投影），其取景体积是一个各面均为矩形的六面体。\n- void gluPerspective(fovy,aspect,zNear,zFar)：设置投影方式为透视投影，其取景体积是一个截头锥体。\n\n**(3) 程序主体：** 使用OpenGL的库函数构造几何物体对象的数学描述，包括点线面的位置和拓扑关系、几何变换、光照处理等。\n#### 3. 状态机制\nOpenGL的工作方式是一种状态机制，它可以进行各种状态或模式设置，这些状态或模式在重新改变它们之前一直有效。例如，当前颜色就是一个状态变量，在这个状态改变之前，绘制的每个像素都将使用该颜色，直到当前颜色被设置为其他颜色为止。\nOpenGL中大量使用了这种状态机制，如颜色模式、投影模式、单双显示缓存区的设置、背景色的设置、光源的位置和特性等。许多状态变量可以通过glEnable()、glDisable()这两个函数来设置成有效或无效状态，如是否设置光照、是否进行深度检测等；在被设置成有效状态之后，绝大部分状态变量都有一个默认值。\n通常情况下，可以用下列四个函数来获取某个状态变量的值：glGetBooleanv、glGetDouble、glGetFloatv和glGetIntegerv。究竟选择哪个函数应该根据所要获得的返回值的数据类型来决定。还有些状态变量有特殊的查询函数，如glGetLight*、glGetError和glPolygonStipple等。另外，使用glPushAttrib和glPopAttrib函数，可以存储和恢复最近的状态变量的值。只要有可能，都应该使用这些函数，因为它们比其他查询函数的效率更高。\n#### 4. OpenGL的坐标系统\n如下图A.1所示,OpengGL坐标与绘图区坐标关系如下，\n绘图区的中心点：(0.0,0.0,0.0)\n绘图区的右上角点：(1.0,1.0,0.0)\n绘图区的左下角点：(-1.0, 1.0,0.0)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200519185542162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center)\n<center>图A.1 OpengGL绘图区对应坐标</center>\n\n\n## 四．实验代码\n在运行下面实验代码前，请先配置FreeGlut库，这是一个OpenGL程序的支持环境库，具体信息与配置方法请参考： [FreeGlut配置简介](https://blog.csdn.net/wpxu08/article/details/87785547)。之后，学习掌握OpenGL程序创建与运行，具体请参考[OpenGL程序创建与运行](https://blog.csdn.net/wpxu08/article/details/106226748)。\n```\n#include <GL/glut.h>\nvoid myDisplay(void)\n{\n\tglClearColor(0.0, 0.0, 0.0, 0.0);\n\tglClear(GL_COLOR_BUFFER_BIT);\n\n\tglColor3f (1.0f, 1.0f, 1.0f); \n\tglRectf(-0.5f, -0.5f, 0.5f, 0.5f);\n\n\tglBegin (GL_TRIANGLES);\n\tglColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (0.0f, 1.0f);\n\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (0.8f, -0.5f);\n\tglColor3f (0.0f, 0.0f, 1.0f);   glVertex2f (-0.8f, -0.5f);\n\tglEnd ();\n\n\tglPointSize(3);\n\tglBegin (GL_POINTS);\n\tglColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (-0.4f, -0.4f);\n\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (0.0f, 0.0f);\n\tglColor3f (0.0f, 0.0f, 1.0f);   glVertex2f (0.4f, 0.4f);\n\tglEnd ();\n\n\tglFlush();\n}\n\nint main(int argc, char *argv[])\n{\n    glutInit(&argc, argv);\n    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);\n    glutInitWindowPosition(100, 100);\n    glutInitWindowSize(400, 400);\n    glutCreateWindow(\"Hello World!\");\n    glutDisplayFunc(&myDisplay);\n    glutMainLoop();\n    return 0;\n}\n```\n该程序的作用是在一个黑色的窗口中央画一个矩形、三角形和三个点，如图A.2（a）所示。下面对主要语句进行说明。\n首先，需要包含GLUT的头文件：#include <GL/glut.h>。一般，OpenGL程序还要包含<GL/gl.h>和<GL/glu.h>，但GLUT的头文件中已经自动将这两个文件包含了，不必再次包含。\n然后看main函数。int main(int argc, char *argv[])，这个是带命令行参数的main函数。注意main函数中的各语句，除了最后的return之外，其余全部以glut开头。这种以glut开头的函数都是GLUT工具包所提供的函数。\n下面对用到的几个函数进行介绍。\n- glutInit，对GLUT进行初始化，这个函数必须在其他的GLUT使用之前调用一次。其格式比较固定，一般都是glutInit(&argc, argv)就行。\n- glutInitDisplayMode，设置显示方式，其中GLUT_RGB表示使用RGB颜色，与之对应的还有GLUT_INDEX（表示使用索引颜色）。GLUT_SINGLE表示使用单缓冲，与之对应的还有GLUT_DOUBLE（使用双缓冲）。更多信息，以后的实验教程会有介绍。\n- glutInitWindowPosition，设置窗口在屏幕中的位置。\n- glutInitWindowSize，设置窗口的大小。\n- glutCreateWindow，根据前述设置的信息创建窗口。参数将被作为窗口的标题。注意：窗口被创建后，并不立即显示到屏幕上。需要调用glutMainLoop才能看到窗口。\n- glutDisplayFunc，设置一个函数，当需要进行画图时，这个函数就会被调用（暂且这样理解）。\n- glutMainLoop，进行一个消息循环（现在只需知道这个函数可以显示窗口，并且等待窗口关闭后才会返回）。\n\n在glutDisplayFunc函数中，我们设置了“当需要画图时，请调用myDisplay函数”。于是myDisplay函数就用来画图。观察myDisplay函数中的三个函数调用，发现它们都以gl开头。这种以gl开头的函数都是OpenGL的标准函数，下面对用到的函数进行介绍。\n- glClearColor(0.0, 0.0, 0.0, 0.0) ：将清空颜色设为黑色（思考：为什么会有四个参数？）。\n- glClear(GL_COLOR_BUFFER_BIT)：将窗口的背景设置为当前清空颜色。\n- glRectf：画一个矩形。四个参数分别表示了位于对角线上的两个点的横、纵坐标。\n- (4)glFlush：保证前面的OpenGL命令立即执行（而不是让它们在缓冲区中等待）。\n\n## 五．实验提高\n根据示范程序，能否在原有结果基础上添加三条直线组成三角形，结果如图A.2（b）所示？\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200519190057132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center)\n \n <center>（a）示范程序结果</center>   \n \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200519190227388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center)  \n\n<center>（b）加三角形后的结果</center>\n<center>图A.2 实验1</center>","slug":"CG实验1 OpenGL初识","published":1,"date":"2020-05-19T10:13:08.045Z","updated":"2020-05-20T03:07:27.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers05m000sr0aklyr0mcpn","content":"<h2 id=\"一．实验目的\"><a href=\"#一．实验目的\" class=\"headerlink\" title=\"一．实验目的\"></a>一．实验目的</h2><ul>\n<li>熟悉编程环境；了解光栅图形显示器的特点；了解计算机绘图的特点；</li>\n<li>利用VC+OpenGL作为开发平台设计程序，以能够在屏幕上生成任意一个像素点作为本实验的目标。</li>\n</ul>\n<h2 id=\"二．实验内容\"><a href=\"#二．实验内容\" class=\"headerlink\" title=\"二．实验内容\"></a>二．实验内容</h2><ul>\n<li>了解和使用VC的开发环境，理解简单的OpenGL程序结构。</li>\n<li>掌握OpenGL提供的基本图形函数，尤其是生成点的函数。</li>\n</ul>\n<h2 id=\"三．实验原理\"><a href=\"#三．实验原理\" class=\"headerlink\" title=\"三．实验原理\"></a>三．实验原理</h2><h4 id=\"1-基本语法\"><a href=\"#1-基本语法\" class=\"headerlink\" title=\"1. 基本语法\"></a>1. 基本语法</h4><p>常用的程序设计语言，如C、C++、Pascal、Fortran和Java等，都支持OpenGL的开发。这里只讨论C版本下OpenGL的语法。<br>OpenGL基本函数均使用gl作为函数名的前缀，如glClearColor()；实用函数则使用glu作为函数名的前缀，如gluSphere()。OpenGL基本常量的名字以GL_开头，如GL_LINE_LOOP；实用常量的名字以GLU_开头，如GLU_FILL。一些函数如glColor*()（定义颜色值），函数名后可以接不同的后缀以支持不同的数据类型和格式。如glColor3b(…)、glColor3d(…)、glColor3f(…)和glColor3bv(…)等，这几个函数在功能上是相似的，只是适用于不同的数据类型和格式，其中3表示该函数带有三个参数，b、d、f分别表示参数的类型是字节型、双精度浮点型和单精度浮点型，v则表示这些参数是以向量形式出现的。<br>为便于移植，OpenGL定义了一些自己的数据类型，如GLfloat、GLvoid，它们其实就是C语言中的float和void。在gl.h文件中可以看到以下定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef float GLfloat;</span><br><span class=\"line\">typedef void GLvoid;</span><br></pre></td></tr></table></figure>\n<p>一些基本的数据类型都有类似的定义项。</p>\n<h4 id=\"2-程序的基本结构\"><a href=\"#2-程序的基本结构\" class=\"headerlink\" title=\"2. 程序的基本结构\"></a>2. 程序的基本结构</h4><p>OpenGL程序的基本结构可分为三个部分：<br><strong>(1) 初始化：</strong> 主要是设置一些OpenGL的状态开关，如颜色模式（RGBA或Alpha）的选择、是否作光照处理（若有的话，还需设置光源的特性）、深度检测、裁剪等。这些状态一般都用函数glEnable(…), glDisable(…)来设置，“…”表示特定的状态。<br><strong>(2) 观察设置：</strong> 设置观察坐标系下的取景模式和取景框位置大小。主要利用了三个函数。</p>\n<ul>\n<li>void glViewport(left,top,right,bottom)：设置在屏幕上的窗口大小，四个参数描述屏幕窗口四个角上的坐标（以像素表示）。</li>\n<li>void glOrtho(left,right,bottom,top,near,far)：设置投影方式为正交投影（平行投影），其取景体积是一个各面均为矩形的六面体。</li>\n<li>void gluPerspective(fovy,aspect,zNear,zFar)：设置投影方式为透视投影，其取景体积是一个截头锥体。</li>\n</ul>\n<p><strong>(3) 程序主体：</strong> 使用OpenGL的库函数构造几何物体对象的数学描述，包括点线面的位置和拓扑关系、几何变换、光照处理等。</p>\n<h4 id=\"3-状态机制\"><a href=\"#3-状态机制\" class=\"headerlink\" title=\"3. 状态机制\"></a>3. 状态机制</h4><p>OpenGL的工作方式是一种状态机制，它可以进行各种状态或模式设置，这些状态或模式在重新改变它们之前一直有效。例如，当前颜色就是一个状态变量，在这个状态改变之前，绘制的每个像素都将使用该颜色，直到当前颜色被设置为其他颜色为止。<br>OpenGL中大量使用了这种状态机制，如颜色模式、投影模式、单双显示缓存区的设置、背景色的设置、光源的位置和特性等。许多状态变量可以通过glEnable()、glDisable()这两个函数来设置成有效或无效状态，如是否设置光照、是否进行深度检测等；在被设置成有效状态之后，绝大部分状态变量都有一个默认值。<br>通常情况下，可以用下列四个函数来获取某个状态变量的值：glGetBooleanv、glGetDouble、glGetFloatv和glGetIntegerv。究竟选择哪个函数应该根据所要获得的返回值的数据类型来决定。还有些状态变量有特殊的查询函数，如glGetLight*、glGetError和glPolygonStipple等。另外，使用glPushAttrib和glPopAttrib函数，可以存储和恢复最近的状态变量的值。只要有可能，都应该使用这些函数，因为它们比其他查询函数的效率更高。</p>\n<h4 id=\"4-OpenGL的坐标系统\"><a href=\"#4-OpenGL的坐标系统\" class=\"headerlink\" title=\"4. OpenGL的坐标系统\"></a>4. OpenGL的坐标系统</h4><p>如下图A.1所示,OpengGL坐标与绘图区坐标关系如下，<br>绘图区的中心点：(0.0,0.0,0.0)<br>绘图区的右上角点：(1.0,1.0,0.0)<br>绘图区的左下角点：(-1.0, 1.0,0.0)<br><img src=\"https://img-blog.csdnimg.cn/20200519185542162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<center>图A.1 OpengGL绘图区对应坐标</center>\n\n\n<h2 id=\"四．实验代码\"><a href=\"#四．实验代码\" class=\"headerlink\" title=\"四．实验代码\"></a>四．实验代码</h2><p>在运行下面实验代码前，请先配置FreeGlut库，这是一个OpenGL程序的支持环境库，具体信息与配置方法请参考： <a href=\"https://blog.csdn.net/wpxu08/article/details/87785547\" target=\"_blank\" rel=\"noopener\">FreeGlut配置简介</a>。之后，学习掌握OpenGL程序创建与运行，具体请参考<a href=\"https://blog.csdn.net/wpxu08/article/details/106226748\" target=\"_blank\" rel=\"noopener\">OpenGL程序创建与运行</a>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">void myDisplay(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglColor3f (1.0f, 1.0f, 1.0f); </span><br><span class=\"line\">\tglRectf(-0.5f, -0.5f, 0.5f, 0.5f);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglBegin (GL_TRIANGLES);</span><br><span class=\"line\">\tglColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (0.0f, 1.0f);</span><br><span class=\"line\">\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (0.8f, -0.5f);</span><br><span class=\"line\">\tglColor3f (0.0f, 0.0f, 1.0f);   glVertex2f (-0.8f, -0.5f);</span><br><span class=\"line\">\tglEnd ();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglPointSize(3);</span><br><span class=\"line\">\tglBegin (GL_POINTS);</span><br><span class=\"line\">\tglColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (-0.4f, -0.4f);</span><br><span class=\"line\">\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (0.0f, 0.0f);</span><br><span class=\"line\">\tglColor3f (0.0f, 0.0f, 1.0f);   glVertex2f (0.4f, 0.4f);</span><br><span class=\"line\">\tglEnd ();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glutInit(&amp;argc, argv);</span><br><span class=\"line\">    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</span><br><span class=\"line\">    glutInitWindowPosition(100, 100);</span><br><span class=\"line\">    glutInitWindowSize(400, 400);</span><br><span class=\"line\">    glutCreateWindow(&quot;Hello World!&quot;);</span><br><span class=\"line\">    glutDisplayFunc(&amp;myDisplay);</span><br><span class=\"line\">    glutMainLoop();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该程序的作用是在一个黑色的窗口中央画一个矩形、三角形和三个点，如图A.2（a）所示。下面对主要语句进行说明。<br>首先，需要包含GLUT的头文件：#include &lt;GL/glut.h&gt;。一般，OpenGL程序还要包含&lt;GL/gl.h&gt;和&lt;GL/glu.h&gt;，但GLUT的头文件中已经自动将这两个文件包含了，不必再次包含。<br>然后看main函数。int main(int argc, char *argv[])，这个是带命令行参数的main函数。注意main函数中的各语句，除了最后的return之外，其余全部以glut开头。这种以glut开头的函数都是GLUT工具包所提供的函数。<br>下面对用到的几个函数进行介绍。</p>\n<ul>\n<li>glutInit，对GLUT进行初始化，这个函数必须在其他的GLUT使用之前调用一次。其格式比较固定，一般都是glutInit(&amp;argc, argv)就行。</li>\n<li>glutInitDisplayMode，设置显示方式，其中GLUT_RGB表示使用RGB颜色，与之对应的还有GLUT_INDEX（表示使用索引颜色）。GLUT_SINGLE表示使用单缓冲，与之对应的还有GLUT_DOUBLE（使用双缓冲）。更多信息，以后的实验教程会有介绍。</li>\n<li>glutInitWindowPosition，设置窗口在屏幕中的位置。</li>\n<li>glutInitWindowSize，设置窗口的大小。</li>\n<li>glutCreateWindow，根据前述设置的信息创建窗口。参数将被作为窗口的标题。注意：窗口被创建后，并不立即显示到屏幕上。需要调用glutMainLoop才能看到窗口。</li>\n<li>glutDisplayFunc，设置一个函数，当需要进行画图时，这个函数就会被调用（暂且这样理解）。</li>\n<li>glutMainLoop，进行一个消息循环（现在只需知道这个函数可以显示窗口，并且等待窗口关闭后才会返回）。</li>\n</ul>\n<p>在glutDisplayFunc函数中，我们设置了“当需要画图时，请调用myDisplay函数”。于是myDisplay函数就用来画图。观察myDisplay函数中的三个函数调用，发现它们都以gl开头。这种以gl开头的函数都是OpenGL的标准函数，下面对用到的函数进行介绍。</p>\n<ul>\n<li>glClearColor(0.0, 0.0, 0.0, 0.0) ：将清空颜色设为黑色（思考：为什么会有四个参数？）。</li>\n<li>glClear(GL_COLOR_BUFFER_BIT)：将窗口的背景设置为当前清空颜色。</li>\n<li>glRectf：画一个矩形。四个参数分别表示了位于对角线上的两个点的横、纵坐标。</li>\n<li>(4)glFlush：保证前面的OpenGL命令立即执行（而不是让它们在缓冲区中等待）。</li>\n</ul>\n<h2 id=\"五．实验提高\"><a href=\"#五．实验提高\" class=\"headerlink\" title=\"五．实验提高\"></a>五．实验提高</h2><p>根据示范程序，能否在原有结果基础上添加三条直线组成三角形，结果如图A.2（b）所示？<br><img src=\"https://img-blog.csdnimg.cn/20200519190057132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n <center>（a）示范程序结果</center>   \n\n<p><img src=\"https://img-blog.csdnimg.cn/20200519190227388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\">  </p>\n<center>（b）加三角形后的结果</center><br><center>图A.2 实验1</center>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一．实验目的\"><a href=\"#一．实验目的\" class=\"headerlink\" title=\"一．实验目的\"></a>一．实验目的</h2><ul>\n<li>熟悉编程环境；了解光栅图形显示器的特点；了解计算机绘图的特点；</li>\n<li>利用VC+OpenGL作为开发平台设计程序，以能够在屏幕上生成任意一个像素点作为本实验的目标。</li>\n</ul>\n<h2 id=\"二．实验内容\"><a href=\"#二．实验内容\" class=\"headerlink\" title=\"二．实验内容\"></a>二．实验内容</h2><ul>\n<li>了解和使用VC的开发环境，理解简单的OpenGL程序结构。</li>\n<li>掌握OpenGL提供的基本图形函数，尤其是生成点的函数。</li>\n</ul>\n<h2 id=\"三．实验原理\"><a href=\"#三．实验原理\" class=\"headerlink\" title=\"三．实验原理\"></a>三．实验原理</h2><h4 id=\"1-基本语法\"><a href=\"#1-基本语法\" class=\"headerlink\" title=\"1. 基本语法\"></a>1. 基本语法</h4><p>常用的程序设计语言，如C、C++、Pascal、Fortran和Java等，都支持OpenGL的开发。这里只讨论C版本下OpenGL的语法。<br>OpenGL基本函数均使用gl作为函数名的前缀，如glClearColor()；实用函数则使用glu作为函数名的前缀，如gluSphere()。OpenGL基本常量的名字以GL_开头，如GL_LINE_LOOP；实用常量的名字以GLU_开头，如GLU_FILL。一些函数如glColor*()（定义颜色值），函数名后可以接不同的后缀以支持不同的数据类型和格式。如glColor3b(…)、glColor3d(…)、glColor3f(…)和glColor3bv(…)等，这几个函数在功能上是相似的，只是适用于不同的数据类型和格式，其中3表示该函数带有三个参数，b、d、f分别表示参数的类型是字节型、双精度浮点型和单精度浮点型，v则表示这些参数是以向量形式出现的。<br>为便于移植，OpenGL定义了一些自己的数据类型，如GLfloat、GLvoid，它们其实就是C语言中的float和void。在gl.h文件中可以看到以下定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef float GLfloat;</span><br><span class=\"line\">typedef void GLvoid;</span><br></pre></td></tr></table></figure>\n<p>一些基本的数据类型都有类似的定义项。</p>\n<h4 id=\"2-程序的基本结构\"><a href=\"#2-程序的基本结构\" class=\"headerlink\" title=\"2. 程序的基本结构\"></a>2. 程序的基本结构</h4><p>OpenGL程序的基本结构可分为三个部分：<br><strong>(1) 初始化：</strong> 主要是设置一些OpenGL的状态开关，如颜色模式（RGBA或Alpha）的选择、是否作光照处理（若有的话，还需设置光源的特性）、深度检测、裁剪等。这些状态一般都用函数glEnable(…), glDisable(…)来设置，“…”表示特定的状态。<br><strong>(2) 观察设置：</strong> 设置观察坐标系下的取景模式和取景框位置大小。主要利用了三个函数。</p>\n<ul>\n<li>void glViewport(left,top,right,bottom)：设置在屏幕上的窗口大小，四个参数描述屏幕窗口四个角上的坐标（以像素表示）。</li>\n<li>void glOrtho(left,right,bottom,top,near,far)：设置投影方式为正交投影（平行投影），其取景体积是一个各面均为矩形的六面体。</li>\n<li>void gluPerspective(fovy,aspect,zNear,zFar)：设置投影方式为透视投影，其取景体积是一个截头锥体。</li>\n</ul>\n<p><strong>(3) 程序主体：</strong> 使用OpenGL的库函数构造几何物体对象的数学描述，包括点线面的位置和拓扑关系、几何变换、光照处理等。</p>\n<h4 id=\"3-状态机制\"><a href=\"#3-状态机制\" class=\"headerlink\" title=\"3. 状态机制\"></a>3. 状态机制</h4><p>OpenGL的工作方式是一种状态机制，它可以进行各种状态或模式设置，这些状态或模式在重新改变它们之前一直有效。例如，当前颜色就是一个状态变量，在这个状态改变之前，绘制的每个像素都将使用该颜色，直到当前颜色被设置为其他颜色为止。<br>OpenGL中大量使用了这种状态机制，如颜色模式、投影模式、单双显示缓存区的设置、背景色的设置、光源的位置和特性等。许多状态变量可以通过glEnable()、glDisable()这两个函数来设置成有效或无效状态，如是否设置光照、是否进行深度检测等；在被设置成有效状态之后，绝大部分状态变量都有一个默认值。<br>通常情况下，可以用下列四个函数来获取某个状态变量的值：glGetBooleanv、glGetDouble、glGetFloatv和glGetIntegerv。究竟选择哪个函数应该根据所要获得的返回值的数据类型来决定。还有些状态变量有特殊的查询函数，如glGetLight*、glGetError和glPolygonStipple等。另外，使用glPushAttrib和glPopAttrib函数，可以存储和恢复最近的状态变量的值。只要有可能，都应该使用这些函数，因为它们比其他查询函数的效率更高。</p>\n<h4 id=\"4-OpenGL的坐标系统\"><a href=\"#4-OpenGL的坐标系统\" class=\"headerlink\" title=\"4. OpenGL的坐标系统\"></a>4. OpenGL的坐标系统</h4><p>如下图A.1所示,OpengGL坐标与绘图区坐标关系如下，<br>绘图区的中心点：(0.0,0.0,0.0)<br>绘图区的右上角点：(1.0,1.0,0.0)<br>绘图区的左下角点：(-1.0, 1.0,0.0)<br><img src=\"https://img-blog.csdnimg.cn/20200519185542162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<center>图A.1 OpengGL绘图区对应坐标</center>\n\n\n<h2 id=\"四．实验代码\"><a href=\"#四．实验代码\" class=\"headerlink\" title=\"四．实验代码\"></a>四．实验代码</h2><p>在运行下面实验代码前，请先配置FreeGlut库，这是一个OpenGL程序的支持环境库，具体信息与配置方法请参考： <a href=\"https://blog.csdn.net/wpxu08/article/details/87785547\" target=\"_blank\" rel=\"noopener\">FreeGlut配置简介</a>。之后，学习掌握OpenGL程序创建与运行，具体请参考<a href=\"https://blog.csdn.net/wpxu08/article/details/106226748\" target=\"_blank\" rel=\"noopener\">OpenGL程序创建与运行</a>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;GL/glut.h&gt;</span><br><span class=\"line\">void myDisplay(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tglClearColor(0.0, 0.0, 0.0, 0.0);</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglColor3f (1.0f, 1.0f, 1.0f); </span><br><span class=\"line\">\tglRectf(-0.5f, -0.5f, 0.5f, 0.5f);</span><br><span class=\"line\"></span><br><span class=\"line\">\tglBegin (GL_TRIANGLES);</span><br><span class=\"line\">\tglColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (0.0f, 1.0f);</span><br><span class=\"line\">\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (0.8f, -0.5f);</span><br><span class=\"line\">\tglColor3f (0.0f, 0.0f, 1.0f);   glVertex2f (-0.8f, -0.5f);</span><br><span class=\"line\">\tglEnd ();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglPointSize(3);</span><br><span class=\"line\">\tglBegin (GL_POINTS);</span><br><span class=\"line\">\tglColor3f (1.0f, 0.0f, 0.0f);   glVertex2f (-0.4f, -0.4f);</span><br><span class=\"line\">\tglColor3f (0.0f, 1.0f, 0.0f);   glVertex2f (0.0f, 0.0f);</span><br><span class=\"line\">\tglColor3f (0.0f, 0.0f, 1.0f);   glVertex2f (0.4f, 0.4f);</span><br><span class=\"line\">\tglEnd ();</span><br><span class=\"line\"></span><br><span class=\"line\">\tglFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    glutInit(&amp;argc, argv);</span><br><span class=\"line\">    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</span><br><span class=\"line\">    glutInitWindowPosition(100, 100);</span><br><span class=\"line\">    glutInitWindowSize(400, 400);</span><br><span class=\"line\">    glutCreateWindow(&quot;Hello World!&quot;);</span><br><span class=\"line\">    glutDisplayFunc(&amp;myDisplay);</span><br><span class=\"line\">    glutMainLoop();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该程序的作用是在一个黑色的窗口中央画一个矩形、三角形和三个点，如图A.2（a）所示。下面对主要语句进行说明。<br>首先，需要包含GLUT的头文件：#include &lt;GL/glut.h&gt;。一般，OpenGL程序还要包含&lt;GL/gl.h&gt;和&lt;GL/glu.h&gt;，但GLUT的头文件中已经自动将这两个文件包含了，不必再次包含。<br>然后看main函数。int main(int argc, char *argv[])，这个是带命令行参数的main函数。注意main函数中的各语句，除了最后的return之外，其余全部以glut开头。这种以glut开头的函数都是GLUT工具包所提供的函数。<br>下面对用到的几个函数进行介绍。</p>\n<ul>\n<li>glutInit，对GLUT进行初始化，这个函数必须在其他的GLUT使用之前调用一次。其格式比较固定，一般都是glutInit(&amp;argc, argv)就行。</li>\n<li>glutInitDisplayMode，设置显示方式，其中GLUT_RGB表示使用RGB颜色，与之对应的还有GLUT_INDEX（表示使用索引颜色）。GLUT_SINGLE表示使用单缓冲，与之对应的还有GLUT_DOUBLE（使用双缓冲）。更多信息，以后的实验教程会有介绍。</li>\n<li>glutInitWindowPosition，设置窗口在屏幕中的位置。</li>\n<li>glutInitWindowSize，设置窗口的大小。</li>\n<li>glutCreateWindow，根据前述设置的信息创建窗口。参数将被作为窗口的标题。注意：窗口被创建后，并不立即显示到屏幕上。需要调用glutMainLoop才能看到窗口。</li>\n<li>glutDisplayFunc，设置一个函数，当需要进行画图时，这个函数就会被调用（暂且这样理解）。</li>\n<li>glutMainLoop，进行一个消息循环（现在只需知道这个函数可以显示窗口，并且等待窗口关闭后才会返回）。</li>\n</ul>\n<p>在glutDisplayFunc函数中，我们设置了“当需要画图时，请调用myDisplay函数”。于是myDisplay函数就用来画图。观察myDisplay函数中的三个函数调用，发现它们都以gl开头。这种以gl开头的函数都是OpenGL的标准函数，下面对用到的函数进行介绍。</p>\n<ul>\n<li>glClearColor(0.0, 0.0, 0.0, 0.0) ：将清空颜色设为黑色（思考：为什么会有四个参数？）。</li>\n<li>glClear(GL_COLOR_BUFFER_BIT)：将窗口的背景设置为当前清空颜色。</li>\n<li>glRectf：画一个矩形。四个参数分别表示了位于对角线上的两个点的横、纵坐标。</li>\n<li>(4)glFlush：保证前面的OpenGL命令立即执行（而不是让它们在缓冲区中等待）。</li>\n</ul>\n<h2 id=\"五．实验提高\"><a href=\"#五．实验提高\" class=\"headerlink\" title=\"五．实验提高\"></a>五．实验提高</h2><p>根据示范程序，能否在原有结果基础上添加三条直线组成三角形，结果如图A.2（b）所示？<br><img src=\"https://img-blog.csdnimg.cn/20200519190057132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n <center>（a）示范程序结果</center>   \n\n<p><img src=\"https://img-blog.csdnimg.cn/20200519190227388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dweHUwOA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\">  </p>\n<center>（b）加三角形后的结果</center><br><center>图A.2 实验1</center>"},{"title":"实验2 关系可视化","_content":"\n## 一. 实验目的和要求\n### 1. 了解关系可视化知识，了解和学习散点图、饼图、堆叠柱形图、板块层级图和直方图等常见图表类型；\n### 2. 学习图形语法方式绘图；\n### 3. 学习与巩固R+Illustrator可视化绘图模式。\n## 二. 实验内容\n### 1. 根据《鲜活的数据》第6章6.2.1介绍的方法与提供的数据，在R中绘制基本散点图，并存为PDF文件；\n### 2. 将上一步所得的PDF文件，导入Illustrator，以教材图6-7为模板，完成图6-7，并添上自己的署名。图6-7英文如下图所示，大家提交作品文字部分按中文版处理，图形效果参考英文版。\n![图6-7](http://oty0nwcbq.bkt.clouddn.com/DV_%E5%9B%BE6-7.png)\n\n## 三. 实验报告\n实验报告中的实验过程请根据实验内容结合自己的具体实验过程填写；\n\n实验结果为上图，可以手绘，可以文字描述，也可以将图缩小打印贴上；\n\n实验分析部分可以对整个实验过程进行回顾与总结，可以从以下一些问题角度进行分析：\n- 实验难度与自身水平相比如何？\n- 通过实验有无发现自己有待提高的知识或能力吗？\n- 碰到什么问题？如何解决？\n- 本次实验有何收获或心得？简单介绍下。\n## 附加-实验步骤\n### 1. 下载编程工具R, 推荐用RStudio免费版（free），下载地址：https://www.rstudio.com/products/rstudio/download/；\n### 2. 数据下载地址：http://datasets.flowingdata.com/crimeRatesByState2005.csv。\n### 3. 用R绘图，具体如下：\n#### （1）安装ggplot2包：\n启动RStudio后，菜单栏点击Tools>Install Packages...中输入ggplot2，安装；\n#### （2）新建一个R Script文件；\n#### （4）启用ggplot2包：\n在新建的R Script文件中输入下面代码来启用ggplot2包：\nlibrary(ggplot2)\n将光标放在上面代码所在行，点击菜单Code->Run Select Lines运行本行代码；快捷键Ctrl+Enter;以下每行代码都需运行，不再重复。\n#### （3）数据读取：\n输入以下代码来读取CSV文件数据到crime变量中：\ncrime<-read.csv('c:\\\\Users\\\\...\\\\crimeRatesByState2005.csv',sep=\",\", header=TRUE)\n其中，请将“c:\\\\Users\\\\...\\\\crimeRatesByState2005.csv”改为你自己的文件路径。\n#### （4）数据整理：\n通过以下两行代码来剔除掉华盛顿特区和全美平均值，并将剔除后的数据存入crime2变量中：\ncrime2 <- crime[crime$state != \"District of Columbia\",] \n\ncrime2 <- crime2[crime2$state != \"United States\",] \n#### （5）ggplot2绘图：通过以下代码来绘制：\n##### （i）基本图形：\n以数据集中的murder列为x坐标，burglary为y坐标绘制散点图如下：\nggplot(crime2, aes(x = murder, y = burglary)) +  geom_point()\n##### （ii）增加坐标轴范围：\nggplot(crime2, aes(x = murder, y = burglary)) +geom_point()+  xlim(0, 10)+  ylim(0, 1200)\n##### （iii）增加回归曲线：\nggplot(crime2, aes(x = murder, y = burglary)) +\n  geom_point()+  xlim(0, 10)+  ylim(0, 1200)+ geom_smooth()\n#### （6）保存绘图：\n在R绘图窗口中点击Export->Save as PDF将绘图结果保存为pdf，注意保存选项的Orientation。\n### 4. 用Illustrator来修饰完善：\n将所保存的绘图结果Pdf文件导入到Illustrator中，进行修饰完善，具体过程不再赘述，请自行百度解决。","source":"_posts/DV-Prj2_关系可视化.md","raw":"---\ntitle: 实验2 关系可视化\ntags: [可视化, 地理空间数据]\ncategories: 数据可视化\n---\n\n## 一. 实验目的和要求\n### 1. 了解关系可视化知识，了解和学习散点图、饼图、堆叠柱形图、板块层级图和直方图等常见图表类型；\n### 2. 学习图形语法方式绘图；\n### 3. 学习与巩固R+Illustrator可视化绘图模式。\n## 二. 实验内容\n### 1. 根据《鲜活的数据》第6章6.2.1介绍的方法与提供的数据，在R中绘制基本散点图，并存为PDF文件；\n### 2. 将上一步所得的PDF文件，导入Illustrator，以教材图6-7为模板，完成图6-7，并添上自己的署名。图6-7英文如下图所示，大家提交作品文字部分按中文版处理，图形效果参考英文版。\n![图6-7](http://oty0nwcbq.bkt.clouddn.com/DV_%E5%9B%BE6-7.png)\n\n## 三. 实验报告\n实验报告中的实验过程请根据实验内容结合自己的具体实验过程填写；\n\n实验结果为上图，可以手绘，可以文字描述，也可以将图缩小打印贴上；\n\n实验分析部分可以对整个实验过程进行回顾与总结，可以从以下一些问题角度进行分析：\n- 实验难度与自身水平相比如何？\n- 通过实验有无发现自己有待提高的知识或能力吗？\n- 碰到什么问题？如何解决？\n- 本次实验有何收获或心得？简单介绍下。\n## 附加-实验步骤\n### 1. 下载编程工具R, 推荐用RStudio免费版（free），下载地址：https://www.rstudio.com/products/rstudio/download/；\n### 2. 数据下载地址：http://datasets.flowingdata.com/crimeRatesByState2005.csv。\n### 3. 用R绘图，具体如下：\n#### （1）安装ggplot2包：\n启动RStudio后，菜单栏点击Tools>Install Packages...中输入ggplot2，安装；\n#### （2）新建一个R Script文件；\n#### （4）启用ggplot2包：\n在新建的R Script文件中输入下面代码来启用ggplot2包：\nlibrary(ggplot2)\n将光标放在上面代码所在行，点击菜单Code->Run Select Lines运行本行代码；快捷键Ctrl+Enter;以下每行代码都需运行，不再重复。\n#### （3）数据读取：\n输入以下代码来读取CSV文件数据到crime变量中：\ncrime<-read.csv('c:\\\\Users\\\\...\\\\crimeRatesByState2005.csv',sep=\",\", header=TRUE)\n其中，请将“c:\\\\Users\\\\...\\\\crimeRatesByState2005.csv”改为你自己的文件路径。\n#### （4）数据整理：\n通过以下两行代码来剔除掉华盛顿特区和全美平均值，并将剔除后的数据存入crime2变量中：\ncrime2 <- crime[crime$state != \"District of Columbia\",] \n\ncrime2 <- crime2[crime2$state != \"United States\",] \n#### （5）ggplot2绘图：通过以下代码来绘制：\n##### （i）基本图形：\n以数据集中的murder列为x坐标，burglary为y坐标绘制散点图如下：\nggplot(crime2, aes(x = murder, y = burglary)) +  geom_point()\n##### （ii）增加坐标轴范围：\nggplot(crime2, aes(x = murder, y = burglary)) +geom_point()+  xlim(0, 10)+  ylim(0, 1200)\n##### （iii）增加回归曲线：\nggplot(crime2, aes(x = murder, y = burglary)) +\n  geom_point()+  xlim(0, 10)+  ylim(0, 1200)+ geom_smooth()\n#### （6）保存绘图：\n在R绘图窗口中点击Export->Save as PDF将绘图结果保存为pdf，注意保存选项的Orientation。\n### 4. 用Illustrator来修饰完善：\n将所保存的绘图结果Pdf文件导入到Illustrator中，进行修饰完善，具体过程不再赘述，请自行百度解决。","slug":"DV-Prj2_关系可视化","published":1,"date":"2020-01-19T08:28:10.761Z","updated":"2019-08-18T02:04:22.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers05r000wr0akpzu5boi6","content":"<h2 id=\"一-实验目的和要求\"><a href=\"#一-实验目的和要求\" class=\"headerlink\" title=\"一. 实验目的和要求\"></a>一. 实验目的和要求</h2><h3 id=\"1-了解关系可视化知识，了解和学习散点图、饼图、堆叠柱形图、板块层级图和直方图等常见图表类型；\"><a href=\"#1-了解关系可视化知识，了解和学习散点图、饼图、堆叠柱形图、板块层级图和直方图等常见图表类型；\" class=\"headerlink\" title=\"1. 了解关系可视化知识，了解和学习散点图、饼图、堆叠柱形图、板块层级图和直方图等常见图表类型；\"></a>1. 了解关系可视化知识，了解和学习散点图、饼图、堆叠柱形图、板块层级图和直方图等常见图表类型；</h3><h3 id=\"2-学习图形语法方式绘图；\"><a href=\"#2-学习图形语法方式绘图；\" class=\"headerlink\" title=\"2. 学习图形语法方式绘图；\"></a>2. 学习图形语法方式绘图；</h3><h3 id=\"3-学习与巩固R-Illustrator可视化绘图模式。\"><a href=\"#3-学习与巩固R-Illustrator可视化绘图模式。\" class=\"headerlink\" title=\"3. 学习与巩固R+Illustrator可视化绘图模式。\"></a>3. 学习与巩固R+Illustrator可视化绘图模式。</h3><h2 id=\"二-实验内容\"><a href=\"#二-实验内容\" class=\"headerlink\" title=\"二. 实验内容\"></a>二. 实验内容</h2><h3 id=\"1-根据《鲜活的数据》第6章6-2-1介绍的方法与提供的数据，在R中绘制基本散点图，并存为PDF文件；\"><a href=\"#1-根据《鲜活的数据》第6章6-2-1介绍的方法与提供的数据，在R中绘制基本散点图，并存为PDF文件；\" class=\"headerlink\" title=\"1. 根据《鲜活的数据》第6章6.2.1介绍的方法与提供的数据，在R中绘制基本散点图，并存为PDF文件；\"></a>1. 根据《鲜活的数据》第6章6.2.1介绍的方法与提供的数据，在R中绘制基本散点图，并存为PDF文件；</h3><h3 id=\"2-将上一步所得的PDF文件，导入Illustrator，以教材图6-7为模板，完成图6-7，并添上自己的署名。图6-7英文如下图所示，大家提交作品文字部分按中文版处理，图形效果参考英文版。\"><a href=\"#2-将上一步所得的PDF文件，导入Illustrator，以教材图6-7为模板，完成图6-7，并添上自己的署名。图6-7英文如下图所示，大家提交作品文字部分按中文版处理，图形效果参考英文版。\" class=\"headerlink\" title=\"2. 将上一步所得的PDF文件，导入Illustrator，以教材图6-7为模板，完成图6-7，并添上自己的署名。图6-7英文如下图所示，大家提交作品文字部分按中文版处理，图形效果参考英文版。\"></a>2. 将上一步所得的PDF文件，导入Illustrator，以教材图6-7为模板，完成图6-7，并添上自己的署名。图6-7英文如下图所示，大家提交作品文字部分按中文版处理，图形效果参考英文版。</h3><p><img src=\"http://oty0nwcbq.bkt.clouddn.com/DV_%E5%9B%BE6-7.png\" alt=\"图6-7\"></p>\n<h2 id=\"三-实验报告\"><a href=\"#三-实验报告\" class=\"headerlink\" title=\"三. 实验报告\"></a>三. 实验报告</h2><p>实验报告中的实验过程请根据实验内容结合自己的具体实验过程填写；</p>\n<p>实验结果为上图，可以手绘，可以文字描述，也可以将图缩小打印贴上；</p>\n<p>实验分析部分可以对整个实验过程进行回顾与总结，可以从以下一些问题角度进行分析：</p>\n<ul>\n<li>实验难度与自身水平相比如何？</li>\n<li>通过实验有无发现自己有待提高的知识或能力吗？</li>\n<li>碰到什么问题？如何解决？</li>\n<li>本次实验有何收获或心得？简单介绍下。<h2 id=\"附加-实验步骤\"><a href=\"#附加-实验步骤\" class=\"headerlink\" title=\"附加-实验步骤\"></a>附加-实验步骤</h2><h3 id=\"1-下载编程工具R-推荐用RStudio免费版（free），下载地址：https-www-rstudio-com-products-rstudio-download-；\"><a href=\"#1-下载编程工具R-推荐用RStudio免费版（free），下载地址：https-www-rstudio-com-products-rstudio-download-；\" class=\"headerlink\" title=\"1. 下载编程工具R, 推荐用RStudio免费版（free），下载地址：https://www.rstudio.com/products/rstudio/download/；\"></a>1. 下载编程工具R, 推荐用RStudio免费版（free），下载地址：<a href=\"https://www.rstudio.com/products/rstudio/download/；\" target=\"_blank\" rel=\"noopener\">https://www.rstudio.com/products/rstudio/download/；</a></h3><h3 id=\"2-数据下载地址：http-datasets-flowingdata-com-crimeRatesByState2005-csv。\"><a href=\"#2-数据下载地址：http-datasets-flowingdata-com-crimeRatesByState2005-csv。\" class=\"headerlink\" title=\"2. 数据下载地址：http://datasets.flowingdata.com/crimeRatesByState2005.csv。\"></a>2. 数据下载地址：<a href=\"http://datasets.flowingdata.com/crimeRatesByState2005.csv。\" target=\"_blank\" rel=\"noopener\">http://datasets.flowingdata.com/crimeRatesByState2005.csv。</a></h3><h3 id=\"3-用R绘图，具体如下：\"><a href=\"#3-用R绘图，具体如下：\" class=\"headerlink\" title=\"3. 用R绘图，具体如下：\"></a>3. 用R绘图，具体如下：</h3><h4 id=\"（1）安装ggplot2包：\"><a href=\"#（1）安装ggplot2包：\" class=\"headerlink\" title=\"（1）安装ggplot2包：\"></a>（1）安装ggplot2包：</h4>启动RStudio后，菜单栏点击Tools&gt;Install Packages…中输入ggplot2，安装；<h4 id=\"（2）新建一个R-Script文件；\"><a href=\"#（2）新建一个R-Script文件；\" class=\"headerlink\" title=\"（2）新建一个R Script文件；\"></a>（2）新建一个R Script文件；</h4><h4 id=\"（4）启用ggplot2包：\"><a href=\"#（4）启用ggplot2包：\" class=\"headerlink\" title=\"（4）启用ggplot2包：\"></a>（4）启用ggplot2包：</h4>在新建的R Script文件中输入下面代码来启用ggplot2包：<br>library(ggplot2)<br>将光标放在上面代码所在行，点击菜单Code-&gt;Run Select Lines运行本行代码；快捷键Ctrl+Enter;以下每行代码都需运行，不再重复。<h4 id=\"（3）数据读取：\"><a href=\"#（3）数据读取：\" class=\"headerlink\" title=\"（3）数据读取：\"></a>（3）数据读取：</h4>输入以下代码来读取CSV文件数据到crime变量中：<br>crime&lt;-read.csv(‘c:\\Users\\…\\crimeRatesByState2005.csv’,sep=”,”, header=TRUE)<br>其中，请将“c:\\Users\\…\\crimeRatesByState2005.csv”改为你自己的文件路径。<h4 id=\"（4）数据整理：\"><a href=\"#（4）数据整理：\" class=\"headerlink\" title=\"（4）数据整理：\"></a>（4）数据整理：</h4>通过以下两行代码来剔除掉华盛顿特区和全美平均值，并将剔除后的数据存入crime2变量中：<br>crime2 &lt;- crime[crime$state != “District of Columbia”,] </li>\n</ul>\n<p>crime2 &lt;- crime2[crime2$state != “United States”,] </p>\n<h4 id=\"（5）ggplot2绘图：通过以下代码来绘制：\"><a href=\"#（5）ggplot2绘图：通过以下代码来绘制：\" class=\"headerlink\" title=\"（5）ggplot2绘图：通过以下代码来绘制：\"></a>（5）ggplot2绘图：通过以下代码来绘制：</h4><h5 id=\"（i）基本图形：\"><a href=\"#（i）基本图形：\" class=\"headerlink\" title=\"（i）基本图形：\"></a>（i）基本图形：</h5><p>以数据集中的murder列为x坐标，burglary为y坐标绘制散点图如下：<br>ggplot(crime2, aes(x = murder, y = burglary)) +  geom_point()</p>\n<h5 id=\"（ii）增加坐标轴范围：\"><a href=\"#（ii）增加坐标轴范围：\" class=\"headerlink\" title=\"（ii）增加坐标轴范围：\"></a>（ii）增加坐标轴范围：</h5><p>ggplot(crime2, aes(x = murder, y = burglary)) +geom_point()+  xlim(0, 10)+  ylim(0, 1200)</p>\n<h5 id=\"（iii）增加回归曲线：\"><a href=\"#（iii）增加回归曲线：\" class=\"headerlink\" title=\"（iii）增加回归曲线：\"></a>（iii）增加回归曲线：</h5><p>ggplot(crime2, aes(x = murder, y = burglary)) +<br>  geom_point()+  xlim(0, 10)+  ylim(0, 1200)+ geom_smooth()</p>\n<h4 id=\"（6）保存绘图：\"><a href=\"#（6）保存绘图：\" class=\"headerlink\" title=\"（6）保存绘图：\"></a>（6）保存绘图：</h4><p>在R绘图窗口中点击Export-&gt;Save as PDF将绘图结果保存为pdf，注意保存选项的Orientation。</p>\n<h3 id=\"4-用Illustrator来修饰完善：\"><a href=\"#4-用Illustrator来修饰完善：\" class=\"headerlink\" title=\"4. 用Illustrator来修饰完善：\"></a>4. 用Illustrator来修饰完善：</h3><p>将所保存的绘图结果Pdf文件导入到Illustrator中，进行修饰完善，具体过程不再赘述，请自行百度解决。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-实验目的和要求\"><a href=\"#一-实验目的和要求\" class=\"headerlink\" title=\"一. 实验目的和要求\"></a>一. 实验目的和要求</h2><h3 id=\"1-了解关系可视化知识，了解和学习散点图、饼图、堆叠柱形图、板块层级图和直方图等常见图表类型；\"><a href=\"#1-了解关系可视化知识，了解和学习散点图、饼图、堆叠柱形图、板块层级图和直方图等常见图表类型；\" class=\"headerlink\" title=\"1. 了解关系可视化知识，了解和学习散点图、饼图、堆叠柱形图、板块层级图和直方图等常见图表类型；\"></a>1. 了解关系可视化知识，了解和学习散点图、饼图、堆叠柱形图、板块层级图和直方图等常见图表类型；</h3><h3 id=\"2-学习图形语法方式绘图；\"><a href=\"#2-学习图形语法方式绘图；\" class=\"headerlink\" title=\"2. 学习图形语法方式绘图；\"></a>2. 学习图形语法方式绘图；</h3><h3 id=\"3-学习与巩固R-Illustrator可视化绘图模式。\"><a href=\"#3-学习与巩固R-Illustrator可视化绘图模式。\" class=\"headerlink\" title=\"3. 学习与巩固R+Illustrator可视化绘图模式。\"></a>3. 学习与巩固R+Illustrator可视化绘图模式。</h3><h2 id=\"二-实验内容\"><a href=\"#二-实验内容\" class=\"headerlink\" title=\"二. 实验内容\"></a>二. 实验内容</h2><h3 id=\"1-根据《鲜活的数据》第6章6-2-1介绍的方法与提供的数据，在R中绘制基本散点图，并存为PDF文件；\"><a href=\"#1-根据《鲜活的数据》第6章6-2-1介绍的方法与提供的数据，在R中绘制基本散点图，并存为PDF文件；\" class=\"headerlink\" title=\"1. 根据《鲜活的数据》第6章6.2.1介绍的方法与提供的数据，在R中绘制基本散点图，并存为PDF文件；\"></a>1. 根据《鲜活的数据》第6章6.2.1介绍的方法与提供的数据，在R中绘制基本散点图，并存为PDF文件；</h3><h3 id=\"2-将上一步所得的PDF文件，导入Illustrator，以教材图6-7为模板，完成图6-7，并添上自己的署名。图6-7英文如下图所示，大家提交作品文字部分按中文版处理，图形效果参考英文版。\"><a href=\"#2-将上一步所得的PDF文件，导入Illustrator，以教材图6-7为模板，完成图6-7，并添上自己的署名。图6-7英文如下图所示，大家提交作品文字部分按中文版处理，图形效果参考英文版。\" class=\"headerlink\" title=\"2. 将上一步所得的PDF文件，导入Illustrator，以教材图6-7为模板，完成图6-7，并添上自己的署名。图6-7英文如下图所示，大家提交作品文字部分按中文版处理，图形效果参考英文版。\"></a>2. 将上一步所得的PDF文件，导入Illustrator，以教材图6-7为模板，完成图6-7，并添上自己的署名。图6-7英文如下图所示，大家提交作品文字部分按中文版处理，图形效果参考英文版。</h3><p><img src=\"http://oty0nwcbq.bkt.clouddn.com/DV_%E5%9B%BE6-7.png\" alt=\"图6-7\"></p>\n<h2 id=\"三-实验报告\"><a href=\"#三-实验报告\" class=\"headerlink\" title=\"三. 实验报告\"></a>三. 实验报告</h2><p>实验报告中的实验过程请根据实验内容结合自己的具体实验过程填写；</p>\n<p>实验结果为上图，可以手绘，可以文字描述，也可以将图缩小打印贴上；</p>\n<p>实验分析部分可以对整个实验过程进行回顾与总结，可以从以下一些问题角度进行分析：</p>\n<ul>\n<li>实验难度与自身水平相比如何？</li>\n<li>通过实验有无发现自己有待提高的知识或能力吗？</li>\n<li>碰到什么问题？如何解决？</li>\n<li>本次实验有何收获或心得？简单介绍下。<h2 id=\"附加-实验步骤\"><a href=\"#附加-实验步骤\" class=\"headerlink\" title=\"附加-实验步骤\"></a>附加-实验步骤</h2><h3 id=\"1-下载编程工具R-推荐用RStudio免费版（free），下载地址：https-www-rstudio-com-products-rstudio-download-；\"><a href=\"#1-下载编程工具R-推荐用RStudio免费版（free），下载地址：https-www-rstudio-com-products-rstudio-download-；\" class=\"headerlink\" title=\"1. 下载编程工具R, 推荐用RStudio免费版（free），下载地址：https://www.rstudio.com/products/rstudio/download/；\"></a>1. 下载编程工具R, 推荐用RStudio免费版（free），下载地址：<a href=\"https://www.rstudio.com/products/rstudio/download/；\" target=\"_blank\" rel=\"noopener\">https://www.rstudio.com/products/rstudio/download/；</a></h3><h3 id=\"2-数据下载地址：http-datasets-flowingdata-com-crimeRatesByState2005-csv。\"><a href=\"#2-数据下载地址：http-datasets-flowingdata-com-crimeRatesByState2005-csv。\" class=\"headerlink\" title=\"2. 数据下载地址：http://datasets.flowingdata.com/crimeRatesByState2005.csv。\"></a>2. 数据下载地址：<a href=\"http://datasets.flowingdata.com/crimeRatesByState2005.csv。\" target=\"_blank\" rel=\"noopener\">http://datasets.flowingdata.com/crimeRatesByState2005.csv。</a></h3><h3 id=\"3-用R绘图，具体如下：\"><a href=\"#3-用R绘图，具体如下：\" class=\"headerlink\" title=\"3. 用R绘图，具体如下：\"></a>3. 用R绘图，具体如下：</h3><h4 id=\"（1）安装ggplot2包：\"><a href=\"#（1）安装ggplot2包：\" class=\"headerlink\" title=\"（1）安装ggplot2包：\"></a>（1）安装ggplot2包：</h4>启动RStudio后，菜单栏点击Tools&gt;Install Packages…中输入ggplot2，安装；<h4 id=\"（2）新建一个R-Script文件；\"><a href=\"#（2）新建一个R-Script文件；\" class=\"headerlink\" title=\"（2）新建一个R Script文件；\"></a>（2）新建一个R Script文件；</h4><h4 id=\"（4）启用ggplot2包：\"><a href=\"#（4）启用ggplot2包：\" class=\"headerlink\" title=\"（4）启用ggplot2包：\"></a>（4）启用ggplot2包：</h4>在新建的R Script文件中输入下面代码来启用ggplot2包：<br>library(ggplot2)<br>将光标放在上面代码所在行，点击菜单Code-&gt;Run Select Lines运行本行代码；快捷键Ctrl+Enter;以下每行代码都需运行，不再重复。<h4 id=\"（3）数据读取：\"><a href=\"#（3）数据读取：\" class=\"headerlink\" title=\"（3）数据读取：\"></a>（3）数据读取：</h4>输入以下代码来读取CSV文件数据到crime变量中：<br>crime&lt;-read.csv(‘c:\\Users\\…\\crimeRatesByState2005.csv’,sep=”,”, header=TRUE)<br>其中，请将“c:\\Users\\…\\crimeRatesByState2005.csv”改为你自己的文件路径。<h4 id=\"（4）数据整理：\"><a href=\"#（4）数据整理：\" class=\"headerlink\" title=\"（4）数据整理：\"></a>（4）数据整理：</h4>通过以下两行代码来剔除掉华盛顿特区和全美平均值，并将剔除后的数据存入crime2变量中：<br>crime2 &lt;- crime[crime$state != “District of Columbia”,] </li>\n</ul>\n<p>crime2 &lt;- crime2[crime2$state != “United States”,] </p>\n<h4 id=\"（5）ggplot2绘图：通过以下代码来绘制：\"><a href=\"#（5）ggplot2绘图：通过以下代码来绘制：\" class=\"headerlink\" title=\"（5）ggplot2绘图：通过以下代码来绘制：\"></a>（5）ggplot2绘图：通过以下代码来绘制：</h4><h5 id=\"（i）基本图形：\"><a href=\"#（i）基本图形：\" class=\"headerlink\" title=\"（i）基本图形：\"></a>（i）基本图形：</h5><p>以数据集中的murder列为x坐标，burglary为y坐标绘制散点图如下：<br>ggplot(crime2, aes(x = murder, y = burglary)) +  geom_point()</p>\n<h5 id=\"（ii）增加坐标轴范围：\"><a href=\"#（ii）增加坐标轴范围：\" class=\"headerlink\" title=\"（ii）增加坐标轴范围：\"></a>（ii）增加坐标轴范围：</h5><p>ggplot(crime2, aes(x = murder, y = burglary)) +geom_point()+  xlim(0, 10)+  ylim(0, 1200)</p>\n<h5 id=\"（iii）增加回归曲线：\"><a href=\"#（iii）增加回归曲线：\" class=\"headerlink\" title=\"（iii）增加回归曲线：\"></a>（iii）增加回归曲线：</h5><p>ggplot(crime2, aes(x = murder, y = burglary)) +<br>  geom_point()+  xlim(0, 10)+  ylim(0, 1200)+ geom_smooth()</p>\n<h4 id=\"（6）保存绘图：\"><a href=\"#（6）保存绘图：\" class=\"headerlink\" title=\"（6）保存绘图：\"></a>（6）保存绘图：</h4><p>在R绘图窗口中点击Export-&gt;Save as PDF将绘图结果保存为pdf，注意保存选项的Orientation。</p>\n<h3 id=\"4-用Illustrator来修饰完善：\"><a href=\"#4-用Illustrator来修饰完善：\" class=\"headerlink\" title=\"4. 用Illustrator来修饰完善：\"></a>4. 用Illustrator来修饰完善：</h3><p>将所保存的绘图结果Pdf文件导入到Illustrator中，进行修饰完善，具体过程不再赘述，请自行百度解决。</p>\n"},{"title":"实验3 地理空间数据可视化","_content":"\n## 一. 实验目的和要求\n### 1. 了解地理空间数据可视化知识，了解和学习地理空间数据可视化三种典型可视化方式，即点、线与区域。\n### 2. 学习并掌握获取地图上位置信息的方法。\n### 3. 学习并掌握绘制地图方法，及在地图上加点、线及区域的方法。\n\n## 二. 实验内容\n### 1. 获取自己家乡的地理位置信息；\n### 2. 根据《鲜活的数据》第8章8.2.3介绍的方法与提供的数据，在R中绘制基本地图与散点图，并存为PDF文件；\n### 3. 将上一步所得的PDF文件，导入Illustrator，以教材图8-10为模板，并在图中增加中国的数据，完成图8-10，并添上自己的署名，最终成图请以中文版为参考。图8-10英文版如下图所示：\n![图8-10](http://oty0nwcbq.bkt.clouddn.com/DV_Fig8-10.png)\n\n中文版如下图所示：\n![图8-10](http://oty0nwcbq.bkt.clouddn.com/DV-Fig8-10-cn.png)\n\n再次提醒：最终成图是在参考图8-10的基础上，增加中国的数据。\n\n## 三. 实验报告\n实验报告中的实验过程请根据实验内容结合自己的具体实验过程填写；\n\n实验结果：\n\n（1）自己家乡及其位置信息；\n\n（2）图8-10，可以手绘，可以文字描述，也可以将图缩小打印贴上；\n\n实验分析部分可以对整个实验过程进行回顾与总结，可以从以下一些问题角度进行分析：\n- 实验难度与自身水平相比如何？\n- 通过实验有无发现自己有待提高的知识或能力吗？\n- 碰到什么问题？如何解决？\n- 本次实验有何收获或心得？简单介绍下。","source":"_posts/DV-Prj3_GeographyDataVisualization.md","raw":"---\ntitle: 实验3 地理空间数据可视化\ntags: [可视化, 地理空间数据]\ncategories: 数据可视化\n---\n\n## 一. 实验目的和要求\n### 1. 了解地理空间数据可视化知识，了解和学习地理空间数据可视化三种典型可视化方式，即点、线与区域。\n### 2. 学习并掌握获取地图上位置信息的方法。\n### 3. 学习并掌握绘制地图方法，及在地图上加点、线及区域的方法。\n\n## 二. 实验内容\n### 1. 获取自己家乡的地理位置信息；\n### 2. 根据《鲜活的数据》第8章8.2.3介绍的方法与提供的数据，在R中绘制基本地图与散点图，并存为PDF文件；\n### 3. 将上一步所得的PDF文件，导入Illustrator，以教材图8-10为模板，并在图中增加中国的数据，完成图8-10，并添上自己的署名，最终成图请以中文版为参考。图8-10英文版如下图所示：\n![图8-10](http://oty0nwcbq.bkt.clouddn.com/DV_Fig8-10.png)\n\n中文版如下图所示：\n![图8-10](http://oty0nwcbq.bkt.clouddn.com/DV-Fig8-10-cn.png)\n\n再次提醒：最终成图是在参考图8-10的基础上，增加中国的数据。\n\n## 三. 实验报告\n实验报告中的实验过程请根据实验内容结合自己的具体实验过程填写；\n\n实验结果：\n\n（1）自己家乡及其位置信息；\n\n（2）图8-10，可以手绘，可以文字描述，也可以将图缩小打印贴上；\n\n实验分析部分可以对整个实验过程进行回顾与总结，可以从以下一些问题角度进行分析：\n- 实验难度与自身水平相比如何？\n- 通过实验有无发现自己有待提高的知识或能力吗？\n- 碰到什么问题？如何解决？\n- 本次实验有何收获或心得？简单介绍下。","slug":"DV-Prj3_GeographyDataVisualization","published":1,"date":"2020-01-19T08:28:10.764Z","updated":"2019-08-18T02:04:22.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers05s000zr0akcwstig4y","content":"<h2 id=\"一-实验目的和要求\"><a href=\"#一-实验目的和要求\" class=\"headerlink\" title=\"一. 实验目的和要求\"></a>一. 实验目的和要求</h2><h3 id=\"1-了解地理空间数据可视化知识，了解和学习地理空间数据可视化三种典型可视化方式，即点、线与区域。\"><a href=\"#1-了解地理空间数据可视化知识，了解和学习地理空间数据可视化三种典型可视化方式，即点、线与区域。\" class=\"headerlink\" title=\"1. 了解地理空间数据可视化知识，了解和学习地理空间数据可视化三种典型可视化方式，即点、线与区域。\"></a>1. 了解地理空间数据可视化知识，了解和学习地理空间数据可视化三种典型可视化方式，即点、线与区域。</h3><h3 id=\"2-学习并掌握获取地图上位置信息的方法。\"><a href=\"#2-学习并掌握获取地图上位置信息的方法。\" class=\"headerlink\" title=\"2. 学习并掌握获取地图上位置信息的方法。\"></a>2. 学习并掌握获取地图上位置信息的方法。</h3><h3 id=\"3-学习并掌握绘制地图方法，及在地图上加点、线及区域的方法。\"><a href=\"#3-学习并掌握绘制地图方法，及在地图上加点、线及区域的方法。\" class=\"headerlink\" title=\"3. 学习并掌握绘制地图方法，及在地图上加点、线及区域的方法。\"></a>3. 学习并掌握绘制地图方法，及在地图上加点、线及区域的方法。</h3><h2 id=\"二-实验内容\"><a href=\"#二-实验内容\" class=\"headerlink\" title=\"二. 实验内容\"></a>二. 实验内容</h2><h3 id=\"1-获取自己家乡的地理位置信息；\"><a href=\"#1-获取自己家乡的地理位置信息；\" class=\"headerlink\" title=\"1. 获取自己家乡的地理位置信息；\"></a>1. 获取自己家乡的地理位置信息；</h3><h3 id=\"2-根据《鲜活的数据》第8章8-2-3介绍的方法与提供的数据，在R中绘制基本地图与散点图，并存为PDF文件；\"><a href=\"#2-根据《鲜活的数据》第8章8-2-3介绍的方法与提供的数据，在R中绘制基本地图与散点图，并存为PDF文件；\" class=\"headerlink\" title=\"2. 根据《鲜活的数据》第8章8.2.3介绍的方法与提供的数据，在R中绘制基本地图与散点图，并存为PDF文件；\"></a>2. 根据《鲜活的数据》第8章8.2.3介绍的方法与提供的数据，在R中绘制基本地图与散点图，并存为PDF文件；</h3><h3 id=\"3-将上一步所得的PDF文件，导入Illustrator，以教材图8-10为模板，并在图中增加中国的数据，完成图8-10，并添上自己的署名，最终成图请以中文版为参考。图8-10英文版如下图所示：\"><a href=\"#3-将上一步所得的PDF文件，导入Illustrator，以教材图8-10为模板，并在图中增加中国的数据，完成图8-10，并添上自己的署名，最终成图请以中文版为参考。图8-10英文版如下图所示：\" class=\"headerlink\" title=\"3. 将上一步所得的PDF文件，导入Illustrator，以教材图8-10为模板，并在图中增加中国的数据，完成图8-10，并添上自己的署名，最终成图请以中文版为参考。图8-10英文版如下图所示：\"></a>3. 将上一步所得的PDF文件，导入Illustrator，以教材图8-10为模板，并在图中增加中国的数据，完成图8-10，并添上自己的署名，最终成图请以中文版为参考。图8-10英文版如下图所示：</h3><p><img src=\"http://oty0nwcbq.bkt.clouddn.com/DV_Fig8-10.png\" alt=\"图8-10\"></p>\n<p>中文版如下图所示：<br><img src=\"http://oty0nwcbq.bkt.clouddn.com/DV-Fig8-10-cn.png\" alt=\"图8-10\"></p>\n<p>再次提醒：最终成图是在参考图8-10的基础上，增加中国的数据。</p>\n<h2 id=\"三-实验报告\"><a href=\"#三-实验报告\" class=\"headerlink\" title=\"三. 实验报告\"></a>三. 实验报告</h2><p>实验报告中的实验过程请根据实验内容结合自己的具体实验过程填写；</p>\n<p>实验结果：</p>\n<p>（1）自己家乡及其位置信息；</p>\n<p>（2）图8-10，可以手绘，可以文字描述，也可以将图缩小打印贴上；</p>\n<p>实验分析部分可以对整个实验过程进行回顾与总结，可以从以下一些问题角度进行分析：</p>\n<ul>\n<li>实验难度与自身水平相比如何？</li>\n<li>通过实验有无发现自己有待提高的知识或能力吗？</li>\n<li>碰到什么问题？如何解决？</li>\n<li>本次实验有何收获或心得？简单介绍下。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-实验目的和要求\"><a href=\"#一-实验目的和要求\" class=\"headerlink\" title=\"一. 实验目的和要求\"></a>一. 实验目的和要求</h2><h3 id=\"1-了解地理空间数据可视化知识，了解和学习地理空间数据可视化三种典型可视化方式，即点、线与区域。\"><a href=\"#1-了解地理空间数据可视化知识，了解和学习地理空间数据可视化三种典型可视化方式，即点、线与区域。\" class=\"headerlink\" title=\"1. 了解地理空间数据可视化知识，了解和学习地理空间数据可视化三种典型可视化方式，即点、线与区域。\"></a>1. 了解地理空间数据可视化知识，了解和学习地理空间数据可视化三种典型可视化方式，即点、线与区域。</h3><h3 id=\"2-学习并掌握获取地图上位置信息的方法。\"><a href=\"#2-学习并掌握获取地图上位置信息的方法。\" class=\"headerlink\" title=\"2. 学习并掌握获取地图上位置信息的方法。\"></a>2. 学习并掌握获取地图上位置信息的方法。</h3><h3 id=\"3-学习并掌握绘制地图方法，及在地图上加点、线及区域的方法。\"><a href=\"#3-学习并掌握绘制地图方法，及在地图上加点、线及区域的方法。\" class=\"headerlink\" title=\"3. 学习并掌握绘制地图方法，及在地图上加点、线及区域的方法。\"></a>3. 学习并掌握绘制地图方法，及在地图上加点、线及区域的方法。</h3><h2 id=\"二-实验内容\"><a href=\"#二-实验内容\" class=\"headerlink\" title=\"二. 实验内容\"></a>二. 实验内容</h2><h3 id=\"1-获取自己家乡的地理位置信息；\"><a href=\"#1-获取自己家乡的地理位置信息；\" class=\"headerlink\" title=\"1. 获取自己家乡的地理位置信息；\"></a>1. 获取自己家乡的地理位置信息；</h3><h3 id=\"2-根据《鲜活的数据》第8章8-2-3介绍的方法与提供的数据，在R中绘制基本地图与散点图，并存为PDF文件；\"><a href=\"#2-根据《鲜活的数据》第8章8-2-3介绍的方法与提供的数据，在R中绘制基本地图与散点图，并存为PDF文件；\" class=\"headerlink\" title=\"2. 根据《鲜活的数据》第8章8.2.3介绍的方法与提供的数据，在R中绘制基本地图与散点图，并存为PDF文件；\"></a>2. 根据《鲜活的数据》第8章8.2.3介绍的方法与提供的数据，在R中绘制基本地图与散点图，并存为PDF文件；</h3><h3 id=\"3-将上一步所得的PDF文件，导入Illustrator，以教材图8-10为模板，并在图中增加中国的数据，完成图8-10，并添上自己的署名，最终成图请以中文版为参考。图8-10英文版如下图所示：\"><a href=\"#3-将上一步所得的PDF文件，导入Illustrator，以教材图8-10为模板，并在图中增加中国的数据，完成图8-10，并添上自己的署名，最终成图请以中文版为参考。图8-10英文版如下图所示：\" class=\"headerlink\" title=\"3. 将上一步所得的PDF文件，导入Illustrator，以教材图8-10为模板，并在图中增加中国的数据，完成图8-10，并添上自己的署名，最终成图请以中文版为参考。图8-10英文版如下图所示：\"></a>3. 将上一步所得的PDF文件，导入Illustrator，以教材图8-10为模板，并在图中增加中国的数据，完成图8-10，并添上自己的署名，最终成图请以中文版为参考。图8-10英文版如下图所示：</h3><p><img src=\"http://oty0nwcbq.bkt.clouddn.com/DV_Fig8-10.png\" alt=\"图8-10\"></p>\n<p>中文版如下图所示：<br><img src=\"http://oty0nwcbq.bkt.clouddn.com/DV-Fig8-10-cn.png\" alt=\"图8-10\"></p>\n<p>再次提醒：最终成图是在参考图8-10的基础上，增加中国的数据。</p>\n<h2 id=\"三-实验报告\"><a href=\"#三-实验报告\" class=\"headerlink\" title=\"三. 实验报告\"></a>三. 实验报告</h2><p>实验报告中的实验过程请根据实验内容结合自己的具体实验过程填写；</p>\n<p>实验结果：</p>\n<p>（1）自己家乡及其位置信息；</p>\n<p>（2）图8-10，可以手绘，可以文字描述，也可以将图缩小打印贴上；</p>\n<p>实验分析部分可以对整个实验过程进行回顾与总结，可以从以下一些问题角度进行分析：</p>\n<ul>\n<li>实验难度与自身水平相比如何？</li>\n<li>通过实验有无发现自己有待提高的知识或能力吗？</li>\n<li>碰到什么问题？如何解决？</li>\n<li>本次实验有何收获或心得？简单介绍下。</li>\n</ul>\n"},{"title":"实验1 时间趋势可视化","_content":"\n## 一. 实验目的\n### 1. 了解时间趋势可视化知识，学习与掌握柱状图的生成方法；\n### 2. 学习并掌握R+Illustrator可视化绘图模式。\n## 二. 实验内容\n### 1. 根据《鲜活的数据》第４章4.2.1提供的数据，在R中绘制柱状图，并存为PDF文件；\n### 2. 将上一步所得的PDF文件，导入Illustrator，参考教材图4-5样图，对其修改与修饰，并添上自己的署名。图4-5英文版如下图所示：\n>注意：pdf文件请按“序号_姓名”格式命名，以便于查找与定位。\n\n![图4-5](http://oty0nwcbq.bkt.clouddn.com/DV_Fig4-5.png)\n","source":"_posts/DV-Prj1_时间趋势可视化.md","raw":"---\ntitle: 实验1 时间趋势可视化\ntags: [可视化, 时间趋势]\ncategories: 数据可视化\n---\n\n## 一. 实验目的\n### 1. 了解时间趋势可视化知识，学习与掌握柱状图的生成方法；\n### 2. 学习并掌握R+Illustrator可视化绘图模式。\n## 二. 实验内容\n### 1. 根据《鲜活的数据》第４章4.2.1提供的数据，在R中绘制柱状图，并存为PDF文件；\n### 2. 将上一步所得的PDF文件，导入Illustrator，参考教材图4-5样图，对其修改与修饰，并添上自己的署名。图4-5英文版如下图所示：\n>注意：pdf文件请按“序号_姓名”格式命名，以便于查找与定位。\n\n![图4-5](http://oty0nwcbq.bkt.clouddn.com/DV_Fig4-5.png)\n","slug":"DV-Prj1_时间趋势可视化","published":1,"date":"2020-01-19T08:28:10.758Z","updated":"2019-08-18T02:04:22.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers05v0014r0akvvk8sh8z","content":"<h2 id=\"一-实验目的\"><a href=\"#一-实验目的\" class=\"headerlink\" title=\"一. 实验目的\"></a>一. 实验目的</h2><h3 id=\"1-了解时间趋势可视化知识，学习与掌握柱状图的生成方法；\"><a href=\"#1-了解时间趋势可视化知识，学习与掌握柱状图的生成方法；\" class=\"headerlink\" title=\"1. 了解时间趋势可视化知识，学习与掌握柱状图的生成方法；\"></a>1. 了解时间趋势可视化知识，学习与掌握柱状图的生成方法；</h3><h3 id=\"2-学习并掌握R-Illustrator可视化绘图模式。\"><a href=\"#2-学习并掌握R-Illustrator可视化绘图模式。\" class=\"headerlink\" title=\"2. 学习并掌握R+Illustrator可视化绘图模式。\"></a>2. 学习并掌握R+Illustrator可视化绘图模式。</h3><h2 id=\"二-实验内容\"><a href=\"#二-实验内容\" class=\"headerlink\" title=\"二. 实验内容\"></a>二. 实验内容</h2><h3 id=\"1-根据《鲜活的数据》第４章4-2-1提供的数据，在R中绘制柱状图，并存为PDF文件；\"><a href=\"#1-根据《鲜活的数据》第４章4-2-1提供的数据，在R中绘制柱状图，并存为PDF文件；\" class=\"headerlink\" title=\"1. 根据《鲜活的数据》第４章4.2.1提供的数据，在R中绘制柱状图，并存为PDF文件；\"></a>1. 根据《鲜活的数据》第４章4.2.1提供的数据，在R中绘制柱状图，并存为PDF文件；</h3><h3 id=\"2-将上一步所得的PDF文件，导入Illustrator，参考教材图4-5样图，对其修改与修饰，并添上自己的署名。图4-5英文版如下图所示：\"><a href=\"#2-将上一步所得的PDF文件，导入Illustrator，参考教材图4-5样图，对其修改与修饰，并添上自己的署名。图4-5英文版如下图所示：\" class=\"headerlink\" title=\"2. 将上一步所得的PDF文件，导入Illustrator，参考教材图4-5样图，对其修改与修饰，并添上自己的署名。图4-5英文版如下图所示：\"></a>2. 将上一步所得的PDF文件，导入Illustrator，参考教材图4-5样图，对其修改与修饰，并添上自己的署名。图4-5英文版如下图所示：</h3><blockquote>\n<p>注意：pdf文件请按“序号_姓名”格式命名，以便于查找与定位。</p>\n</blockquote>\n<p><img src=\"http://oty0nwcbq.bkt.clouddn.com/DV_Fig4-5.png\" alt=\"图4-5\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-实验目的\"><a href=\"#一-实验目的\" class=\"headerlink\" title=\"一. 实验目的\"></a>一. 实验目的</h2><h3 id=\"1-了解时间趋势可视化知识，学习与掌握柱状图的生成方法；\"><a href=\"#1-了解时间趋势可视化知识，学习与掌握柱状图的生成方法；\" class=\"headerlink\" title=\"1. 了解时间趋势可视化知识，学习与掌握柱状图的生成方法；\"></a>1. 了解时间趋势可视化知识，学习与掌握柱状图的生成方法；</h3><h3 id=\"2-学习并掌握R-Illustrator可视化绘图模式。\"><a href=\"#2-学习并掌握R-Illustrator可视化绘图模式。\" class=\"headerlink\" title=\"2. 学习并掌握R+Illustrator可视化绘图模式。\"></a>2. 学习并掌握R+Illustrator可视化绘图模式。</h3><h2 id=\"二-实验内容\"><a href=\"#二-实验内容\" class=\"headerlink\" title=\"二. 实验内容\"></a>二. 实验内容</h2><h3 id=\"1-根据《鲜活的数据》第４章4-2-1提供的数据，在R中绘制柱状图，并存为PDF文件；\"><a href=\"#1-根据《鲜活的数据》第４章4-2-1提供的数据，在R中绘制柱状图，并存为PDF文件；\" class=\"headerlink\" title=\"1. 根据《鲜活的数据》第４章4.2.1提供的数据，在R中绘制柱状图，并存为PDF文件；\"></a>1. 根据《鲜活的数据》第４章4.2.1提供的数据，在R中绘制柱状图，并存为PDF文件；</h3><h3 id=\"2-将上一步所得的PDF文件，导入Illustrator，参考教材图4-5样图，对其修改与修饰，并添上自己的署名。图4-5英文版如下图所示：\"><a href=\"#2-将上一步所得的PDF文件，导入Illustrator，参考教材图4-5样图，对其修改与修饰，并添上自己的署名。图4-5英文版如下图所示：\" class=\"headerlink\" title=\"2. 将上一步所得的PDF文件，导入Illustrator，参考教材图4-5样图，对其修改与修饰，并添上自己的署名。图4-5英文版如下图所示：\"></a>2. 将上一步所得的PDF文件，导入Illustrator，参考教材图4-5样图，对其修改与修饰，并添上自己的署名。图4-5英文版如下图所示：</h3><blockquote>\n<p>注意：pdf文件请按“序号_姓名”格式命名，以便于查找与定位。</p>\n</blockquote>\n<p><img src=\"http://oty0nwcbq.bkt.clouddn.com/DV_Fig4-5.png\" alt=\"图4-5\"></p>\n"},{"title":"实验4 个人大学数据可视化","_content":"\n## 一. 实验目的和要求\n### 1. 复习前述可视化知识和方法。\n### 2. 综合应用前面所学可视化知识和方法，对大学学习与生活有关数据进行可视化。\n\n## 二. 实验内容\n### 1. 将自己9门专业主干课程成绩可视化：高级语言程序设计、离散数学、数据结构、计算机组成原理、操作系统原理、计算机网络、数据库系统原理、编译原理、软件工程；\n### 2. 将自己的前三年综合积分及其名次可视化；\n### 3. 总结自己的专业技能与其它技能，并根据技能水平对其可视化。技能水平建议分为一般，熟练，精通，专家四种：\n### 4. 回顾上大学至今自已去过的地方，将其可视化；\n### 5. 根据以上4方面的信息，制作一个简单的个人简历,打印稿下次上课前提交，电子稿提交到雨课堂。\n## 三. 实验报告\n实验报告中的实验过程请根据实验内容结合自己的具体实验过程填写；\n\n实验结果：\n\n简单的个人简历，可以手绘，可以文字描述，也可以将图缩小打印贴上；\n\n实验分析部分可以对整个实验过程进行回顾与总结，可以从以下一些问题角度进行分析：\n- 实验难度与自身水平相比如何？\n- 通过实验有无发现自己有待提高的知识或能力吗？\n- 碰到什么问题？如何解决？\n- 本次实验有何收获或心得？简单介绍下。","source":"_posts/DV-Prj4_UniversityStudyVisualization.md","raw":"---\ntitle: 实验4 个人大学数据可视化\ntags: [可视化]\ncategories: 数据可视化\n---\n\n## 一. 实验目的和要求\n### 1. 复习前述可视化知识和方法。\n### 2. 综合应用前面所学可视化知识和方法，对大学学习与生活有关数据进行可视化。\n\n## 二. 实验内容\n### 1. 将自己9门专业主干课程成绩可视化：高级语言程序设计、离散数学、数据结构、计算机组成原理、操作系统原理、计算机网络、数据库系统原理、编译原理、软件工程；\n### 2. 将自己的前三年综合积分及其名次可视化；\n### 3. 总结自己的专业技能与其它技能，并根据技能水平对其可视化。技能水平建议分为一般，熟练，精通，专家四种：\n### 4. 回顾上大学至今自已去过的地方，将其可视化；\n### 5. 根据以上4方面的信息，制作一个简单的个人简历,打印稿下次上课前提交，电子稿提交到雨课堂。\n## 三. 实验报告\n实验报告中的实验过程请根据实验内容结合自己的具体实验过程填写；\n\n实验结果：\n\n简单的个人简历，可以手绘，可以文字描述，也可以将图缩小打印贴上；\n\n实验分析部分可以对整个实验过程进行回顾与总结，可以从以下一些问题角度进行分析：\n- 实验难度与自身水平相比如何？\n- 通过实验有无发现自己有待提高的知识或能力吗？\n- 碰到什么问题？如何解决？\n- 本次实验有何收获或心得？简单介绍下。","slug":"DV-Prj4_UniversityStudyVisualization","published":1,"date":"2020-01-19T08:28:10.768Z","updated":"2019-08-18T02:04:22.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers05w0017r0akmhuhlqc5","content":"<h2 id=\"一-实验目的和要求\"><a href=\"#一-实验目的和要求\" class=\"headerlink\" title=\"一. 实验目的和要求\"></a>一. 实验目的和要求</h2><h3 id=\"1-复习前述可视化知识和方法。\"><a href=\"#1-复习前述可视化知识和方法。\" class=\"headerlink\" title=\"1. 复习前述可视化知识和方法。\"></a>1. 复习前述可视化知识和方法。</h3><h3 id=\"2-综合应用前面所学可视化知识和方法，对大学学习与生活有关数据进行可视化。\"><a href=\"#2-综合应用前面所学可视化知识和方法，对大学学习与生活有关数据进行可视化。\" class=\"headerlink\" title=\"2. 综合应用前面所学可视化知识和方法，对大学学习与生活有关数据进行可视化。\"></a>2. 综合应用前面所学可视化知识和方法，对大学学习与生活有关数据进行可视化。</h3><h2 id=\"二-实验内容\"><a href=\"#二-实验内容\" class=\"headerlink\" title=\"二. 实验内容\"></a>二. 实验内容</h2><h3 id=\"1-将自己9门专业主干课程成绩可视化：高级语言程序设计、离散数学、数据结构、计算机组成原理、操作系统原理、计算机网络、数据库系统原理、编译原理、软件工程；\"><a href=\"#1-将自己9门专业主干课程成绩可视化：高级语言程序设计、离散数学、数据结构、计算机组成原理、操作系统原理、计算机网络、数据库系统原理、编译原理、软件工程；\" class=\"headerlink\" title=\"1. 将自己9门专业主干课程成绩可视化：高级语言程序设计、离散数学、数据结构、计算机组成原理、操作系统原理、计算机网络、数据库系统原理、编译原理、软件工程；\"></a>1. 将自己9门专业主干课程成绩可视化：高级语言程序设计、离散数学、数据结构、计算机组成原理、操作系统原理、计算机网络、数据库系统原理、编译原理、软件工程；</h3><h3 id=\"2-将自己的前三年综合积分及其名次可视化；\"><a href=\"#2-将自己的前三年综合积分及其名次可视化；\" class=\"headerlink\" title=\"2. 将自己的前三年综合积分及其名次可视化；\"></a>2. 将自己的前三年综合积分及其名次可视化；</h3><h3 id=\"3-总结自己的专业技能与其它技能，并根据技能水平对其可视化。技能水平建议分为一般，熟练，精通，专家四种：\"><a href=\"#3-总结自己的专业技能与其它技能，并根据技能水平对其可视化。技能水平建议分为一般，熟练，精通，专家四种：\" class=\"headerlink\" title=\"3. 总结自己的专业技能与其它技能，并根据技能水平对其可视化。技能水平建议分为一般，熟练，精通，专家四种：\"></a>3. 总结自己的专业技能与其它技能，并根据技能水平对其可视化。技能水平建议分为一般，熟练，精通，专家四种：</h3><h3 id=\"4-回顾上大学至今自已去过的地方，将其可视化；\"><a href=\"#4-回顾上大学至今自已去过的地方，将其可视化；\" class=\"headerlink\" title=\"4. 回顾上大学至今自已去过的地方，将其可视化；\"></a>4. 回顾上大学至今自已去过的地方，将其可视化；</h3><h3 id=\"5-根据以上4方面的信息，制作一个简单的个人简历-打印稿下次上课前提交，电子稿提交到雨课堂。\"><a href=\"#5-根据以上4方面的信息，制作一个简单的个人简历-打印稿下次上课前提交，电子稿提交到雨课堂。\" class=\"headerlink\" title=\"5. 根据以上4方面的信息，制作一个简单的个人简历,打印稿下次上课前提交，电子稿提交到雨课堂。\"></a>5. 根据以上4方面的信息，制作一个简单的个人简历,打印稿下次上课前提交，电子稿提交到雨课堂。</h3><h2 id=\"三-实验报告\"><a href=\"#三-实验报告\" class=\"headerlink\" title=\"三. 实验报告\"></a>三. 实验报告</h2><p>实验报告中的实验过程请根据实验内容结合自己的具体实验过程填写；</p>\n<p>实验结果：</p>\n<p>简单的个人简历，可以手绘，可以文字描述，也可以将图缩小打印贴上；</p>\n<p>实验分析部分可以对整个实验过程进行回顾与总结，可以从以下一些问题角度进行分析：</p>\n<ul>\n<li>实验难度与自身水平相比如何？</li>\n<li>通过实验有无发现自己有待提高的知识或能力吗？</li>\n<li>碰到什么问题？如何解决？</li>\n<li>本次实验有何收获或心得？简单介绍下。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-实验目的和要求\"><a href=\"#一-实验目的和要求\" class=\"headerlink\" title=\"一. 实验目的和要求\"></a>一. 实验目的和要求</h2><h3 id=\"1-复习前述可视化知识和方法。\"><a href=\"#1-复习前述可视化知识和方法。\" class=\"headerlink\" title=\"1. 复习前述可视化知识和方法。\"></a>1. 复习前述可视化知识和方法。</h3><h3 id=\"2-综合应用前面所学可视化知识和方法，对大学学习与生活有关数据进行可视化。\"><a href=\"#2-综合应用前面所学可视化知识和方法，对大学学习与生活有关数据进行可视化。\" class=\"headerlink\" title=\"2. 综合应用前面所学可视化知识和方法，对大学学习与生活有关数据进行可视化。\"></a>2. 综合应用前面所学可视化知识和方法，对大学学习与生活有关数据进行可视化。</h3><h2 id=\"二-实验内容\"><a href=\"#二-实验内容\" class=\"headerlink\" title=\"二. 实验内容\"></a>二. 实验内容</h2><h3 id=\"1-将自己9门专业主干课程成绩可视化：高级语言程序设计、离散数学、数据结构、计算机组成原理、操作系统原理、计算机网络、数据库系统原理、编译原理、软件工程；\"><a href=\"#1-将自己9门专业主干课程成绩可视化：高级语言程序设计、离散数学、数据结构、计算机组成原理、操作系统原理、计算机网络、数据库系统原理、编译原理、软件工程；\" class=\"headerlink\" title=\"1. 将自己9门专业主干课程成绩可视化：高级语言程序设计、离散数学、数据结构、计算机组成原理、操作系统原理、计算机网络、数据库系统原理、编译原理、软件工程；\"></a>1. 将自己9门专业主干课程成绩可视化：高级语言程序设计、离散数学、数据结构、计算机组成原理、操作系统原理、计算机网络、数据库系统原理、编译原理、软件工程；</h3><h3 id=\"2-将自己的前三年综合积分及其名次可视化；\"><a href=\"#2-将自己的前三年综合积分及其名次可视化；\" class=\"headerlink\" title=\"2. 将自己的前三年综合积分及其名次可视化；\"></a>2. 将自己的前三年综合积分及其名次可视化；</h3><h3 id=\"3-总结自己的专业技能与其它技能，并根据技能水平对其可视化。技能水平建议分为一般，熟练，精通，专家四种：\"><a href=\"#3-总结自己的专业技能与其它技能，并根据技能水平对其可视化。技能水平建议分为一般，熟练，精通，专家四种：\" class=\"headerlink\" title=\"3. 总结自己的专业技能与其它技能，并根据技能水平对其可视化。技能水平建议分为一般，熟练，精通，专家四种：\"></a>3. 总结自己的专业技能与其它技能，并根据技能水平对其可视化。技能水平建议分为一般，熟练，精通，专家四种：</h3><h3 id=\"4-回顾上大学至今自已去过的地方，将其可视化；\"><a href=\"#4-回顾上大学至今自已去过的地方，将其可视化；\" class=\"headerlink\" title=\"4. 回顾上大学至今自已去过的地方，将其可视化；\"></a>4. 回顾上大学至今自已去过的地方，将其可视化；</h3><h3 id=\"5-根据以上4方面的信息，制作一个简单的个人简历-打印稿下次上课前提交，电子稿提交到雨课堂。\"><a href=\"#5-根据以上4方面的信息，制作一个简单的个人简历-打印稿下次上课前提交，电子稿提交到雨课堂。\" class=\"headerlink\" title=\"5. 根据以上4方面的信息，制作一个简单的个人简历,打印稿下次上课前提交，电子稿提交到雨课堂。\"></a>5. 根据以上4方面的信息，制作一个简单的个人简历,打印稿下次上课前提交，电子稿提交到雨课堂。</h3><h2 id=\"三-实验报告\"><a href=\"#三-实验报告\" class=\"headerlink\" title=\"三. 实验报告\"></a>三. 实验报告</h2><p>实验报告中的实验过程请根据实验内容结合自己的具体实验过程填写；</p>\n<p>实验结果：</p>\n<p>简单的个人简历，可以手绘，可以文字描述，也可以将图缩小打印贴上；</p>\n<p>实验分析部分可以对整个实验过程进行回顾与总结，可以从以下一些问题角度进行分析：</p>\n<ul>\n<li>实验难度与自身水平相比如何？</li>\n<li>通过实验有无发现自己有待提高的知识或能力吗？</li>\n<li>碰到什么问题？如何解决？</li>\n<li>本次实验有何收获或心得？简单介绍下。</li>\n</ul>\n"},{"title":"个人博客搭建备忘录","_content":"\n我的博客最开始是在博客园上，后面转到CSDN.因为CSDN的审核机制感觉不好，因此趁着今年国庆搭建了一个独立博客。现在将搭建过程记录下来，供自己以后备忘，同时也供有兴趣的读者参考。\n\n独立博客搭建过程按步骤可分为三步：（1）博客网站构建；（2）发布到托管网站；（3）自定义域名绑定。其中，第3步非必须，只针对有自定义域名情形。\n## 一. 博客网站构建\n根据自己的学习与了解，目前通过GitHub来搭建个人博客，可以有两种常见的方式：Jekyll和Hexo。下面对这两种方式分别简单介绍。\n### 1. Jekyll方式\n#### (1) 拉取博客模板\n到GitHub上fork拉取某个Jekyll类型博客模板的库，例如https://github.com/xudailong/xudailong.github.io；\n#### (2) 博客名称修改\n点击页面中上部Insights旁边的Settings，进入设置页面，修改库名为；xxx.github.io，其中xxx为你的GitHub用户名，当你在浏览器的新窗口输入：xxx.github.io时，应该能就能访问到这个博客了，只是此时这个博客里面显示内容和xudailong.github.io内容一样。\n#### (3) 博客内容修改\n##### （i）博客主题修改\n主要是在_config.yml文件中，可以对照原有文件修改；\n##### （ii）博客文章修改\n_posts主要用来放博客文章，因此可以根据自己要求，删除无关文章，并添加自己的文章。这里文章对应的文件为markdown文件格式，文件命名为时间加标题，如2015-02-12-create-my-blog-with-jekyll.md。\n#### 说明\n- Jeklly 是什么 ?\nJekyll从核心上来说是一个文本转换引擎。该系统内部的工作原理是：你输入一些用自己喜爱的标记语言格式书写的文本，可以是Markdown、Textile或纯粹的HTML，它将这些文本混合后放入一个或一整套页面布局当中。在整个过程中，你可以自行决定你的站点URL的模式、以及哪些数据将被显示在页面中，等等。这一切都将通过严格的文本编辑完成，而生成的Web界面则是最终的产品。\n- github pages与jeklly关系\nJekyll is the engine behind GitHub Pages.\nEvery GitHub Page is run through Jekyll when you push content to a specially named branch within your repository.\n即：提交到github-pages的内容会经过jeklly处理，转换为静态的html，前期是结构必须符合jeklly的要求。\n- Jeklly是否一定要在本地安装 ?\n本地安装目的是为了方便调试问题，所以不是必须的，安装比较繁琐。推荐：找一个满意的模板，clone下来简单修改，很少需要在本地调试。如需要本地安装，请参考：https://643435675.github.io/2015/02/15/create-my-blog-with-jekyll/\n\n### 2. Hexo方式\n#### (1) 安装工作环境\n- 安装node 到Node.js官网(https://nodejs.org/en/)下载相应平台的最新版本，一路安装即可；\n- 安装hexo\n使用以下命令安装hexo到全局\n$ npm install -g hexo\n然后输入命令hexo -v显示hexo的版本号即为安装成功。\n#### (2) 博客文件夹初始化\n新建一个文件夹为博客网站所在文件夹（如Blog），然后进入Blog目录，下面所有的命令行操作都是在这个文件夹下进行的。用下面的命令初始化该文件夹，并生成一篇“hello word”的文章在\\source\\_posts文件夹下：\n$ hexo init\n#### (3) 生成静态页面\n执行以下命令把文章编译为静态页面：\n$ hexo generate\n#### (4) 生成静态页面\n执行以下命令把文章编译为静态页面，生成在public中的html文件：\n$ hexo generate\n#### (5) 本地启动\n执行以下命令，本地启动服务，在浏览器中输入http://localhost:4000/查看生成的页面效果。如果不成功，可以换一个端口试试，如5000。另外，可以在命令行窗口用“netstat -an”命令查询端口占用情况。\n$ hexo server -p 5000\n## 二. 发布到托管网站\n### 1. 发布到GitHub/Gitee/Coding\n可以通过[GitHub Desktop工具](https://desktop.github.com/)来发布与同步。\n### 2. 发布到七牛云\n可以通过[七牛云的同步工具](https://github.com/qiniu/QSunSync)来发布与同步。\n## 三. 自定义域名绑定\n### 1. 购买域名\n- [GoDaddy](https://sg.godaddy.com/zh/)，新加坡，可以使用支付宝;\n- [DNSPod](https://www.dnspod.cn/)，腾讯平台。\n还有许多其他平台，不一一列举。\n### 2. GitHub设置自定义域名\n点击GitHub页面中上部Insights旁边的Settings，进入设置页面，修改Custom domain为你购买的域名。\n### 3. 域名解析设置\n如果是在[GoDaddy](https://sg.godaddy.com/zh/)上购买的域名，可以直接在该网站内设置，也可以用[DNSPod](https://www.dnspod.cn/)来设置，设置方法请参考：https://www.jianshu.com/p/05289a4bc8b2\n\n## 参考文献\n- Github搭建个人博客, https://blog.csdn.net/xudailong_blog/article/details/78762262\n- hexo VS jekyll, https://blog.csdn.net/scythe666/article/details/51956821#cmid=212488\n- Hexo博客系列（六）：部署到七牛, http://www.isetsuna.com/hexo/deploy-qiniu/\n- 利用7牛云搭建hexo个人博客, https://blog.csdn.net/quuqu/article/details/51851574\n- 如何搭建一个独立博客——简明Github Pages与Hexo教程，https://www.jianshu.com/p/05289a4bc8b2","source":"_posts/个人博客搭建备忘录.md","raw":"---\ntitle: 个人博客搭建备忘录\ntags:\ncategories:\n---\n\n我的博客最开始是在博客园上，后面转到CSDN.因为CSDN的审核机制感觉不好，因此趁着今年国庆搭建了一个独立博客。现在将搭建过程记录下来，供自己以后备忘，同时也供有兴趣的读者参考。\n\n独立博客搭建过程按步骤可分为三步：（1）博客网站构建；（2）发布到托管网站；（3）自定义域名绑定。其中，第3步非必须，只针对有自定义域名情形。\n## 一. 博客网站构建\n根据自己的学习与了解，目前通过GitHub来搭建个人博客，可以有两种常见的方式：Jekyll和Hexo。下面对这两种方式分别简单介绍。\n### 1. Jekyll方式\n#### (1) 拉取博客模板\n到GitHub上fork拉取某个Jekyll类型博客模板的库，例如https://github.com/xudailong/xudailong.github.io；\n#### (2) 博客名称修改\n点击页面中上部Insights旁边的Settings，进入设置页面，修改库名为；xxx.github.io，其中xxx为你的GitHub用户名，当你在浏览器的新窗口输入：xxx.github.io时，应该能就能访问到这个博客了，只是此时这个博客里面显示内容和xudailong.github.io内容一样。\n#### (3) 博客内容修改\n##### （i）博客主题修改\n主要是在_config.yml文件中，可以对照原有文件修改；\n##### （ii）博客文章修改\n_posts主要用来放博客文章，因此可以根据自己要求，删除无关文章，并添加自己的文章。这里文章对应的文件为markdown文件格式，文件命名为时间加标题，如2015-02-12-create-my-blog-with-jekyll.md。\n#### 说明\n- Jeklly 是什么 ?\nJekyll从核心上来说是一个文本转换引擎。该系统内部的工作原理是：你输入一些用自己喜爱的标记语言格式书写的文本，可以是Markdown、Textile或纯粹的HTML，它将这些文本混合后放入一个或一整套页面布局当中。在整个过程中，你可以自行决定你的站点URL的模式、以及哪些数据将被显示在页面中，等等。这一切都将通过严格的文本编辑完成，而生成的Web界面则是最终的产品。\n- github pages与jeklly关系\nJekyll is the engine behind GitHub Pages.\nEvery GitHub Page is run through Jekyll when you push content to a specially named branch within your repository.\n即：提交到github-pages的内容会经过jeklly处理，转换为静态的html，前期是结构必须符合jeklly的要求。\n- Jeklly是否一定要在本地安装 ?\n本地安装目的是为了方便调试问题，所以不是必须的，安装比较繁琐。推荐：找一个满意的模板，clone下来简单修改，很少需要在本地调试。如需要本地安装，请参考：https://643435675.github.io/2015/02/15/create-my-blog-with-jekyll/\n\n### 2. Hexo方式\n#### (1) 安装工作环境\n- 安装node 到Node.js官网(https://nodejs.org/en/)下载相应平台的最新版本，一路安装即可；\n- 安装hexo\n使用以下命令安装hexo到全局\n$ npm install -g hexo\n然后输入命令hexo -v显示hexo的版本号即为安装成功。\n#### (2) 博客文件夹初始化\n新建一个文件夹为博客网站所在文件夹（如Blog），然后进入Blog目录，下面所有的命令行操作都是在这个文件夹下进行的。用下面的命令初始化该文件夹，并生成一篇“hello word”的文章在\\source\\_posts文件夹下：\n$ hexo init\n#### (3) 生成静态页面\n执行以下命令把文章编译为静态页面：\n$ hexo generate\n#### (4) 生成静态页面\n执行以下命令把文章编译为静态页面，生成在public中的html文件：\n$ hexo generate\n#### (5) 本地启动\n执行以下命令，本地启动服务，在浏览器中输入http://localhost:4000/查看生成的页面效果。如果不成功，可以换一个端口试试，如5000。另外，可以在命令行窗口用“netstat -an”命令查询端口占用情况。\n$ hexo server -p 5000\n## 二. 发布到托管网站\n### 1. 发布到GitHub/Gitee/Coding\n可以通过[GitHub Desktop工具](https://desktop.github.com/)来发布与同步。\n### 2. 发布到七牛云\n可以通过[七牛云的同步工具](https://github.com/qiniu/QSunSync)来发布与同步。\n## 三. 自定义域名绑定\n### 1. 购买域名\n- [GoDaddy](https://sg.godaddy.com/zh/)，新加坡，可以使用支付宝;\n- [DNSPod](https://www.dnspod.cn/)，腾讯平台。\n还有许多其他平台，不一一列举。\n### 2. GitHub设置自定义域名\n点击GitHub页面中上部Insights旁边的Settings，进入设置页面，修改Custom domain为你购买的域名。\n### 3. 域名解析设置\n如果是在[GoDaddy](https://sg.godaddy.com/zh/)上购买的域名，可以直接在该网站内设置，也可以用[DNSPod](https://www.dnspod.cn/)来设置，设置方法请参考：https://www.jianshu.com/p/05289a4bc8b2\n\n## 参考文献\n- Github搭建个人博客, https://blog.csdn.net/xudailong_blog/article/details/78762262\n- hexo VS jekyll, https://blog.csdn.net/scythe666/article/details/51956821#cmid=212488\n- Hexo博客系列（六）：部署到七牛, http://www.isetsuna.com/hexo/deploy-qiniu/\n- 利用7牛云搭建hexo个人博客, https://blog.csdn.net/quuqu/article/details/51851574\n- 如何搭建一个独立博客——简明Github Pages与Hexo教程，https://www.jianshu.com/p/05289a4bc8b2","slug":"个人博客搭建备忘录","published":1,"date":"2020-01-19T08:28:10.776Z","updated":"2019-08-18T04:57:20.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers05x001ar0akf8imxb46","content":"<p>我的博客最开始是在博客园上，后面转到CSDN.因为CSDN的审核机制感觉不好，因此趁着今年国庆搭建了一个独立博客。现在将搭建过程记录下来，供自己以后备忘，同时也供有兴趣的读者参考。</p>\n<p>独立博客搭建过程按步骤可分为三步：（1）博客网站构建；（2）发布到托管网站；（3）自定义域名绑定。其中，第3步非必须，只针对有自定义域名情形。</p>\n<h2 id=\"一-博客网站构建\"><a href=\"#一-博客网站构建\" class=\"headerlink\" title=\"一. 博客网站构建\"></a>一. 博客网站构建</h2><p>根据自己的学习与了解，目前通过GitHub来搭建个人博客，可以有两种常见的方式：Jekyll和Hexo。下面对这两种方式分别简单介绍。</p>\n<h3 id=\"1-Jekyll方式\"><a href=\"#1-Jekyll方式\" class=\"headerlink\" title=\"1. Jekyll方式\"></a>1. Jekyll方式</h3><h4 id=\"1-拉取博客模板\"><a href=\"#1-拉取博客模板\" class=\"headerlink\" title=\"(1) 拉取博客模板\"></a>(1) 拉取博客模板</h4><p>到GitHub上fork拉取某个Jekyll类型博客模板的库，例如<a href=\"https://github.com/xudailong/xudailong.github.io；\" target=\"_blank\" rel=\"noopener\">https://github.com/xudailong/xudailong.github.io；</a></p>\n<h4 id=\"2-博客名称修改\"><a href=\"#2-博客名称修改\" class=\"headerlink\" title=\"(2) 博客名称修改\"></a>(2) 博客名称修改</h4><p>点击页面中上部Insights旁边的Settings，进入设置页面，修改库名为；xxx.github.io，其中xxx为你的GitHub用户名，当你在浏览器的新窗口输入：xxx.github.io时，应该能就能访问到这个博客了，只是此时这个博客里面显示内容和xudailong.github.io内容一样。</p>\n<h4 id=\"3-博客内容修改\"><a href=\"#3-博客内容修改\" class=\"headerlink\" title=\"(3) 博客内容修改\"></a>(3) 博客内容修改</h4><h5 id=\"（i）博客主题修改\"><a href=\"#（i）博客主题修改\" class=\"headerlink\" title=\"（i）博客主题修改\"></a>（i）博客主题修改</h5><p>主要是在_config.yml文件中，可以对照原有文件修改；</p>\n<h5 id=\"（ii）博客文章修改\"><a href=\"#（ii）博客文章修改\" class=\"headerlink\" title=\"（ii）博客文章修改\"></a>（ii）博客文章修改</h5><p>_posts主要用来放博客文章，因此可以根据自己要求，删除无关文章，并添加自己的文章。这里文章对应的文件为markdown文件格式，文件命名为时间加标题，如2015-02-12-create-my-blog-with-jekyll.md。</p>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ul>\n<li>Jeklly 是什么 ?<br>Jekyll从核心上来说是一个文本转换引擎。该系统内部的工作原理是：你输入一些用自己喜爱的标记语言格式书写的文本，可以是Markdown、Textile或纯粹的HTML，它将这些文本混合后放入一个或一整套页面布局当中。在整个过程中，你可以自行决定你的站点URL的模式、以及哪些数据将被显示在页面中，等等。这一切都将通过严格的文本编辑完成，而生成的Web界面则是最终的产品。</li>\n<li>github pages与jeklly关系<br>Jekyll is the engine behind GitHub Pages.<br>Every GitHub Page is run through Jekyll when you push content to a specially named branch within your repository.<br>即：提交到github-pages的内容会经过jeklly处理，转换为静态的html，前期是结构必须符合jeklly的要求。</li>\n<li>Jeklly是否一定要在本地安装 ?<br>本地安装目的是为了方便调试问题，所以不是必须的，安装比较繁琐。推荐：找一个满意的模板，clone下来简单修改，很少需要在本地调试。如需要本地安装，请参考：<a href=\"https://643435675.github.io/2015/02/15/create-my-blog-with-jekyll/\" target=\"_blank\" rel=\"noopener\">https://643435675.github.io/2015/02/15/create-my-blog-with-jekyll/</a></li>\n</ul>\n<h3 id=\"2-Hexo方式\"><a href=\"#2-Hexo方式\" class=\"headerlink\" title=\"2. Hexo方式\"></a>2. Hexo方式</h3><h4 id=\"1-安装工作环境\"><a href=\"#1-安装工作环境\" class=\"headerlink\" title=\"(1) 安装工作环境\"></a>(1) 安装工作环境</h4><ul>\n<li>安装node 到Node.js官网(<a href=\"https://nodejs.org/en/)下载相应平台的最新版本，一路安装即可；\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/)下载相应平台的最新版本，一路安装即可；</a></li>\n<li>安装hexo<br>使用以下命令安装hexo到全局<br>$ npm install -g hexo<br>然后输入命令hexo -v显示hexo的版本号即为安装成功。<h4 id=\"2-博客文件夹初始化\"><a href=\"#2-博客文件夹初始化\" class=\"headerlink\" title=\"(2) 博客文件夹初始化\"></a>(2) 博客文件夹初始化</h4>新建一个文件夹为博客网站所在文件夹（如Blog），然后进入Blog目录，下面所有的命令行操作都是在这个文件夹下进行的。用下面的命令初始化该文件夹，并生成一篇“hello word”的文章在\\source_posts文件夹下：<br>$ hexo init<h4 id=\"3-生成静态页面\"><a href=\"#3-生成静态页面\" class=\"headerlink\" title=\"(3) 生成静态页面\"></a>(3) 生成静态页面</h4>执行以下命令把文章编译为静态页面：<br>$ hexo generate<h4 id=\"4-生成静态页面\"><a href=\"#4-生成静态页面\" class=\"headerlink\" title=\"(4) 生成静态页面\"></a>(4) 生成静态页面</h4>执行以下命令把文章编译为静态页面，生成在public中的html文件：<br>$ hexo generate<h4 id=\"5-本地启动\"><a href=\"#5-本地启动\" class=\"headerlink\" title=\"(5) 本地启动\"></a>(5) 本地启动</h4>执行以下命令，本地启动服务，在浏览器中输入<a href=\"http://localhost:4000/查看生成的页面效果。如果不成功，可以换一个端口试试，如5000。另外，可以在命令行窗口用“netstat\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/查看生成的页面效果。如果不成功，可以换一个端口试试，如5000。另外，可以在命令行窗口用“netstat</a> -an”命令查询端口占用情况。<br>$ hexo server -p 5000<h2 id=\"二-发布到托管网站\"><a href=\"#二-发布到托管网站\" class=\"headerlink\" title=\"二. 发布到托管网站\"></a>二. 发布到托管网站</h2><h3 id=\"1-发布到GitHub-Gitee-Coding\"><a href=\"#1-发布到GitHub-Gitee-Coding\" class=\"headerlink\" title=\"1. 发布到GitHub/Gitee/Coding\"></a>1. 发布到GitHub/Gitee/Coding</h3>可以通过<a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Desktop工具</a>来发布与同步。<h3 id=\"2-发布到七牛云\"><a href=\"#2-发布到七牛云\" class=\"headerlink\" title=\"2. 发布到七牛云\"></a>2. 发布到七牛云</h3>可以通过<a href=\"https://github.com/qiniu/QSunSync\" target=\"_blank\" rel=\"noopener\">七牛云的同步工具</a>来发布与同步。<h2 id=\"三-自定义域名绑定\"><a href=\"#三-自定义域名绑定\" class=\"headerlink\" title=\"三. 自定义域名绑定\"></a>三. 自定义域名绑定</h2><h3 id=\"1-购买域名\"><a href=\"#1-购买域名\" class=\"headerlink\" title=\"1. 购买域名\"></a>1. 购买域名</h3></li>\n<li><a href=\"https://sg.godaddy.com/zh/\" target=\"_blank\" rel=\"noopener\">GoDaddy</a>，新加坡，可以使用支付宝;</li>\n<li><a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"noopener\">DNSPod</a>，腾讯平台。<br>还有许多其他平台，不一一列举。<h3 id=\"2-GitHub设置自定义域名\"><a href=\"#2-GitHub设置自定义域名\" class=\"headerlink\" title=\"2. GitHub设置自定义域名\"></a>2. GitHub设置自定义域名</h3>点击GitHub页面中上部Insights旁边的Settings，进入设置页面，修改Custom domain为你购买的域名。<h3 id=\"3-域名解析设置\"><a href=\"#3-域名解析设置\" class=\"headerlink\" title=\"3. 域名解析设置\"></a>3. 域名解析设置</h3>如果是在<a href=\"https://sg.godaddy.com/zh/\" target=\"_blank\" rel=\"noopener\">GoDaddy</a>上购买的域名，可以直接在该网站内设置，也可以用<a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"noopener\">DNSPod</a>来设置，设置方法请参考：<a href=\"https://www.jianshu.com/p/05289a4bc8b2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/05289a4bc8b2</a></li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li>Github搭建个人博客, <a href=\"https://blog.csdn.net/xudailong_blog/article/details/78762262\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xudailong_blog/article/details/78762262</a></li>\n<li>hexo VS jekyll, <a href=\"https://blog.csdn.net/scythe666/article/details/51956821#cmid=212488\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/scythe666/article/details/51956821#cmid=212488</a></li>\n<li>Hexo博客系列（六）：部署到七牛, <a href=\"http://www.isetsuna.com/hexo/deploy-qiniu/\" target=\"_blank\" rel=\"noopener\">http://www.isetsuna.com/hexo/deploy-qiniu/</a></li>\n<li>利用7牛云搭建hexo个人博客, <a href=\"https://blog.csdn.net/quuqu/article/details/51851574\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/quuqu/article/details/51851574</a></li>\n<li>如何搭建一个独立博客——简明Github Pages与Hexo教程，<a href=\"https://www.jianshu.com/p/05289a4bc8b2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/05289a4bc8b2</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>我的博客最开始是在博客园上，后面转到CSDN.因为CSDN的审核机制感觉不好，因此趁着今年国庆搭建了一个独立博客。现在将搭建过程记录下来，供自己以后备忘，同时也供有兴趣的读者参考。</p>\n<p>独立博客搭建过程按步骤可分为三步：（1）博客网站构建；（2）发布到托管网站；（3）自定义域名绑定。其中，第3步非必须，只针对有自定义域名情形。</p>\n<h2 id=\"一-博客网站构建\"><a href=\"#一-博客网站构建\" class=\"headerlink\" title=\"一. 博客网站构建\"></a>一. 博客网站构建</h2><p>根据自己的学习与了解，目前通过GitHub来搭建个人博客，可以有两种常见的方式：Jekyll和Hexo。下面对这两种方式分别简单介绍。</p>\n<h3 id=\"1-Jekyll方式\"><a href=\"#1-Jekyll方式\" class=\"headerlink\" title=\"1. Jekyll方式\"></a>1. Jekyll方式</h3><h4 id=\"1-拉取博客模板\"><a href=\"#1-拉取博客模板\" class=\"headerlink\" title=\"(1) 拉取博客模板\"></a>(1) 拉取博客模板</h4><p>到GitHub上fork拉取某个Jekyll类型博客模板的库，例如<a href=\"https://github.com/xudailong/xudailong.github.io；\" target=\"_blank\" rel=\"noopener\">https://github.com/xudailong/xudailong.github.io；</a></p>\n<h4 id=\"2-博客名称修改\"><a href=\"#2-博客名称修改\" class=\"headerlink\" title=\"(2) 博客名称修改\"></a>(2) 博客名称修改</h4><p>点击页面中上部Insights旁边的Settings，进入设置页面，修改库名为；xxx.github.io，其中xxx为你的GitHub用户名，当你在浏览器的新窗口输入：xxx.github.io时，应该能就能访问到这个博客了，只是此时这个博客里面显示内容和xudailong.github.io内容一样。</p>\n<h4 id=\"3-博客内容修改\"><a href=\"#3-博客内容修改\" class=\"headerlink\" title=\"(3) 博客内容修改\"></a>(3) 博客内容修改</h4><h5 id=\"（i）博客主题修改\"><a href=\"#（i）博客主题修改\" class=\"headerlink\" title=\"（i）博客主题修改\"></a>（i）博客主题修改</h5><p>主要是在_config.yml文件中，可以对照原有文件修改；</p>\n<h5 id=\"（ii）博客文章修改\"><a href=\"#（ii）博客文章修改\" class=\"headerlink\" title=\"（ii）博客文章修改\"></a>（ii）博客文章修改</h5><p>_posts主要用来放博客文章，因此可以根据自己要求，删除无关文章，并添加自己的文章。这里文章对应的文件为markdown文件格式，文件命名为时间加标题，如2015-02-12-create-my-blog-with-jekyll.md。</p>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ul>\n<li>Jeklly 是什么 ?<br>Jekyll从核心上来说是一个文本转换引擎。该系统内部的工作原理是：你输入一些用自己喜爱的标记语言格式书写的文本，可以是Markdown、Textile或纯粹的HTML，它将这些文本混合后放入一个或一整套页面布局当中。在整个过程中，你可以自行决定你的站点URL的模式、以及哪些数据将被显示在页面中，等等。这一切都将通过严格的文本编辑完成，而生成的Web界面则是最终的产品。</li>\n<li>github pages与jeklly关系<br>Jekyll is the engine behind GitHub Pages.<br>Every GitHub Page is run through Jekyll when you push content to a specially named branch within your repository.<br>即：提交到github-pages的内容会经过jeklly处理，转换为静态的html，前期是结构必须符合jeklly的要求。</li>\n<li>Jeklly是否一定要在本地安装 ?<br>本地安装目的是为了方便调试问题，所以不是必须的，安装比较繁琐。推荐：找一个满意的模板，clone下来简单修改，很少需要在本地调试。如需要本地安装，请参考：<a href=\"https://643435675.github.io/2015/02/15/create-my-blog-with-jekyll/\" target=\"_blank\" rel=\"noopener\">https://643435675.github.io/2015/02/15/create-my-blog-with-jekyll/</a></li>\n</ul>\n<h3 id=\"2-Hexo方式\"><a href=\"#2-Hexo方式\" class=\"headerlink\" title=\"2. Hexo方式\"></a>2. Hexo方式</h3><h4 id=\"1-安装工作环境\"><a href=\"#1-安装工作环境\" class=\"headerlink\" title=\"(1) 安装工作环境\"></a>(1) 安装工作环境</h4><ul>\n<li>安装node 到Node.js官网(<a href=\"https://nodejs.org/en/)下载相应平台的最新版本，一路安装即可；\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/)下载相应平台的最新版本，一路安装即可；</a></li>\n<li>安装hexo<br>使用以下命令安装hexo到全局<br>$ npm install -g hexo<br>然后输入命令hexo -v显示hexo的版本号即为安装成功。<h4 id=\"2-博客文件夹初始化\"><a href=\"#2-博客文件夹初始化\" class=\"headerlink\" title=\"(2) 博客文件夹初始化\"></a>(2) 博客文件夹初始化</h4>新建一个文件夹为博客网站所在文件夹（如Blog），然后进入Blog目录，下面所有的命令行操作都是在这个文件夹下进行的。用下面的命令初始化该文件夹，并生成一篇“hello word”的文章在\\source_posts文件夹下：<br>$ hexo init<h4 id=\"3-生成静态页面\"><a href=\"#3-生成静态页面\" class=\"headerlink\" title=\"(3) 生成静态页面\"></a>(3) 生成静态页面</h4>执行以下命令把文章编译为静态页面：<br>$ hexo generate<h4 id=\"4-生成静态页面\"><a href=\"#4-生成静态页面\" class=\"headerlink\" title=\"(4) 生成静态页面\"></a>(4) 生成静态页面</h4>执行以下命令把文章编译为静态页面，生成在public中的html文件：<br>$ hexo generate<h4 id=\"5-本地启动\"><a href=\"#5-本地启动\" class=\"headerlink\" title=\"(5) 本地启动\"></a>(5) 本地启动</h4>执行以下命令，本地启动服务，在浏览器中输入<a href=\"http://localhost:4000/查看生成的页面效果。如果不成功，可以换一个端口试试，如5000。另外，可以在命令行窗口用“netstat\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/查看生成的页面效果。如果不成功，可以换一个端口试试，如5000。另外，可以在命令行窗口用“netstat</a> -an”命令查询端口占用情况。<br>$ hexo server -p 5000<h2 id=\"二-发布到托管网站\"><a href=\"#二-发布到托管网站\" class=\"headerlink\" title=\"二. 发布到托管网站\"></a>二. 发布到托管网站</h2><h3 id=\"1-发布到GitHub-Gitee-Coding\"><a href=\"#1-发布到GitHub-Gitee-Coding\" class=\"headerlink\" title=\"1. 发布到GitHub/Gitee/Coding\"></a>1. 发布到GitHub/Gitee/Coding</h3>可以通过<a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Desktop工具</a>来发布与同步。<h3 id=\"2-发布到七牛云\"><a href=\"#2-发布到七牛云\" class=\"headerlink\" title=\"2. 发布到七牛云\"></a>2. 发布到七牛云</h3>可以通过<a href=\"https://github.com/qiniu/QSunSync\" target=\"_blank\" rel=\"noopener\">七牛云的同步工具</a>来发布与同步。<h2 id=\"三-自定义域名绑定\"><a href=\"#三-自定义域名绑定\" class=\"headerlink\" title=\"三. 自定义域名绑定\"></a>三. 自定义域名绑定</h2><h3 id=\"1-购买域名\"><a href=\"#1-购买域名\" class=\"headerlink\" title=\"1. 购买域名\"></a>1. 购买域名</h3></li>\n<li><a href=\"https://sg.godaddy.com/zh/\" target=\"_blank\" rel=\"noopener\">GoDaddy</a>，新加坡，可以使用支付宝;</li>\n<li><a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"noopener\">DNSPod</a>，腾讯平台。<br>还有许多其他平台，不一一列举。<h3 id=\"2-GitHub设置自定义域名\"><a href=\"#2-GitHub设置自定义域名\" class=\"headerlink\" title=\"2. GitHub设置自定义域名\"></a>2. GitHub设置自定义域名</h3>点击GitHub页面中上部Insights旁边的Settings，进入设置页面，修改Custom domain为你购买的域名。<h3 id=\"3-域名解析设置\"><a href=\"#3-域名解析设置\" class=\"headerlink\" title=\"3. 域名解析设置\"></a>3. 域名解析设置</h3>如果是在<a href=\"https://sg.godaddy.com/zh/\" target=\"_blank\" rel=\"noopener\">GoDaddy</a>上购买的域名，可以直接在该网站内设置，也可以用<a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"noopener\">DNSPod</a>来设置，设置方法请参考：<a href=\"https://www.jianshu.com/p/05289a4bc8b2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/05289a4bc8b2</a></li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li>Github搭建个人博客, <a href=\"https://blog.csdn.net/xudailong_blog/article/details/78762262\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xudailong_blog/article/details/78762262</a></li>\n<li>hexo VS jekyll, <a href=\"https://blog.csdn.net/scythe666/article/details/51956821#cmid=212488\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/scythe666/article/details/51956821#cmid=212488</a></li>\n<li>Hexo博客系列（六）：部署到七牛, <a href=\"http://www.isetsuna.com/hexo/deploy-qiniu/\" target=\"_blank\" rel=\"noopener\">http://www.isetsuna.com/hexo/deploy-qiniu/</a></li>\n<li>利用7牛云搭建hexo个人博客, <a href=\"https://blog.csdn.net/quuqu/article/details/51851574\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/quuqu/article/details/51851574</a></li>\n<li>如何搭建一个独立博客——简明Github Pages与Hexo教程，<a href=\"https://www.jianshu.com/p/05289a4bc8b2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/05289a4bc8b2</a></li>\n</ul>\n"},{"title":"WebGL画点程序v1","_content":"\n本文程序实现画一个点的任务，如下图。其中，点的位置直接给定（“硬编码”）在顶点着色器中。\n\n![Hello_Point](http://oty0nwcbq.bkt.clouddn.com/helloPoint.png)\n\n整个程序包含两个文件，分别是：\n## 1. HelloPoint1.html\n```javascript\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n        <title>画一个点</title>\n    </head>\n    <body onload=\"startup()\">\n        <canvas id=\"myGLCanvas\" width=\"640\" height=\"480\">\n        </canvas>\n    </body>\n    <script type=\"text/javascript\" src=\"HelloPoint1.js\">\n    </script>\n</html>\n```\n\n## 2. HelloPoint1.js\n```javascript\nvar gl;\nfunction createGLContext(canvas) {\n  var names = [\"webgl\", \"experimental-webgl\"];\n  var context = null;\n  for (var i=0; i < names.length; i++) {\n    try {\n      context = canvas.getContext(names[i]); //获取webgl context绘图上下文\n    } catch(e) {}\n    if (context) {\n      break;\n    }\n  }\n  if (context) {\n    context.viewportWidth = canvas.width;\n    context.viewportHeight = canvas.height;\n  } else {\n    alert(\"Failed to create WebGL context!\");\n  }\n  return context;\n}\n\nfunction loadShader(type, shaderSource) {\n  var shader = gl.createShader(type);\n  gl.shaderSource(shader, shaderSource);\n  gl.compileShader(shader);\n  \n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      alert(\"Error compiling shader\" + gl.getShaderInfoLog(shader));\n      gl.deleteShader(shader);   \n      return null;\n  }\n  return shader;  \n}\n\nfunction setupShaders() {\n    //顶点着色器程序\n    var vertexShaderSource = 'void main(){ \\n' +\n    '    gl_Position = vec4(0.0, 0.0, 0.0, 1.0); \\n' + //gl_Position指定了点的位置\n    '    gl_PointSize = 10.0; \\n' +\n    '} \\n';\n    \n    //片元着色器程序\n    var fragmentShaderSource = 'void main(){ \\n' +\n    '    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); \\n' + //gl_FragColor指定像素的颜色\n    '} \\n';                                         \n     \n  var vertexShader = loadShader(gl.VERTEX_SHADER, vertexShaderSource);\n  var fragmentShader = loadShader(gl.FRAGMENT_SHADER, fragmentShaderSource);\n  \n  var shaderProgram = gl.createProgram();\n  gl.attachShader(shaderProgram, vertexShader);\n  gl.attachShader(shaderProgram, fragmentShader);\n  gl.linkProgram(shaderProgram);\n\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    alert(\"Failed to setup shaders\");\n  }\n\n  gl.useProgram(shaderProgram);\n  gl.program= shaderProgram;\n}\n\nfunction startup(){\n    var canvas = document.getElementById('myGLCanvas');//获取<canvas>元素\n    gl = createGLContext(canvas);\n    setupShaders(); \n\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);//指定清空<canvas>的颜色    \n    gl.clear(gl.COLOR_BUFFER_BIT);//清空<canvas>\n    gl.drawArrays(gl.POINTS, 0, 1);//从第0个元素开始，在指定位置（gl_Position）画1个点\n }\n```\n\n## 参考代码\n1. Hello Point——WebGL, http://www.cnblogs.com/idealer3d/p/3513838.html\n1. Professional WebGL Programming: Developing 3D Graphics for the Web,Listing 2-1,http://media.wiley.com/product_ancillary/60/11199688/DOWNLOAD/Listing-2-1.html\n\n>转载请注明出处：http://www.cnblogs.com/opengl/p/7262596.html","source":"_posts/WebGL画点程序v1.md","raw":"---\ntitle: WebGL画点程序v1\ntags:\ncategories:\n---\n\n本文程序实现画一个点的任务，如下图。其中，点的位置直接给定（“硬编码”）在顶点着色器中。\n\n![Hello_Point](http://oty0nwcbq.bkt.clouddn.com/helloPoint.png)\n\n整个程序包含两个文件，分别是：\n## 1. HelloPoint1.html\n```javascript\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n        <title>画一个点</title>\n    </head>\n    <body onload=\"startup()\">\n        <canvas id=\"myGLCanvas\" width=\"640\" height=\"480\">\n        </canvas>\n    </body>\n    <script type=\"text/javascript\" src=\"HelloPoint1.js\">\n    </script>\n</html>\n```\n\n## 2. HelloPoint1.js\n```javascript\nvar gl;\nfunction createGLContext(canvas) {\n  var names = [\"webgl\", \"experimental-webgl\"];\n  var context = null;\n  for (var i=0; i < names.length; i++) {\n    try {\n      context = canvas.getContext(names[i]); //获取webgl context绘图上下文\n    } catch(e) {}\n    if (context) {\n      break;\n    }\n  }\n  if (context) {\n    context.viewportWidth = canvas.width;\n    context.viewportHeight = canvas.height;\n  } else {\n    alert(\"Failed to create WebGL context!\");\n  }\n  return context;\n}\n\nfunction loadShader(type, shaderSource) {\n  var shader = gl.createShader(type);\n  gl.shaderSource(shader, shaderSource);\n  gl.compileShader(shader);\n  \n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      alert(\"Error compiling shader\" + gl.getShaderInfoLog(shader));\n      gl.deleteShader(shader);   \n      return null;\n  }\n  return shader;  \n}\n\nfunction setupShaders() {\n    //顶点着色器程序\n    var vertexShaderSource = 'void main(){ \\n' +\n    '    gl_Position = vec4(0.0, 0.0, 0.0, 1.0); \\n' + //gl_Position指定了点的位置\n    '    gl_PointSize = 10.0; \\n' +\n    '} \\n';\n    \n    //片元着色器程序\n    var fragmentShaderSource = 'void main(){ \\n' +\n    '    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); \\n' + //gl_FragColor指定像素的颜色\n    '} \\n';                                         \n     \n  var vertexShader = loadShader(gl.VERTEX_SHADER, vertexShaderSource);\n  var fragmentShader = loadShader(gl.FRAGMENT_SHADER, fragmentShaderSource);\n  \n  var shaderProgram = gl.createProgram();\n  gl.attachShader(shaderProgram, vertexShader);\n  gl.attachShader(shaderProgram, fragmentShader);\n  gl.linkProgram(shaderProgram);\n\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    alert(\"Failed to setup shaders\");\n  }\n\n  gl.useProgram(shaderProgram);\n  gl.program= shaderProgram;\n}\n\nfunction startup(){\n    var canvas = document.getElementById('myGLCanvas');//获取<canvas>元素\n    gl = createGLContext(canvas);\n    setupShaders(); \n\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);//指定清空<canvas>的颜色    \n    gl.clear(gl.COLOR_BUFFER_BIT);//清空<canvas>\n    gl.drawArrays(gl.POINTS, 0, 1);//从第0个元素开始，在指定位置（gl_Position）画1个点\n }\n```\n\n## 参考代码\n1. Hello Point——WebGL, http://www.cnblogs.com/idealer3d/p/3513838.html\n1. Professional WebGL Programming: Developing 3D Graphics for the Web,Listing 2-1,http://media.wiley.com/product_ancillary/60/11199688/DOWNLOAD/Listing-2-1.html\n\n>转载请注明出处：http://www.cnblogs.com/opengl/p/7262596.html","slug":"WebGL画点程序v1","published":1,"date":"2020-01-19T08:28:10.772Z","updated":"2019-08-18T02:04:22.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaers05z001fr0akm8k5bahq","content":"<p>本文程序实现画一个点的任务，如下图。其中，点的位置直接给定（“硬编码”）在顶点着色器中。</p>\n<p><img src=\"http://oty0nwcbq.bkt.clouddn.com/helloPoint.png\" alt=\"Hello_Point\"></p>\n<p>整个程序包含两个文件，分别是：</p>\n<h2 id=\"1-HelloPoint1-html\"><a href=\"#1-HelloPoint1-html\" class=\"headerlink\" title=\"1. HelloPoint1.html\"></a>1. HelloPoint1.html</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01//EN\"</span> <span class=\"string\">\"http://www.w3.org/TR/html4/strict.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta http-equiv=<span class=\"string\">\"Content-Type\"</span> content=<span class=\"string\">\"text/html; charset=utf-8\"</span>&gt;</span><br><span class=\"line\">        &lt;title&gt;画一个点&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>head&gt;</span><br><span class=\"line\">    &lt;body onload=<span class=\"string\">\"startup()\"</span>&gt;</span><br><span class=\"line\">        &lt;canvas id=<span class=\"string\">\"myGLCanvas\"</span> width=<span class=\"string\">\"640\"</span> height=<span class=\"string\">\"480\"</span>&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/canvas&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>body&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"HelloPoint1.js\"</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-HelloPoint1-js\"><a href=\"#2-HelloPoint1-js\" class=\"headerlink\" title=\"2. HelloPoint1.js\"></a>2. HelloPoint1.js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gl;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createGLContext</span>(<span class=\"params\">canvas</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> names = [<span class=\"string\">\"webgl\"</span>, <span class=\"string\">\"experimental-webgl\"</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> context = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; names.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      context = canvas.getContext(names[i]); <span class=\"comment\">//获取webgl context绘图上下文</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (context) &#123;</span><br><span class=\"line\">    context.viewportWidth = canvas.width;</span><br><span class=\"line\">    context.viewportHeight = canvas.height;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Failed to create WebGL context!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadShader</span>(<span class=\"params\">type, shaderSource</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> shader = gl.createShader(type);</span><br><span class=\"line\">  gl.shaderSource(shader, shaderSource);</span><br><span class=\"line\">  gl.compileShader(shader);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"Error compiling shader\"</span> + gl.getShaderInfoLog(shader));</span><br><span class=\"line\">      gl.deleteShader(shader);   </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> shader;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setupShaders</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//顶点着色器程序</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> vertexShaderSource = <span class=\"string\">'void main()&#123; \\n'</span> +</span><br><span class=\"line\">    <span class=\"string\">'    gl_Position = vec4(0.0, 0.0, 0.0, 1.0); \\n'</span> + <span class=\"comment\">//gl_Position指定了点的位置</span></span><br><span class=\"line\">    <span class=\"string\">'    gl_PointSize = 10.0; \\n'</span> +</span><br><span class=\"line\">    <span class=\"string\">'&#125; \\n'</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//片元着色器程序</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fragmentShaderSource = <span class=\"string\">'void main()&#123; \\n'</span> +</span><br><span class=\"line\">    <span class=\"string\">'    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); \\n'</span> + <span class=\"comment\">//gl_FragColor指定像素的颜色</span></span><br><span class=\"line\">    <span class=\"string\">'&#125; \\n'</span>;                                         </span><br><span class=\"line\">     </span><br><span class=\"line\">  <span class=\"keyword\">var</span> vertexShader = loadShader(gl.VERTEX_SHADER, vertexShaderSource);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fragmentShader = loadShader(gl.FRAGMENT_SHADER, fragmentShaderSource);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> shaderProgram = gl.createProgram();</span><br><span class=\"line\">  gl.attachShader(shaderProgram, vertexShader);</span><br><span class=\"line\">  gl.attachShader(shaderProgram, fragmentShader);</span><br><span class=\"line\">  gl.linkProgram(shaderProgram);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Failed to setup shaders\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  gl.useProgram(shaderProgram);</span><br><span class=\"line\">  gl.program= shaderProgram;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myGLCanvas'</span>);<span class=\"comment\">//获取&lt;canvas&gt;元素</span></span><br><span class=\"line\">    gl = createGLContext(canvas);</span><br><span class=\"line\">    setupShaders(); </span><br><span class=\"line\"></span><br><span class=\"line\">    gl.clearColor(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);<span class=\"comment\">//指定清空&lt;canvas&gt;的颜色    </span></span><br><span class=\"line\">    gl.clear(gl.COLOR_BUFFER_BIT);<span class=\"comment\">//清空&lt;canvas&gt;</span></span><br><span class=\"line\">    gl.drawArrays(gl.POINTS, <span class=\"number\">0</span>, <span class=\"number\">1</span>);<span class=\"comment\">//从第0个元素开始，在指定位置（gl_Position）画1个点</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><ol>\n<li>Hello Point——WebGL, <a href=\"http://www.cnblogs.com/idealer3d/p/3513838.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/idealer3d/p/3513838.html</a></li>\n<li>Professional WebGL Programming: Developing 3D Graphics for the Web,Listing 2-1,<a href=\"http://media.wiley.com/product_ancillary/60/11199688/DOWNLOAD/Listing-2-1.html\" target=\"_blank\" rel=\"noopener\">http://media.wiley.com/product_ancillary/60/11199688/DOWNLOAD/Listing-2-1.html</a></li>\n</ol>\n<blockquote>\n<p>转载请注明出处：<a href=\"http://www.cnblogs.com/opengl/p/7262596.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/opengl/p/7262596.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>本文程序实现画一个点的任务，如下图。其中，点的位置直接给定（“硬编码”）在顶点着色器中。</p>\n<p><img src=\"http://oty0nwcbq.bkt.clouddn.com/helloPoint.png\" alt=\"Hello_Point\"></p>\n<p>整个程序包含两个文件，分别是：</p>\n<h2 id=\"1-HelloPoint1-html\"><a href=\"#1-HelloPoint1-html\" class=\"headerlink\" title=\"1. HelloPoint1.html\"></a>1. HelloPoint1.html</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01//EN\"</span> <span class=\"string\">\"http://www.w3.org/TR/html4/strict.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta http-equiv=<span class=\"string\">\"Content-Type\"</span> content=<span class=\"string\">\"text/html; charset=utf-8\"</span>&gt;</span><br><span class=\"line\">        &lt;title&gt;画一个点&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>head&gt;</span><br><span class=\"line\">    &lt;body onload=<span class=\"string\">\"startup()\"</span>&gt;</span><br><span class=\"line\">        &lt;canvas id=<span class=\"string\">\"myGLCanvas\"</span> width=<span class=\"string\">\"640\"</span> height=<span class=\"string\">\"480\"</span>&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/canvas&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>body&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"HelloPoint1.js\"</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-HelloPoint1-js\"><a href=\"#2-HelloPoint1-js\" class=\"headerlink\" title=\"2. HelloPoint1.js\"></a>2. HelloPoint1.js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gl;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createGLContext</span>(<span class=\"params\">canvas</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> names = [<span class=\"string\">\"webgl\"</span>, <span class=\"string\">\"experimental-webgl\"</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> context = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; names.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      context = canvas.getContext(names[i]); <span class=\"comment\">//获取webgl context绘图上下文</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (context) &#123;</span><br><span class=\"line\">    context.viewportWidth = canvas.width;</span><br><span class=\"line\">    context.viewportHeight = canvas.height;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Failed to create WebGL context!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadShader</span>(<span class=\"params\">type, shaderSource</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> shader = gl.createShader(type);</span><br><span class=\"line\">  gl.shaderSource(shader, shaderSource);</span><br><span class=\"line\">  gl.compileShader(shader);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"Error compiling shader\"</span> + gl.getShaderInfoLog(shader));</span><br><span class=\"line\">      gl.deleteShader(shader);   </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> shader;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setupShaders</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//顶点着色器程序</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> vertexShaderSource = <span class=\"string\">'void main()&#123; \\n'</span> +</span><br><span class=\"line\">    <span class=\"string\">'    gl_Position = vec4(0.0, 0.0, 0.0, 1.0); \\n'</span> + <span class=\"comment\">//gl_Position指定了点的位置</span></span><br><span class=\"line\">    <span class=\"string\">'    gl_PointSize = 10.0; \\n'</span> +</span><br><span class=\"line\">    <span class=\"string\">'&#125; \\n'</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//片元着色器程序</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fragmentShaderSource = <span class=\"string\">'void main()&#123; \\n'</span> +</span><br><span class=\"line\">    <span class=\"string\">'    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); \\n'</span> + <span class=\"comment\">//gl_FragColor指定像素的颜色</span></span><br><span class=\"line\">    <span class=\"string\">'&#125; \\n'</span>;                                         </span><br><span class=\"line\">     </span><br><span class=\"line\">  <span class=\"keyword\">var</span> vertexShader = loadShader(gl.VERTEX_SHADER, vertexShaderSource);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fragmentShader = loadShader(gl.FRAGMENT_SHADER, fragmentShaderSource);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> shaderProgram = gl.createProgram();</span><br><span class=\"line\">  gl.attachShader(shaderProgram, vertexShader);</span><br><span class=\"line\">  gl.attachShader(shaderProgram, fragmentShader);</span><br><span class=\"line\">  gl.linkProgram(shaderProgram);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Failed to setup shaders\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  gl.useProgram(shaderProgram);</span><br><span class=\"line\">  gl.program= shaderProgram;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myGLCanvas'</span>);<span class=\"comment\">//获取&lt;canvas&gt;元素</span></span><br><span class=\"line\">    gl = createGLContext(canvas);</span><br><span class=\"line\">    setupShaders(); </span><br><span class=\"line\"></span><br><span class=\"line\">    gl.clearColor(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);<span class=\"comment\">//指定清空&lt;canvas&gt;的颜色    </span></span><br><span class=\"line\">    gl.clear(gl.COLOR_BUFFER_BIT);<span class=\"comment\">//清空&lt;canvas&gt;</span></span><br><span class=\"line\">    gl.drawArrays(gl.POINTS, <span class=\"number\">0</span>, <span class=\"number\">1</span>);<span class=\"comment\">//从第0个元素开始，在指定位置（gl_Position）画1个点</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><ol>\n<li>Hello Point——WebGL, <a href=\"http://www.cnblogs.com/idealer3d/p/3513838.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/idealer3d/p/3513838.html</a></li>\n<li>Professional WebGL Programming: Developing 3D Graphics for the Web,Listing 2-1,<a href=\"http://media.wiley.com/product_ancillary/60/11199688/DOWNLOAD/Listing-2-1.html\" target=\"_blank\" rel=\"noopener\">http://media.wiley.com/product_ancillary/60/11199688/DOWNLOAD/Listing-2-1.html</a></li>\n</ol>\n<blockquote>\n<p>转载请注明出处：<a href=\"http://www.cnblogs.com/opengl/p/7262596.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/opengl/p/7262596.html</a></p>\n</blockquote>\n"},{"title":"Experiment 1 Create A Square","_content":"\n## 1. Experiment goal\n- Understand experiment environment and the process of experiment;\n- Learn how to draw a square and understand its vertex drawing order.\n\n\n## 2. Experiment content\nPlease do the following code exercises:\n- [Exercise 7 \"First Programming Exercise\" in  Lesson 2 Problem Set](https://classroom.udacity.com/courses/cs291/lessons/91160556/concepts/923101370923);\n- [Exercise 13 \"Create a Square\" in Lesson 4 Points, Vectors, and Meshes](https://classroom.udacity.com/courses/cs291/lessons/90856897/concepts/968210200923);\n- [Exercise 18 \"Return of the Square\" in Lesson 4 Points, Vectors, and Meshes](https://classroom.udacity.com/courses/cs291/lessons/90856897/concepts/968210230923);\n\n\n## 3. Experiment report\nPlease write experiment report based on experiment report templated according to your experiment process and submit it with the code file (fix-javascript-errors.js, triangle-mesh.js, vertex-order.js) to [the experiment assignment](https://www.ketangpai.com/Course/homework/courseid/MDAwMDAwMDAwMLSGsZaGucmy.html) on ketangpai platform .","source":"_posts/Experiment1-DrawASquare.md","raw":"---\ntitle: Experiment 1 Create A Square\ntags: [Computer Graphics]\ncategories: Computer Graphics\n---\n\n## 1. Experiment goal\n- Understand experiment environment and the process of experiment;\n- Learn how to draw a square and understand its vertex drawing order.\n\n\n## 2. Experiment content\nPlease do the following code exercises:\n- [Exercise 7 \"First Programming Exercise\" in  Lesson 2 Problem Set](https://classroom.udacity.com/courses/cs291/lessons/91160556/concepts/923101370923);\n- [Exercise 13 \"Create a Square\" in Lesson 4 Points, Vectors, and Meshes](https://classroom.udacity.com/courses/cs291/lessons/90856897/concepts/968210200923);\n- [Exercise 18 \"Return of the Square\" in Lesson 4 Points, Vectors, and Meshes](https://classroom.udacity.com/courses/cs291/lessons/90856897/concepts/968210230923);\n\n\n## 3. Experiment report\nPlease write experiment report based on experiment report templated according to your experiment process and submit it with the code file (fix-javascript-errors.js, triangle-mesh.js, vertex-order.js) to [the experiment assignment](https://www.ketangpai.com/Course/homework/courseid/MDAwMDAwMDAwMLSGsZaGucmy.html) on ketangpai platform .","slug":"Experiment1-DrawASquare","published":1,"date":"2020-06-24T23:33:00.978Z","updated":"2020-06-25T02:44:26.116Z","_id":"ckbu5vf6q000080aknmv6tado","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-Experiment-goal\"><a href=\"#1-Experiment-goal\" class=\"headerlink\" title=\"1. Experiment goal\"></a>1. Experiment goal</h2><ul>\n<li>Understand experiment environment and the process of experiment;</li>\n<li>Learn how to draw a square and understand its vertex drawing order.</li>\n</ul>\n<h2 id=\"2-Experiment-content\"><a href=\"#2-Experiment-content\" class=\"headerlink\" title=\"2. Experiment content\"></a>2. Experiment content</h2><p>Please do the following code exercises:</p>\n<ul>\n<li><a href=\"https://classroom.udacity.com/courses/cs291/lessons/91160556/concepts/923101370923\" target=\"_blank\" rel=\"noopener\">Exercise 7 “First Programming Exercise” in  Lesson 2 Problem Set</a>;</li>\n<li><a href=\"https://classroom.udacity.com/courses/cs291/lessons/90856897/concepts/968210200923\" target=\"_blank\" rel=\"noopener\">Exercise 13 “Create a Square” in Lesson 4 Points, Vectors, and Meshes</a>;</li>\n<li><a href=\"https://classroom.udacity.com/courses/cs291/lessons/90856897/concepts/968210230923\" target=\"_blank\" rel=\"noopener\">Exercise 18 “Return of the Square” in Lesson 4 Points, Vectors, and Meshes</a>;</li>\n</ul>\n<h2 id=\"3-Experiment-report\"><a href=\"#3-Experiment-report\" class=\"headerlink\" title=\"3. Experiment report\"></a>3. Experiment report</h2><p>Please write experiment report based on experiment report templated according to your experiment process and submit it with the code file (fix-javascript-errors.js, triangle-mesh.js, vertex-order.js) to <a href=\"https://www.ketangpai.com/Course/homework/courseid/MDAwMDAwMDAwMLSGsZaGucmy.html\" target=\"_blank\" rel=\"noopener\">the experiment assignment</a> on ketangpai platform .</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Experiment-goal\"><a href=\"#1-Experiment-goal\" class=\"headerlink\" title=\"1. Experiment goal\"></a>1. Experiment goal</h2><ul>\n<li>Understand experiment environment and the process of experiment;</li>\n<li>Learn how to draw a square and understand its vertex drawing order.</li>\n</ul>\n<h2 id=\"2-Experiment-content\"><a href=\"#2-Experiment-content\" class=\"headerlink\" title=\"2. Experiment content\"></a>2. Experiment content</h2><p>Please do the following code exercises:</p>\n<ul>\n<li><a href=\"https://classroom.udacity.com/courses/cs291/lessons/91160556/concepts/923101370923\" target=\"_blank\" rel=\"noopener\">Exercise 7 “First Programming Exercise” in  Lesson 2 Problem Set</a>;</li>\n<li><a href=\"https://classroom.udacity.com/courses/cs291/lessons/90856897/concepts/968210200923\" target=\"_blank\" rel=\"noopener\">Exercise 13 “Create a Square” in Lesson 4 Points, Vectors, and Meshes</a>;</li>\n<li><a href=\"https://classroom.udacity.com/courses/cs291/lessons/90856897/concepts/968210230923\" target=\"_blank\" rel=\"noopener\">Exercise 18 “Return of the Square” in Lesson 4 Points, Vectors, and Meshes</a>;</li>\n</ul>\n<h2 id=\"3-Experiment-report\"><a href=\"#3-Experiment-report\" class=\"headerlink\" title=\"3. Experiment report\"></a>3. Experiment report</h2><p>Please write experiment report based on experiment report templated according to your experiment process and submit it with the code file (fix-javascript-errors.js, triangle-mesh.js, vertex-order.js) to <a href=\"https://www.ketangpai.com/Course/homework/courseid/MDAwMDAwMDAwMLSGsZaGucmy.html\" target=\"_blank\" rel=\"noopener\">the experiment assignment</a> on ketangpai platform .</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckaers0550005r0akm4k2995v","category_id":"ckaers0520002r0ak1ifh7wxn","_id":"ckaers05d000dr0aksjdv493v"},{"post_id":"ckaers04v0000r0ak0t0s2iu4","category_id":"ckaers0520002r0ak1ifh7wxn","_id":"ckaers05f000ir0akvjebxj3z"},{"post_id":"ckaers0560006r0aknyojgwhn","category_id":"ckaers0520002r0ak1ifh7wxn","_id":"ckaers05i000lr0ak9jj5ta6p"},{"post_id":"ckaers05a000ar0akyoz1hkb5","category_id":"ckaers0520002r0ak1ifh7wxn","_id":"ckaers05l000qr0ak3vpmsseo"},{"post_id":"ckaers0500001r0akywfo14h5","category_id":"ckaers0520002r0ak1ifh7wxn","_id":"ckaers05n000tr0akxx8aterl"},{"post_id":"ckaers0540004r0akf7bnjcg7","category_id":"ckaers0520002r0ak1ifh7wxn","_id":"ckaers05s000xr0ak05zngbzj"},{"post_id":"ckaers05g000kr0akqe0mhppo","category_id":"ckaers0520002r0ak1ifh7wxn","_id":"ckaers05t0010r0ak831btvvi"},{"post_id":"ckaers05k000pr0akfbezn18c","category_id":"ckaers05j000mr0ak2049xfe5","_id":"ckaers05v0015r0akqqrcdpri"},{"post_id":"ckaers05b000cr0ak4xzg0vgo","category_id":"ckaers05j000mr0ak2049xfe5","_id":"ckaers05x0018r0ak5esxt10n"},{"post_id":"ckaers05m000sr0aklyr0mcpn","category_id":"ckaers05j000mr0ak2049xfe5","_id":"ckaers05y001dr0akct9nw68q"},{"post_id":"ckaers05e000hr0akwrubjxbn","category_id":"ckaers05q000ur0aktq5pqed4","_id":"ckaers060001gr0aksci869vs"},{"post_id":"ckaers05w0017r0akmhuhlqc5","category_id":"ckaers05u0011r0akzkgmz1zf","_id":"ckaers061001ir0akvanquiv5"},{"post_id":"ckaers05r000wr0akpzu5boi6","category_id":"ckaers05u0011r0akzkgmz1zf","_id":"ckaers064001lr0akq1m3qz92"},{"post_id":"ckaers05s000zr0akcwstig4y","category_id":"ckaers05u0011r0akzkgmz1zf","_id":"ckaers064001nr0ak7iesajdk"},{"post_id":"ckaers05v0014r0akvvk8sh8z","category_id":"ckaers05u0011r0akzkgmz1zf","_id":"ckaers065001pr0akol6ypjsp"},{"post_id":"ckbu5vf6q000080aknmv6tado","category_id":"ckbu5vf75000180akhatim2af","_id":"ckbu5vf7d000480ak7lomw2ce"}],"PostTag":[{"post_id":"ckaers0550005r0akm4k2995v","tag_id":"ckaers0530003r0akruqn8m9s","_id":"ckaers0590009r0ak6pvy6fpt"},{"post_id":"ckaers04v0000r0ak0t0s2iu4","tag_id":"ckaers0530003r0akruqn8m9s","_id":"ckaers05b000br0ak4nmhvz66"},{"post_id":"ckaers0560006r0aknyojgwhn","tag_id":"ckaers0530003r0akruqn8m9s","_id":"ckaers05e000gr0akdovbc2od"},{"post_id":"ckaers05a000ar0akyoz1hkb5","tag_id":"ckaers0530003r0akruqn8m9s","_id":"ckaers05g000jr0akdfen0dhz"},{"post_id":"ckaers0500001r0akywfo14h5","tag_id":"ckaers0530003r0akruqn8m9s","_id":"ckaers05j000or0akcgp9inpc"},{"post_id":"ckaers05b000cr0ak4xzg0vgo","tag_id":"ckaers0530003r0akruqn8m9s","_id":"ckaers05m000rr0akmlhdzn5h"},{"post_id":"ckaers0540004r0akf7bnjcg7","tag_id":"ckaers0530003r0akruqn8m9s","_id":"ckaers05r000vr0ak2rqjovpv"},{"post_id":"ckaers05g000kr0akqe0mhppo","tag_id":"ckaers0530003r0akruqn8m9s","_id":"ckaers05s000yr0akd1hb6kqi"},{"post_id":"ckaers05k000pr0akfbezn18c","tag_id":"ckaers0530003r0akruqn8m9s","_id":"ckaers05u0013r0akmmdam188"},{"post_id":"ckaers05m000sr0aklyr0mcpn","tag_id":"ckaers0530003r0akruqn8m9s","_id":"ckaers05w0016r0ak8xpt98x8"},{"post_id":"ckaers05e000hr0akwrubjxbn","tag_id":"ckaers05j000nr0akt7wpqii0","_id":"ckaers05x0019r0aku57lyesv"},{"post_id":"ckaers05w0017r0akmhuhlqc5","tag_id":"ckaers05u0012r0akw9mzb55s","_id":"ckaers05z001er0akxg2kqzma"},{"post_id":"ckaers05r000wr0akpzu5boi6","tag_id":"ckaers05u0012r0akw9mzb55s","_id":"ckaers064001kr0ak2s89kbeo"},{"post_id":"ckaers05r000wr0akpzu5boi6","tag_id":"ckaers05y001cr0ak28t15t6c","_id":"ckaers064001mr0akyz95zr66"},{"post_id":"ckaers05s000zr0akcwstig4y","tag_id":"ckaers05u0012r0akw9mzb55s","_id":"ckaers066001rr0akio4wvmuy"},{"post_id":"ckaers05s000zr0akcwstig4y","tag_id":"ckaers05y001cr0ak28t15t6c","_id":"ckaers066001sr0akrfhdfqzy"},{"post_id":"ckaers05v0014r0akvvk8sh8z","tag_id":"ckaers05u0012r0akw9mzb55s","_id":"ckaers067001ur0aknr5o2f6t"},{"post_id":"ckaers05v0014r0akvvk8sh8z","tag_id":"ckaers066001tr0akhdggtfit","_id":"ckaers067001vr0akcbchwnqd"},{"post_id":"ckbu5vf6q000080aknmv6tado","tag_id":"ckbu5vf79000280akznems1hn","_id":"ckbu5vf7b000380ak1cd5vd3t"}],"Tag":[{"name":"计算机图形学","_id":"ckaers0530003r0akruqn8m9s"},{"name":"图形学","_id":"ckaers05j000nr0akt7wpqii0"},{"name":"可视化","_id":"ckaers05u0012r0akw9mzb55s"},{"name":"地理空间数据","_id":"ckaers05y001cr0ak28t15t6c"},{"name":"时间趋势","_id":"ckaers066001tr0akhdggtfit"},{"name":"Computer Graphics","_id":"ckbu5vf79000280akznems1hn"}]}}